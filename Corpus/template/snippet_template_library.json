{
  "geometry": [
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Main straight lanes (temporarily closed)\nmain_straight = StraightLane([-50, 0], [50, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=lane_width, speed_limit=10)  # slow lane\nnetwork.add_lane(\"north\", \"south\", main_straight)\n\n# Define closed section\nclosed_start = -15\nclosed_end = 15",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Main fast lane with temporary control\nmain_lane = StraightLane([-100, 0], [100, 0], \n                        line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n                        width=lane_width, \n                        speed_limit=15)  # fast lane\nnetwork.add_lane(\"north\", \"south\", main_lane)\n\n# Define controlled zone boundaries\ncontrol_zone_start = -20\ncontrol_zone_end = 20",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Intersection approach lane (slow speed)\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n                           width=lane_width,\n                           speed_limit=8)  # slow speed limit\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define intersection boundaries\nintersection_start = -15\nintersection_end = 15",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Intersection approach lane with special markings\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.SPECIAL, LineType.SPECIAL),\n                           width=lane_width,\n                           speed_limit=10)\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define temporary closure boundaries\nclosure_start = -20\nclosure_end = 20",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Intersection approach lane with slow speed limit\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n                           width=lane_width,\n                           speed_limit=8)  # slow speed\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define temporary closure boundaries\nclosure_start = -15\nclosure_end = 15",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Standard intersection approach lane\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n                           width=lane_width,\n                           speed_limit=10)\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define temporary control zone\ncontrol_zone_start = -15\ncontrol_zone_end = 15",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Standard intersection approach lane\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n                           width=lane_width,\n                           speed_limit=10)\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define intersection boundaries\nintersection_start = -15\nintersection_end = 15",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Standard intersection approach lane\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n                           width=lane_width,\n                           speed_limit=10)\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define temporary closure zone\nclosure_zone_start = -15\nclosure_zone_end = 15",
    "from NGSIM_env.road.lane import StraightLane, LineType\nfrom NGSIM_env.road.road import RoadNetwork\n\nnetwork = RoadNetwork()\nintersection_center = (0, 0)\nlane_width = 3.5\n\n# Intersection approach lane with special markings\napproach_lane = StraightLane([-100, 0], [100, 0],\n                           line_types=(LineType.SPECIAL, LineType.SPECIAL),\n                           width=lane_width,\n                           speed_limit=10)\nnetwork.add_lane(\"north\", \"south\", approach_lane)\n\n# Define intersection boundaries\nintersection_start = -15\nintersection_end = 15"
  ],
  "spawn": [
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\nego = HumanLikeVehicle on main_straight at (closed_start - 20, 0), \n    with speed 8 m/s, \n    heading 0 deg,\n    behavior=go_straight\n\nadversary1 = HumanLikeVehicle on main_straight.left_lane at (closed_start - 18, 1.05),\n    with speed 9 m/s,\n    heading 0 deg,\n    behavior=unsafe_lane_change_right\n\nadversary2 = HumanLikeVehicle on main_straight at (closed_start - 25, 0),\n    with speed 10 m/s,\n    heading 0 deg,\n    behavior=unsafe_lane_change_left\n\nbackground_vehicles = []\nfor i in range(17):  # medium traffic density\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching controlled zone\nego = HumanLikeVehicle on main_lane at (control_zone_start - 30, 0),\n    with speed 12 m/s,\n    heading 0 deg,\n    behavior=straight_with_braking\n\n# Adversary vehicles\nadversary1 = HumanLikeVehicle on main_lane.left_lane at (control_zone_start - 28, 1.05),\n    with speed 13 m/s,\n    heading 0 deg,\n    behavior=tailgating_left\n\nadversary2 = HumanLikeVehicle on main_lane at (control_zone_start - 25, 0),\n    with speed 14 m/s,\n    heading 0 deg,\n    behavior=unsafe_left_change\n\n# Background traffic\nbackground_vehicles = []\nfor i in range(17):  # medium density\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching intersection\nego = HumanLikeVehicle on approach_lane at (intersection_start - 25, 0),\n    with speed 6 m/s,\n    heading 0 deg,\n    behavior=intersection_approach\n\n# Aggressive tailgating vehicles\nadversary1 = HumanLikeVehicle on approach_lane.left_lane at (intersection_start - 23.623, 1.05),\n    with speed 6.5 m/s,\n    heading 0 deg,\n    behavior=close_tailgating_left\n\nadversary2 = HumanLikeVehicle on approach_lane.left_lane at (intersection_start - 24.453, 1.05),\n    with speed 7 m/s,\n    heading 0 deg,\n    behavior=extremely_close_tailgating\n\n# High density background traffic\nbackground_vehicles = []\nfor i in range(50):  # high traffic density\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching closed intersection\nego = HumanLikeVehicle on approach_lane at (closure_start - 30, 0),\n    with speed 8 m/s,\n    heading 0 deg,\n    behavior=straight_with_closure_braking\n\n# Adversary vehicles\nadversary1 = HumanLikeVehicle on approach_lane at (closure_start - 25, 0),\n    with speed 8.5 m/s,\n    heading 0 deg,\n    behavior=sudden_brake_front\n\nadversary2 = HumanLikeVehicle on approach_lane.right_lane at (closure_start - 28, -1.05),\n    with speed 9 m/s,\n    heading 0 deg,\n    behavior=aggressive_speeding_right\n\n# High density background traffic\nbackground_vehicles = []\nfor i in range(50):\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching closed intersection\nego = HumanLikeVehicle on approach_lane at (closure_start - 25, 0),\n    with speed 6 m/s,\n    heading 0 deg,\n    behavior=intersection_approach\n\n# Adversary vehicles performing unsafe lane changes\nadversary1 = HumanLikeVehicle on approach_lane.left_lane at (closure_start - 22.79, 1.05),\n    with speed 6.5 m/s,\n    heading 0 deg,\n    behavior=unsafe_right_change\n\nadversary2 = HumanLikeVehicle on approach_lane.right_lane at (closure_start - 21.44, -1.05),\n    with speed 7 m/s,\n    heading 0 deg,\n    behavior=unsafe_left_change\n\n# Low density background traffic\nbackground_vehicles = []\nfor i in range(5):\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching controlled intersection\nego = HumanLikeVehicle on approach_lane at (control_zone_start - 25, 0),\n    with speed 8 m/s,\n    heading 0 deg,\n    behavior=straight_with_braking\n\n# Right-side adversary performing unsafe left change\nadversary1 = HumanLikeVehicle on approach_lane.right_lane at (control_zone_start - 22, -1.05),\n    with speed 8.5 m/s,\n    heading 0 deg,\n    behavior=unsafe_left_change_close\n\n# Front adversary with delayed braking\nadversary2 = HumanLikeVehicle on approach_lane at (control_zone_start - 18, 0),\n    with speed 9 m/s,\n    heading 0 deg,\n    behavior=delayed_sudden_brake\n\n# Low density background traffic\nbackground_vehicles = []\nfor i in range(5):\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching intersection\nego = HumanLikeVehicle on approach_lane at (intersection_start - 25, 0),\n    with speed 8 m/s,\n    heading 0 deg,\n    behavior=straight_with_braking\n\n# Front adversarial vehicle with delayed braking\nadversary1 = HumanLikeVehicle on approach_lane at (intersection_start - 20, 0),\n    with speed 8.5 m/s,\n    heading 0 deg,\n    behavior=delayed_sudden_brake_front\n\n# Right-side adversarial vehicle\nadversary2 = HumanLikeVehicle on approach_lane.right_lane at (intersection_start - 22, -1.05),\n    with speed 9 m/s,\n    heading 0 deg,\n    behavior=delayed_sudden_brake_right\n\n# Medium density background traffic\nbackground_vehicles = []\nfor i in range(20):\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching closed intersection\nego = HumanLikeVehicle on approach_lane at (closure_zone_start - 25, 0),\n    with speed 8 m/s,\n    heading 0 deg,\n    behavior=straight_with_closure_braking\n\n# Left lane speeding adversary\nadversary1 = HumanLikeVehicle on approach_lane.left_lane at (closure_zone_start - 22, 1.05),\n    with speed 10.5 m/s,  # 7.456 m/s speed increase from base 8 m/s\n    heading 0 deg,\n    behavior=aggressive_speeding_left\n\n# Right lane sudden braking adversary\nadversary2 = HumanLikeVehicle on approach_lane.right_lane at (closure_zone_start - 20, -1.05),\n    with speed 8 m/s,\n    heading 0 deg,\n    behavior=delayed_sudden_brake\n\n# Low density background traffic\nbackground_vehicles = []\nfor i in range(5):\n    background_vehicles.append(IDMVehicle on network.random_lane())",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle approaching intersection\nego = HumanLikeVehicle on approach_lane at (intersection_start - 25, 0),\n    with speed 8 m/s,\n    heading 0 deg,\n    behavior=intersection_approach\n\n# Right-side tailgating adversary\nadversary1 = HumanLikeVehicle on approach_lane.right_lane at (intersection_start - 23.513, -1.05),\n    with speed 8.5 m/s,\n    heading 0 deg,\n    behavior=close_tailgating_right\n\n# Rear adversary attempting left lane change\nadversary2 = HumanLikeVehicle on approach_lane at (intersection_start - 28, 0),\n    with speed 9 m/s,\n    heading 0 deg,\n    behavior=aggressive_left_change\n\n# Low density background traffic\nbackground_vehicles = []\nfor i in range(5):\n    background_vehicles.append(IDMVehicle on network.random_lane())"
  ],
  "behavior": [
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior go_straight:\n    when ego.position.x < closed_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.7)  # braking for closure\n\nbehavior unsafe_lane_change_right:\n    when distanceTo(ego) < 30:\n        adversary1.control = ControlledVehicle.lane_change(direction='right', aggressive=True)\n        adversary1.target_speed = ego.speed * 1.2\n\nbehavior unsafe_lane_change_left:\n    when distanceTo(ego) < 35:\n        adversary2.control = ControlledVehicle.lane_change(direction='left', aggressive=True)\n        adversary2.target_speed = ego.speed * 1.3",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior straight_with_braking:\n    when ego.position.x < control_zone_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.6)  # moderate braking\n\nbehavior tailgating_left:\n    adversary1.target_speed = ego.speed * 1.1\n    adversary1.control = ControlledVehicle.lane_following(distance=1.1)  # close following\n\nbehavior unsafe_left_change:\n    when distanceTo(ego) < 30:\n        adversary2.control = ControlledVehicle.lane_change(direction='left', aggressive=True)\n        adversary2.target_speed = ego.speed * 1.25",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior intersection_approach:\n    when ego.position.x < intersection_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.5)  # cautious braking\n\nbehavior close_tailgating_left:\n    adversary1.target_speed = ego.speed * 1.08\n    adversary1.control = ControlledVehicle.lane_following(distance=1.38)  # dangerous following\n\nbehavior extremely_close_tailgating:\n    adversary2.target_speed = ego.speed * 1.15\n    adversary2.control = ControlledVehicle.lane_following(distance=0.55)  # extremely dangerous",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior straight_with_closure_braking:\n    when ego.position.x < closure_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.8)  # strong braking for closure\n\nbehavior sudden_brake_front:\n    when distanceTo(ego) < 15:\n        adversary1.control = ControlledVehicle.brake(intensity=1.0)  # maximum braking\n        adversary1.reaction_time = 1.08  # delayed reaction\n\nbehavior aggressive_speeding_right:\n    when distanceTo(ego) < 20:\n        adversary2.control = ControlledVehicle.keep_lane()\n        adversary2.target_speed = ego.speed + 12.2  # significant speed increase",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior intersection_approach:\n    when ego.position.x < closure_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.6)  # moderate braking for closure\n\nbehavior unsafe_right_change:\n    when distanceTo(ego) < 30:\n        adversary1.control = ControlledVehicle.lane_change(direction='right', aggressive=True)\n        adversary1.target_speed = ego.speed * 1.15\n\nbehavior unsafe_left_change:\n    when distanceTo(ego) < 25:\n        adversary2.control = ControlledVehicle.lane_change(direction='left', aggressive=True)\n        adversary2.target_speed = ego.speed * 1.2",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior straight_with_braking:\n    when ego.position.x < control_zone_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.7)  # controlled braking\n\nbehavior unsafe_left_change_close:\n    when distanceTo(ego) < 30:\n        adversary1.control = ControlledVehicle.lane_change(direction='left', aggressive=True)\n        adversary1.target_speed = ego.speed * 1.15\n        adversary1.min_lateral_distance = 3.0  # close proximity change\n\nbehavior delayed_sudden_brake:\n    when distanceTo(ego) < 20:\n        adversary2.control = ControlledVehicle.brake(intensity=1.0)  # hard braking\n        adversary2.reaction_time = 2.7  # significant delay",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior straight_with_braking:\n    when ego.position.x < intersection_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.6)  # controlled braking\n\nbehavior delayed_sudden_brake_front:\n    when distanceTo(ego) < 25:\n        adversary1.control = ControlledVehicle.brake(intensity=1.0)  # hard braking\n        adversary1.reaction_time = 2.229  # delayed reaction\n\nbehavior delayed_sudden_brake_right:\n    when distanceTo(ego) < 30:\n        adversary2.control = ControlledVehicle.brake(intensity=1.0)  # hard braking\n        adversary2.reaction_time = 1.921  # slightly faster reaction",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior straight_with_closure_braking:\n    when ego.position.x < closure_zone_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.7)  # moderate braking for closure\n\nbehavior aggressive_speeding_left:\n    adversary1.target_speed = ego.speed + 7.456  # significant speed increase\n    adversary1.control = ControlledVehicle.keep_lane()\n\nbehavior delayed_sudden_brake:\n    when distanceTo(ego) < 25:\n        adversary2.control = ControlledVehicle.brake(intensity=1.0)  # maximum braking\n        adversary2.reaction_time = 2.052  # delayed reaction time",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\nbehavior intersection_approach:\n    when ego.position.x < intersection_start:\n        ego.control = ControlledVehicle.keep_lane()\n    else:\n        ego.control = ControlledVehicle.brake(intensity=0.6)  # controlled braking\n\nbehavior close_tailgating_right:\n    adversary1.target_speed = ego.speed * 1.1\n    adversary1.control = ControlledVehicle.lane_following(distance=1.5)  # dangerous tailgating\n\nbehavior aggressive_left_change:\n    when distanceTo(ego) < 30:\n        adversary2.control = ControlledVehicle.lane_change(direction='left', aggressive=True)\n        adversary2.target_speed = ego.speed * 1.2\n        adversary2.min_lateral_distance = 3.0  # close proximity change"
  ]
}