{
  "geometry": [
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [HighD] dataset recording: vehicle_tracks_000_trajectory_set_109.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Heading direction through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_115.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_133.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_134.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_147.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_157.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_23.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_27.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_28.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_48.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_67.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_71.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through special lane\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_73.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_80.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_91.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_92.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_000_trajectory_set_95.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_107.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_114.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_119.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_123.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_125.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_13.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_136.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_144.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_145.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_147.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_150.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_151.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_157.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_158.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_162.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_165.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_166.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_182.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    road.special_lane_type = \"temporary_closure\"  # Special lane marking\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_186.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_34.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_37.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_52.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_54.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    road.lane_type = \"fast\"  # Fast lane conditions\n    road.temporary_closure = True  # Intersection closure flag\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_57.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    road.register_special_lane(\n        lane_type=\"closure\", \n        position=[50.0, 3.5], \n        length=20.0\n    )\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_60.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_71.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_89.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_9.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_001_trajectory_set_93.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_100.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_101.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_102.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_103.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Primary trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_108.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_113.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_114.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_116.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_117.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_129.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_13.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_15.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    road.register_special_zone(zone_type=\"closure\")  # Temporary road closure\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_18.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_2.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_24.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_26.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_30.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_49.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Eastbound through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_57.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_69.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintaining straight trajectory\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_71.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_76.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_83.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through controlled intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_91.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_92.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Straight trajectory through intersection\n    return road, ego_direction",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom NGSIM_env.utils import get_intersection_config\n\n# Based on [brake] dataset recording: vehicle_tracks_002_trajectory_set_99.json\ndef build_scenario():\n    road = Road(network=RoadNetwork.from_map(\"intersection.osm\"))\n    ego_direction = \"go_straight\"  # Maintain straight trajectory\n    return road, ego_direction"
  ],
  "spawn": [
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Approx. intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33  # 30 km/h initial speed\n    )\n    \n    # Adversarial vehicles\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.8, 3.5],  # 4.4m rear offset\n        heading=0,\n        speed=ego.speed + 10.93  # Speeding condition\n    )\n    \n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.35],  # 0.85m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.5  # Tailgating behavior\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (braking condition)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversarial vehicles\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.6],  # 1.1m right offset\n        heading=0,\n        speed=ego.speed + 10.1  # Speeding condition\n    )\n    \n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[45.5, 3.5],  # 4.7m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.44  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.425],  # 0.925m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.3  # Extremely short following distance\n    )\n    \n    # Adversary 2 (sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.492  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.57],  # 0.93m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.93  # Unsafe following distance\n    )\n    \n    # Adversary 2 (right-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.357],  # 0.857m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.86  # Dangerous proximity\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.712],  # 0.788m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.79  # Dangerous following distance\n    )\n    \n    # Adversary 2 (unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[54.944, 3.5],  # 4.744m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.8  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.921  # Delayed response\n    )\n    \n    # Adversary 2 (right-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 5.35],  # 1.85m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.407  # Longer delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe left lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[51.773, 3.5],  # 1.573m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (right-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.92],  # 1.42m right offset\n        heading=0,\n        speed=ego.speed + 13.66  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[47.8, 3.5],  # 2.4m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.224  # Delayed response\n    )\n    \n    # Adversary 2 (left-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.58],  # 0.92m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.928  # Longer delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 7.114],  # 3.614m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.5],  # 1.0m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.753  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.785, 3.5],  # 3.585m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.8  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (left-side unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 1.597],  # 1.903m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right', \n        lane_change_urgency=2.0  # Highly aggressive\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.174, 3.5],  # 2.974m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[55.0, 3.5],  # 4.8m front offset\n        heading=0,\n        speed=ego.speed + 11.33  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, -1.166],  # 4.666m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.6  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (rear right lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[48.847, 3.5],  # 1.353m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.8  # High urgency\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear-right lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[47.213, 4.486],  # 2.99m rear-right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.7\n    )\n    \n    # Adversary 2 (right-side lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 6.748],  # 3.25m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.9\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.57, 3.5],  # 4.63m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.7  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[47.2, 3.5],  # 3.0m rear offset\n        heading=0,\n        speed=ego.speed + 9.49  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.684, 3.5],  # 3.484m front offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.658  # Delayed braking response\n    )\n    \n    # Adversary 2 (left tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.315],  # 1.185m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.18  # Dangerous proximity\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front speeding vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed + 11.88  # Speeding condition\n    )\n    \n    # Adversary 2 (left-side lane changer)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 1.619],  # 1.881m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed + 12.87  # Significant speed increase\n    )\n    \n    # Adversary 2 (rear speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[45.8, 3.5],  # 4.4m rear offset\n        heading=0,\n        speed=ego.speed + 11.78  # Aggressive following speed\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.4],  # 1.1m left offset\n        heading=0,\n        speed=ego.speed + 11.61  # Significant speeding\n    )\n    \n    # Adversary 2 (front unsafe lane change)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[52.34, 3.5],  # 2.14m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[47.5, 3.5],  # 2.7m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.03  # Delayed response\n    )\n    \n    # Adversary 2 (right-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.6],  # 1.1m right offset\n        heading=0,\n        speed=ego.speed + 10.34  # Speeding condition\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[55.018, 3.5],  # 4.818m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.7  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.482  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side lane changer)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 5.949],  # 2.449m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5\n    )\n    \n    # Adversary 2 (rear lane changer)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[48.139, 3.5],  # 2.061m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.3\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.668],  # 1.168m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.0  # Unsafe following distance\n    )\n    \n    # Adversary 2 (rear lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[48.36, 3.5],  # 1.84m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.6  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[51.182, 3.5],  # 0.982m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.5  # Dangerous following distance\n    )\n    \n    # Adversary 2 (left-side lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 6.346],  # 2.846m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.703],  # 0.797m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.8  # Critical following distance\n    )\n    \n    # Adversary 2 (right-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.297],  # 0.797m right offset \n        heading=0,\n        speed=ego.speed + 9.93  # Significant speed excess\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[47.16, 3.5],  # 3.04m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.6  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (left-side unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 1.685],  # 1.815m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.8  # More aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe right lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 7.403],  # 3.903m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.872, 3.5],  # 0.672m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.67  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe left lane change from right)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 5.918],  # 2.418m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.7  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (left-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.563],  # 0.937m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.94  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[48.955, 3.5],  # 1.245m rear offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.2  # Dangerous following distance\n    )\n    \n    # Adversary 2 (front lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[52.451, 3.5],  # 2.251m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.6  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (speeding front vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.08, 3.5],  # 2.88m front offset\n        heading=0,\n        speed=ego.speed + 9.25  # Significant speed increase\n    )\n    \n    # Adversary 2 (unsafe lane changer)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[53.08, 4.38],  # 2.88m front + 0.88m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.9  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front speeding vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed + 12.77  # Significant speed increase\n    )\n    \n    # Adversary 2 (right-side speeding vehicle)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed + 14.49  # Extreme speed differential\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.647],  # 0.853m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.854  # Delayed response\n    )\n    \n    # Adversary 2 (rear speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[45.7, 3.5],  # 4.5m rear offset\n        heading=0,\n        speed=ego.speed + 14.46  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[51.394, 3.5],  # 1.194m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.0  # Dangerous following distance\n    )\n    \n    # Adversary 2 (right-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.65],  # 1.15m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.971  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear speeding vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.8, 3.5],  # 4.4m rear offset\n        heading=0,\n        speed=ego.speed + 14.36  # Significant speed excess\n    )\n    \n    # Adversary 2 (unsafe lane changer)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[54.6, 3.5],  # 4.4m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.432  # Delayed response\n    )\n    \n    # Adversary 2 (left tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.96],  # 0.54m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.54  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, -1.175],  # 4.675m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.9  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (right-side unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 5.322],  # 1.822m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right', \n        lane_change_urgency=2.1  # Highly aggressive\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.58],  # 0.92m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.296  # Delayed response\n    )\n    \n    # Adversary 2 (right-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.102  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[47.1, 3.5],  # 3.1m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.298  # Delayed response\n    )\n    \n    # Adversary 2 (left-side unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 1.413],  # 2.087m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.697],  # 1.197m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.2  # Unsafe following distance\n    )\n    \n    # Adversary 2 (left-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.781],  # 0.719m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.7  # Dangerous proximity\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.064],  # 0.564m right offset\n        heading=0,\n        speed=ego.speed + 14.24  # Significant speed increase\n    )\n    \n    # Adversary 2 (left-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.936],  # 0.564m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.56  # Dangerously close following\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[48.9, 3.5],  # 1.3m rear offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.3  # Unsafe following distance\n    )\n    \n    # Adversary 2 (front tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[51.386, 3.5],  # 1.19m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.19  # Dangerous proximity\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True\n    )\n    \n    # Adversary 1 (left-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.694],  # 0.806m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.747\n    )\n    \n    # Adversary 2 (left-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.694],  # Same lateral position as adv1\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.806  # Unsafe following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[51.621, 3.5],  # 1.421m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.4  # Unsafe following distance\n    )\n    \n    # Adversary 2 (right-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.793],  # 1.293m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.2  # Dangerous proximity\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear speeding vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.8, 3.5],  # 4.4m rear offset\n        heading=0,\n        speed=ego.speed + 9.02  # Significant speed increase\n    )\n    \n    # Adversary 2 (rear sudden brake)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[47.2, 3.5],  # 3.0m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.42  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front speeding vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed + 9.89  # Speeding condition\n    )\n    \n    # Adversary 2 (front sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[55.7, 3.5],  # 5.5m front offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.12  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear speeding vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.8, 3.5],  # 4.4m rear offset\n        heading=0,\n        speed=ego.speed + 7.645  # Significant speed differential\n    )\n    \n    # Adversary 2 (left-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.465],  # 1.035m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.035  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[47.5, 3.5],  # 2.7m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.558  # Delayed response\n    )\n    \n    # Adversary 2 (left-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.4],  # 1.1m left offset\n        heading=0,\n        speed=ego.speed + 12.148  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.58],  # 0.92m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.66  # Delayed response\n    )\n    \n    # Adversary 2 (left-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 1.65],  # 1.85m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.17  # Longer delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[54.971, 3.5],  # 4.771m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.6\n    )\n    \n    # Adversary 2 (rear lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[47.892, 3.5],  # 2.308m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.4\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.982],  # 0.518m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.52  # Dangerous following distance\n    )\n    \n    # Adversary 2 (left-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.636],  # 0.864m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.86  # Unsafe following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.354],  # 1.146m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.9  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (speeding vehicle)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[45.5, 3.5],  # 4.7m rear offset\n        heading=0,\n        speed=ego.speed + 13.53  # Significant speed differential\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 5.377],  # 1.877m right offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (speeding vehicle)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[53.5, 3.5],  # 3.3m front offset\n        heading=0,\n        speed=ego.speed + 5.44  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear left lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.284, 3.5],  # 4.916m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.6\n    )\n    \n    # Adversary 2 (front right lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[54.587, 3.5],  # 4.387m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right', \n        lane_change_urgency=1.4\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.132],  # 1.368m left offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.37  # Dangerous following distance\n    )\n    \n    # Adversary 2 (right-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.868],  # 1.368m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.594  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[49.627, 3.5],  # 0.573m rear offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.57  # Dangerous following distance\n    )\n    \n    # Adversary 2 (left-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.8],  # 0.7m left offset\n        heading=0,\n        speed=ego.speed + 10.33  # Significant speed increase\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 1.16],  # 2.34m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5\n    )\n    \n    # Adversary 2 (sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 0.66],  # 2.84m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.844\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (speeding rear vehicle)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[45.8, 3.5],  # 4.4m rear offset\n        heading=0,\n        speed=ego.speed + 6.2  # Speeding condition\n    )\n    \n    # Adversary 2 (delayed brake vehicle)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[47.5, 3.5],  # 2.7m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.57  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.09],  # 0.59m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.59  # Dangerous following distance\n    )\n    \n    # Adversary 2 (right-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.68],  # 1.18m right offset (staggered formation)\n        heading=0,\n        speed=ego.speed + 7.88  # Significant speed differential\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.6],  # 0.9m left offset\n        heading=0,\n        speed=ego.speed + 10.704,  # Speeding condition\n        lane_change_direction=None  # Maintain lane\n    )\n    \n    # Adversary 2 (unsafe lane change)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[53.778, 2.6],  # 3.28m front-left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.982  # Delayed response\n    )\n    \n    # Adversary 2 (unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[54.921, 3.5],  # 4.721m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (rear tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[48.94, 3.5],  # 1.26m rear offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.2  # Dangerous following distance\n    )\n    \n    # Adversary 2 (unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[47.92, 3.5],  # 2.28m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[54.445, 3.5],  # 4.245m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (left-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.5],  # 1.0m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.117  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.65],  # 0.85m left offset\n        heading=0,\n        speed=ego.speed + 7.98  # Significant speed increase\n    )\n    \n    # Adversary 2 (front sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[53.7, 3.5],  # 3.5m front offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.10  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[49.3, 3.5],  # 0.91m rear offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=0.9  # Dangerous following distance\n    )\n    \n    # Adversary 2 (unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 1.0],  # 2.54m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.296  # Delayed response\n    )\n    \n    # Adversary 2 (rear sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[47.5, 3.5],  # 2.7m rear offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.063  # Faster reaction\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.57],  # 0.93m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.483  # Delayed response\n    )\n    \n    # Adversary 2 (rear unsafe lane change)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[47.86, 3.5],  # 2.34m rear offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.42],  # 0.92m right offset\n        heading=0,\n        speed=ego.speed + 14.48  # Significant speed increase\n    )\n    \n    # Adversary 2 (left-side lane change)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 2.043],  # 1.457m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='left',\n        lane_change_urgency=2.0  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.818],  # 1.318m right offset\n        heading=0,\n        speed=ego.speed + 6.284  # Speeding condition\n    )\n    \n    # Adversary 2 (right-side tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 4.818],  # 1.318m right offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.3  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.166],  # 1.334m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (tailgating)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[51.252, 3.5],  # 1.052m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.05  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (front tailgating)\n    adv1 = HumanLikeVehicle(\n        road=road,\n        position=[51.252, 3.5],  # 1.052m front offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.05  # Dangerous following distance\n    )\n    \n    # Adversary 2 (right-side sudden brake)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.55],  # 1.05m right offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=1.22  # Delayed response\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (left-side sudden brake)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.58],  # 0.92m left offset\n        heading=0,\n        speed=ego.speed,\n        reaction_time=2.32  # Delayed response\n    )\n    \n    # Adversary 2 (front unsafe lane change)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[52.44, 3.5],  # 2.24m front offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (unsafe lane change from left)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[46.685, 3.5],  # 3.515m left offset\n        heading=0,\n        speed=ego.speed,\n        lane_change_direction='right',\n        lane_change_urgency=1.5  # Aggressive maneuver\n    )\n    \n    # Adversary 2 (tailgating from rear)\n    adv2 = HumanLikeVehicle(\n        road=road,\n        position=[48.744, 3.5],  # 1.456m rear offset\n        heading=0,\n        speed=ego.speed,\n        min_gap=1.46  # Dangerous following distance\n    )\n    \n    return ego, [adv1, adv2]",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle\nfrom NGSIM_env.vehicle.behavior import IDMVehicle\n\ndef setup_vehicles(road):\n    # Ego vehicle (emergency braking)\n    ego = HumanLikeVehicle(\n        road=road,\n        position=[50.2, 3.5],  # Intersection entry point\n        heading=0,  # Eastbound orientation\n        target_speed=8.33,  # 30 km/h initial speed\n        braking=True  # Emergency brake state\n    )\n    \n    # Adversary 1 (right-side speeding)\n    adv1 = IDMVehicle(\n        road=road,\n        position=[50.2, 4.6],  # 1.1m right offset\n        heading=0,\n        speed=ego.speed + 10.93  # Significant speed increase\n    )\n    \n    # Adversary 2 (left-side speeding)\n    adv2 = IDMVehicle(\n        road=road,\n        position=[50.2, 2.4],  # 1.1m left offset\n        heading=0,\n        speed=ego.speed + 8.27  # Elevated speed\n    )\n    \n    return ego, [adv1, adv2]"
  ],
  "behavior": [
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego braking maneuver\n    ego.target_speed = 0  # Full stop\n    ego.apply_emergency_brake()\n    \n    # Adversary [1] speeding behavior\n    adversaries[0].target_speed += 10.93\n    \n    # Adversary [2] tailgating parameters\n    adversaries[1].behavior.update({\n        'safety_distance': 0.5,\n        'aggressiveness': 1.8  # High aggression factor\n    })\n    \n    # Configure IDM parameters for both adversaries\n    for adv in adversaries:\n        if isinstance(adv, IDMVehicle):\n            adv.policy_params.update({\n                'delta': 4,  # Aggressive acceleration exponent\n                'a': 3.0    # High acceleration capability\n            })",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary [1] speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 10.1,\n        'a': 3.5,  # High acceleration\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Adversary [2] braking behavior\n    adversaries[1].behavior.update({\n        'braking_probability': 1.0,\n        'reaction_time': 1.44,\n        'deceleration': 6.0  # Hard braking\n    })\n    \n    # Traffic density simulation\n    road.vehicle_density = 0.85  # ~50 vehicles in 100m radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.3,\n        'aggressiveness': 2.0,  # Extreme aggression\n        'min_gap': 0.3\n    })\n    \n    # Adversary 2 sudden braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.492,\n        'deceleration': 8.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure tailgating behaviors\n    for i, adv in enumerate(adversaries):\n        adv.behavior.update({\n            'safety_distance': 0.9 - (0.03*i),  # Progressive risk increase\n            'aggressiveness': 1.7 + (0.1*i),  # Escalating aggression\n            'min_gap': adv.min_gap  # Maintain unsafe distances\n        })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.79,\n        'aggressiveness': 1.9,\n        'min_gap': 0.79  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.8,\n        'lateral_acceleration': 2.5,  # Aggressive steering\n        'min_lane_change_distance': 4.7  # Unsafe gap acceptance\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure sudden braking parameters for both adversaries\n    for i, adv in enumerate(adversaries):\n        adv.policy_params.update({\n            'reaction_time': [1.921, 2.407][i],  # Respective delay times\n            'deceleration': 7.5 + (0.5*i),  # Progressive braking intensity\n            'a': 0.0  # Zero acceleration intent\n        })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 unsafe lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 1.57  # Dangerous gap acceptance\n    })\n    \n    # Adversary 2 speeding behavior\n    adversaries[1].policy_params.update({\n        'speed_deviation': 13.66,\n        'a': 4.0,  # High acceleration capability\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.4  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.224,\n        'deceleration': 7.0,\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    adversaries[1].policy_params.update({\n        'reaction_time': 1.928,\n        'deceleration': 6.5,\n        'a': 0.0\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 3.6  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 sudden braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 2.753,\n        'deceleration': 7.0,\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.8,\n        'lateral_acceleration': 2.8,  # Aggressive steering\n        'min_lane_change_distance': 3.5  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 2.0,\n        'lateral_acceleration': 3.0,  # Extreme steering\n        'min_lane_change_distance': 1.8  # Dangerous gap acceptance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.97  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 11.33,\n        'a': 3.5,  # High acceleration\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.4  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 left lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.6,\n        'lateral_acceleration': 2.2,\n        'min_lane_change_distance': 4.6  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 right lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.8,\n        'lateral_acceleration': 2.5,\n        'min_lane_change_distance': 1.3  # Dangerous proximity\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 right lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.7,\n        'lateral_acceleration': 2.3,\n        'min_lane_change_distance': 2.98  # Unsafe gap\n    })\n    \n    # Adversary 2 left lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.9,\n        'lateral_acceleration': 2.7,\n        'min_lane_change_distance': 3.24  # Dangerous maneuver\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.7,\n        'lateral_acceleration': 2.3,  # Aggressive steering\n        'min_lane_change_distance': 4.6  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 9.49,\n        'a': 3.2,  # High acceleration\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.658,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # No acceleration intent\n    })\n    \n    # Adversary 2 tailgating behavior\n    adversaries[1].behavior.update({\n        'safety_distance': 1.18,\n        'aggressiveness': 1.6,\n        'min_gap': 1.18  # Maintain unsafe distance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in 100m radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 11.88,\n        'a': 3.5,  # High acceleration\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 unsafe lane change\n    adversaries[1].behavior.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 1.88  # Dangerous gap acceptance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 12.87,\n        'a': 3.5,  # High acceleration capability\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 11.78,\n        'a': 3.2,\n        'delta': 4\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 11.61,\n        'a': 3.5,  # High acceleration\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 unsafe lane change\n    adversaries[1].behavior.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 2.1  # Unsafe gap acceptance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.03,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 10.34,\n        'a': 3.2,  # High acceleration\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.7,\n        'lateral_acceleration': 2.3,  # Aggressive steering\n        'min_lane_change_distance': 4.8  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 sudden braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.482,\n        'deceleration': 7.2,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.4  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.3,\n        'lateral_acceleration': 1.8,\n        'min_lane_change_distance': 2.0  # Dangerous maneuver\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.17,\n        'aggressiveness': 1.5,\n        'min_gap': 1.0  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.6,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 1.8  # Unsafe gap acceptance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.5,\n        'aggressiveness': 1.6,\n        'min_gap': 0.5  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.8  # Unsafe gap acceptance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.4  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.8,\n        'aggressiveness': 1.9,\n        'min_gap': 0.8  # Maintain hazardous proximity\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 9.93,\n        'a': 4.0,  # High acceleration capability\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.6,\n        'lateral_acceleration': 2.2,\n        'min_lane_change_distance': 3.0  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.8,\n        'lateral_acceleration': 2.5,\n        'min_lane_change_distance': 1.8  # Extremely unsafe gap\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 3.9  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 tailgating behavior\n    adversaries[1].behavior.update({\n        'safety_distance': 0.67,\n        'aggressiveness': 1.6,\n        'min_gap': 0.67\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.7,\n        'lateral_acceleration': 2.3,  # Aggressive steering\n        'min_lane_change_distance': 2.4  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 tailgating parameters\n    adversaries[1].behavior.update({\n        'safety_distance': 0.94,\n        'aggressiveness': 1.8,\n        'min_gap': 0.94  # Maintain unsafe distance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.45  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.2,\n        'aggressiveness': 1.5,\n        'min_gap': 1.2  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.6,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.2  # Unsafe gap acceptance\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 9.25,\n        'a': 3.2,  # High acceleration capability\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 unsafe lane change\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.9,\n        'lateral_acceleration': 2.8,  # Sharp steering\n        'min_lane_change_distance': 2.9  # Dangerous gap acceptance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 (front) speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 12.77,\n        'a': 4.0,  # High acceleration capability\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 (right) extreme speeding\n    adversaries[1].policy_params.update({\n        'speed_deviation': 14.49,\n        'a': 4.5,  # Higher acceleration than front vehicle\n        'delta': 7  # Most aggressive profile\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.854,\n        'deceleration': 8.0,  # Emergency braking\n        'a': 0.0  # No acceleration intent\n    })\n    \n    # Adversary 2 speeding behavior\n    adversaries[1].policy_params.update({\n        'speed_deviation': 14.46,\n        'a': 4.0,  # High acceleration capability\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.194,\n        'aggressiveness': 1.6,\n        'min_gap': 1.0  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 sudden braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.971,\n        'deceleration': 7.2,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 14.36,\n        'a': 4.0,  # High acceleration capability\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.8,  # Aggressive steering\n        'min_lane_change_distance': 4.4  # Unsafe gap acceptance\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.432,\n        'deceleration': 7.5,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 tailgating behavior\n    adversaries[1].behavior.update({\n        'safety_distance': 0.54,\n        'aggressiveness': 2.0,  # High aggression\n        'min_gap': 0.54  # Maintain unsafe distance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 left lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.9,\n        'lateral_acceleration': 2.8,  # Aggressive steering\n        'min_lane_change_distance': 4.68  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 right lane change parameters  \n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 2.1,\n        'lateral_acceleration': 3.2,  # Extreme steering\n        'min_lane_change_distance': 1.82  # Dangerous proximity\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Configure sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.296,\n        'deceleration': 7.5,  # Emergency braking\n        'a': 0.0  # No acceleration intent\n    })\n    \n    adversaries[1].policy_params.update({\n        'reaction_time': 2.102,\n        'deceleration': 7.5,\n        'a': 0.0\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.298,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.0  # Unsafe gap acceptance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure asymmetric tailgating behaviors\n    adversaries[0].behavior.update({\n        'safety_distance': 1.2,\n        'aggressiveness': 1.6,\n        'min_gap': 1.2  # Right-side following parameters\n    })\n    \n    adversaries[1].behavior.update({\n        'safety_distance': 0.7,\n        'aggressiveness': 2.2,  # Higher aggression on left\n        'min_gap': 0.7\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.45  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 14.24,\n        'a': 4.0,  # Extreme acceleration\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 tailgating parameters\n    adversaries[1].behavior.update({\n        'safety_distance': 0.56,\n        'aggressiveness': 2.2,  # Extreme aggression\n        'min_gap': 0.56  # Maintain unsafe distance\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure tailgating behaviors\n    adversaries[0].behavior.update({\n        'safety_distance': 1.3,\n        'aggressiveness': 1.8,\n        'min_gap': 1.3  # Maintain rear danger zone\n    })\n    \n    adversaries[1].behavior.update({\n        'safety_distance': 1.19,\n        'aggressiveness': 2.0,\n        'min_gap': 1.19  # Maintain front danger zone\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.45  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.747,\n        'deceleration': 7.5,\n        'a': 0.0  # No acceleration intent\n    })\n    \n    # Adversary 2 tailgating parameters\n    adversaries[1].behavior.update({\n        'safety_distance': 0.8,\n        'aggressiveness': 1.8,\n        'min_gap': 0.806\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 front tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.4,\n        'aggressiveness': 1.6,\n        'min_gap': 1.4\n    })\n    \n    # Adversary 2 right-side tailgating\n    adversaries[1].behavior.update({\n        'safety_distance': 1.2,\n        'aggressiveness': 1.8,  # Higher lateral aggression\n        'min_gap': 1.2\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.45  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 9.02,\n        'a': 3.2,  # High acceleration capability\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 braking behavior\n    adversaries[1].behavior.update({\n        'reaction_time': 1.42,\n        'deceleration': 7.0,  # Emergency braking\n        'braking_probability': 1.0\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 9.89,\n        'a': 3.0,  # High acceleration\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 sudden braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 2.12,\n        'deceleration': 7.5,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 7.645,\n        'a': 3.0,  # High acceleration\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 tailgating behavior\n    adversaries[1].behavior.update({\n        'safety_distance': 1.035,\n        'aggressiveness': 1.8,\n        'min_gap': 1.035  # Maintain unsafe distance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.558,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 speeding behavior\n    adversaries[1].policy_params.update({\n        'speed_deviation': 12.148,\n        'a': 4.0,  # High acceleration capability\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.66,\n        'deceleration': 7.5,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    adversaries[1].policy_params.update({\n        'reaction_time': 2.17,\n        'deceleration': 8.0,  # Stronger braking\n        'a': 0.0\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.6,\n        'lateral_acceleration': 2.3,  # Aggressive steering\n        'min_lane_change_distance': 4.77  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.4,\n        'lateral_acceleration': 2.1,\n        'min_lane_change_distance': 2.31  # Dangerous short-distance maneuver\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure tailgating behaviors\n    adversaries[0].behavior.update({\n        'safety_distance': 0.52,\n        'aggressiveness': 1.8,\n        'min_gap': 0.52\n    })\n    \n    adversaries[1].behavior.update({\n        'safety_distance': 0.86,\n        'aggressiveness': 1.6,\n        'min_gap': 0.86\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.9,\n        'lateral_acceleration': 2.8,  # Aggressive steering\n        'min_lane_change_distance': 1.15  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 speeding behavior\n    adversaries[1].policy_params.update({\n        'speed_deviation': 13.53,\n        'a': 4.0,  # High acceleration capability\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.45  # ~20 vehicles in simulation radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 1.88  # Dangerous gap acceptance\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 5.44,\n        'a': 2.5,  # High acceleration\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in 100m radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 left lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.6,\n        'lateral_acceleration': 2.2,\n        'min_lane_change_distance': 4.9  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 right lane change parameters\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.4,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 4.4  # Risky maneuver\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.37,\n        'aggressiveness': 1.8,\n        'min_gap': 1.37  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 sudden braking parameters\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.594,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.57,\n        'aggressiveness': 2.0,  # High aggression factor\n        'min_gap': 0.57  # Maintain critical distance\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 10.33,\n        'a': 3.5,  # High acceleration capability\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.34  # Unsafe gap\n    })\n    \n    # Adversary 2 braking parameters\n    adversaries[1].policy_params.update({\n        'reaction_time': 2.844,\n        'deceleration': 6.5,\n        'a': 0.0  # No acceleration intent\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in 100m radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 6.2,\n        'a': 2.8,  # Moderate acceleration\n        'delta': 4  # Standard speed adaptation\n    })\n    \n    # Adversary 2 braking parameters\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.57,\n        'deceleration': 6.5,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.59,\n        'aggressiveness': 1.9,  # High aggression factor\n        'min_gap': 0.59  # Maintain unsafe proximity\n    })\n    \n    # Adversary 2 speeding parameters\n    adversaries[1].policy_params.update({\n        'speed_deviation': 7.88,\n        'a': 2.8,  # Strong acceleration capability\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 10.704,\n        'a': 3.2,  # High acceleration\n        'delta': 4  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].behavior.update({\n        'lane_change_urgency': 1.5,\n        'min_lane_change_distance': 3.2,  # Unsafe gap acceptance\n        'lateral_acceleration': 2.0  # Aggressive steering\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.982,\n        'deceleration': 8.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.2,\n        'min_lane_change_distance': 4.7  # Unsafe gap acceptance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.2,\n        'aggressiveness': 1.6,\n        'min_gap': 1.2  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 2.2  # Unsafe gap acceptance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 4.2  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 sudden braking parameters\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.117,\n        'deceleration': 6.5,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.65  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 7.98,\n        'a': 2.8,  # Moderate acceleration\n        'delta': 4  # Standard speed adaptation\n    })\n    \n    # Adversary 2 emergency braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 2.10,\n        'deceleration': 6.5,  # Hard braking\n        'a': 0.0  # No acceleration intent\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.45  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 0.9,\n        'aggressiveness': 1.7,\n        'min_gap': 0.9  # Maintain unsafe distance\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.5  # Insufficient gap\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.4  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Configure asymmetric braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 1.296,\n        'deceleration': 7.0,  # Right-side braking intensity\n        'a': 0.0  # Zero acceleration\n    })\n    \n    adversaries[1].policy_params.update({\n        'reaction_time': 1.063,\n        'deceleration': 8.5,  # Stronger rear braking\n        'a': 0.0\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.483,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].behavior.update({\n        'lane_change_urgency': 1.5,\n        'min_lane_change_distance': 2.34,  # Unsafe gap acceptance\n        'lateral_acceleration': 2.0  # Aggressive steering\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 14.48,\n        'a': 4.0,  # High acceleration capability\n        'delta': 6  # Aggressive speed adaptation\n    })\n    \n    # Adversary 2 unsafe lane change\n    adversaries[1].behavior.update({\n        'lane_change_urgency': 2.0,\n        'min_lane_change_distance': 1.46,  # Dangerous gap acceptance\n        'lateral_acceleration': 3.0  # Sharp steering\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in 100m radius",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 speeding parameters\n    adversaries[0].policy_params.update({\n        'speed_deviation': 6.284,\n        'a': 2.8,  # Aggressive acceleration\n        'delta': 4  # High speed adaptation\n    })\n    \n    # Adversary 2 tailgating behavior\n    adversaries[1].behavior.update({\n        'safety_distance': 1.3,\n        'aggressiveness': 1.6,\n        'min_gap': 1.3  # Maintain unsafe distance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,  # Aggressive steering\n        'min_lane_change_distance': 1.3  # Unsafe gap acceptance\n    })\n    \n    # Adversary 2 tailgating parameters\n    adversaries[1].behavior.update({\n        'safety_distance': 1.05,\n        'aggressiveness': 1.6,\n        'min_gap': 1.05  # Maintain dangerous distance\n    })\n    \n    # Set medium traffic density\n    road.vehicle_density = 0.35  # ~20 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 tailgating parameters\n    adversaries[0].behavior.update({\n        'safety_distance': 1.05,\n        'aggressiveness': 1.6,\n        'min_gap': 1.05  # Maintain critical distance\n    })\n    \n    # Adversary 2 sudden braking\n    adversaries[1].policy_params.update({\n        'reaction_time': 1.22,\n        'deceleration': 7.0,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 sudden braking parameters\n    adversaries[0].policy_params.update({\n        'reaction_time': 2.32,\n        'deceleration': 7.5,  # Emergency braking\n        'a': 0.0  # Zero acceleration intent\n    })\n    \n    # Adversary 2 lane change behavior\n    adversaries[1].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 2.2  # Unsafe gap acceptance\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Full braking\n    \n    # Adversary 1 unsafe lane change parameters\n    adversaries[0].policy_params.update({\n        'lane_change_urgency': 1.5,\n        'lateral_acceleration': 2.0,\n        'min_lane_change_distance': 3.5  # Critical gap acceptance\n    })\n    \n    # Adversary 2 tailgating behavior\n    adversaries[1].behavior.update({\n        'safety_distance': 1.46,\n        'aggressiveness': 1.6,\n        'min_gap': 1.46  # Maintain dangerous proximity\n    })\n    \n    # Set high traffic density\n    road.vehicle_density = 0.85  # ~50 vehicles in simulation area",
    "from NGSIM_env.vehicle.controller import ControlledVehicle\n\ndef configure_behavior(ego, adversaries):\n    # Ego emergency braking profile\n    ego.target_speed = 0\n    ego.braking_intensity = 1.0  # Maximum deceleration\n    \n    # Configure speeding parameters for both adversaries\n    adversaries[0].policy_params.update({\n        'speed_deviation': 10.93,\n        'a': 3.5,  # High acceleration capability\n        'delta': 5  # Aggressive speed adaptation\n    })\n    \n    adversaries[1].policy_params.update({\n        'speed_deviation': 8.27,\n        'a': 2.8,  # Moderate acceleration\n        'delta': 4  # Standard speed adaptation\n    })\n    \n    # Set low traffic density\n    road.vehicle_density = 0.15  # ~5 vehicles in simulation area"
  ]
}