{
  "geometry": [
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load OSM map structure (real-world intersection)  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_100.json]\")  \n\n# Ego vehicle initial state (position and heading inferred from dataset)  \nego_initial_pose = (x=152.3, y=45.8, heading=1.57)  # Approx. 90 degrees (facing north)",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load OSM map structure from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_101.json]\")  \n\n# Ego vehicle initial state (position and heading from dataset)  \nego_initial_pose = (x=185.6, y=32.4, heading=0.78)  # Approx. 45 degrees (NE direction)",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_102.json]\")  \n\n# Ego initial pose (intersection approach in fast lane)  \nego_initial_pose = (x=210.4, y=28.7, heading=0.52)  # ~30deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_104.json]\")  \n\n# Ego initial pose (approaching intersection in special lane)  \nego_initial_pose = (x=198.2, y=37.5, heading=0.92)  # ~53deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_106.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=172.8, y=41.3, heading=0.87)  # ~50deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_109.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=205.7, y=35.2, heading=0.65)  # ~37deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_115.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=187.6, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_131.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=218.6, y=29.4, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_133.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=167.4, y=38.9, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_134.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=167.4, y=38.9, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_146.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=192.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_147.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=218.4, y=29.6, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_157.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=192.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_17.json]\")  \n\n# Ego initial pose (fast lane approach to intersection)  \nego_initial_pose = (x=187.3, y=39.6, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_18.json]\")  \n\n# Ego initial pose (normal lane following)  \nego_initial_pose = (x=167.4, y=38.9, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_23.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=168.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry with temporary controls  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_27.json]\")  \n\n# Ego initial pose (intersection approach)  \nego_initial_pose = (x=187.4, y=42.6, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_28.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=165.2, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry with special lane from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_29.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=182.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_3.json]\")  \n\n# Ego initial pose (intersection approach)  \nego_initial_pose = (x=167.4, y=38.9, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry with special lane from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_33.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=187.3, y=42.6, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_37.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=168.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_45.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=165.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_48.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=168.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_59.json]\")  \n\n# Ego initial pose (intersection approach)  \nego_initial_pose = (x=167.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_6.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=168.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_63.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=187.4, y=42.6, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_66.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=182.4, y=38.6, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_67.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=168.4, y=38.9, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_71.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=168.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_73.json]\")  \n\n# Ego initial pose (intersection approach)  \nego_initial_pose = (x=168.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_8.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=187.3, y=42.6, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_80.json]\")  \n\n# Ego initial pose (intersection approach in normal lane)  \nego_initial_pose = (x=168.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_83.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=167.5, y=38.2, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection geometry from real-world dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_91.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=192.4, y=38.6, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_92.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=168.4, y=38.7, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_95.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=188.6, y=38.4, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_000_trajectory_set_98.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=192.6, y=38.4, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load controlled intersection geometry from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_1.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=182.4, y=38.7, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_10.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=228.6, y=42.1, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_13.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=187.6, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_15.json]\")  \n\n# Ego initial pose (fast lane approach)  \nego_initial_pose = (x=187.3, y=42.6, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_19.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=187.6, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_21.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=187.6, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_23.json]\")  \n\n# Ego initial pose (intersection approach in normal lane)  \nego_initial_pose = (x=187.3, y=42.6, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load controlled intersection geometry from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_25.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=167.4, y=38.2, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary controls from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_27.json]\")  \n\n# Ego initial pose (slow lane approach)  \nego_initial_pose = (x=187.4, y=42.6, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_30.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=182.4, y=38.6, heading=0.85)  # ~49deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_4.json]\")  \n\n# Ego initial pose (special lane approach)  \nego_initial_pose = (x=187.6, y=42.3, heading=0.82)  # ~47deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_8.json]\")  \n\n# Ego initial pose (fast lane approach to intersection)  \nego_initial_pose = (x=182.4, y=38.6, heading=0.72)  # ~41deg NE heading",
    "from NGSIM_env.road.road import Road, RoadNetwork  \nfrom NGSIM_env.road.lane import LineType, StraightLane  \n\n# Load intersection with temporary closure from real dataset  \nroad_network = RoadNetwork.from_osm(\"[vehicle_tracks_001_trajectory_set_9.json]\")  \n\n# Ego initial pose (intersection approach)  \nego_initial_pose = (x=182.4, y=38.6, heading=0.72)  # ~41deg NE heading"
  ],
  "spawn": [
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # m/s (matching dataset)  \n)  \n\n# Lead vehicle (front)  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0], ego_initial_pose[1] + 5.0),  # 5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  # slightly faster  \n)  \n\n# Adversarial vehicles  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.5, ego_initial_pose[1] - 0.58),  # right + tailgating  \n    heading=ego_initial_pose[2],  \n    target_speed=8.2  \n)  \n\nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.5, ego_initial_pose[1] - 1.16),  # left + tailgating  \n    heading=ego_initial_pose[2],  \n    target_speed=8.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  # m/s (slow lane speed)  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 8.2, ego_initial_pose[1] + 6.3),  # 10m ahead diagonally\n    heading=ego_initial_pose[2],  \n    target_speed=7.0  \n)  \n\n# Adversarial vehicles  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 4.12, ego_initial_pose[1] - 1.2),  # right offset\n    heading=ego_initial_pose[2] + 0.2,  # angled for lane change\n    target_speed=8.0  \n)  \n\nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] + 0.8),  # left offset\n    heading=ego_initial_pose[2],  \n    target_speed=20.4  # speeding profile (6.5 + 13.94)\n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=12.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 8.9),  # 17m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=11.5  \n)  \n\n# Adversary 1: Speeding rear vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 5.8, ego_initial_pose[1] - 3.4),  # 6.7m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=20.744  # ego_speed + 8.744  \n)  \n\n# Adversary 2: Unsafe lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.3, ego_initial_pose[1] + 1.2),  # 2.3m front-right  \n    heading=ego_initial_pose[2] + 0.35,  # Rightward angle  \n    target_speed=13.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # Special lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.5, ego_initial_pose[1] + 7.8),  # 13m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)  \n\n# Adversary 1: Left-side speeder  \nadv_vehicle_left1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.5, ego_initial_pose[1] + 0.8),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=14.688  # ego_speed + 6.688  \n)  \n\n# Adversary 2: Aggressive left-side speeder  \nadv_vehicle_left2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 4.2, ego_initial_pose[1] + 1.5),  # Left-rear  \n    heading=ego_initial_pose[2],  \n    target_speed=20.471  # ego_speed + 12.471  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 12.3, ego_initial_pose[1] + 8.1),  # 14.6m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Unsafe lane changer (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.1, ego_initial_pose[1] - 3.5),  # 4.1m right offset  \n    heading=ego_initial_pose[2] - 0.25,  # Leftward angle  \n    target_speed=9.2  \n)  \n\n# Adversary 2: Tailgating vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 0.8, ego_initial_pose[1] - 0.9),  # 1.17m rear offset  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  # Fast lane speed  \n)  \n\n# Lead vehicle (sudden brake adversary)  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 12.8, ego_initial_pose[1] + 7.5),  # 14.7m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  \n)  \n\n# Adversary: Unsafe lane changer (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 3.2, ego_initial_pose[1] - 2.4),  # 4.1m right offset  \n    heading=ego_initial_pose[2] - 0.3,  # Leftward angle  \n    target_speed=11.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.5  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.3),  # 12.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  \n)  \n\n# Adversary 1: Unsafe lane changer (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.8, ego_initial_pose[1] - 3.1),  # 4.1m right offset  \n    heading=ego_initial_pose[2] - 0.2,  # Leftward angle  \n    target_speed=7.2  \n)  \n\n# Adversary 2: Tailgating vehicle  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 0.5, ego_initial_pose[1] + 0.3),  # 0.55m front offset  \n    heading=ego_initial_pose[2],  \n    target_speed=5.8  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 14.2, ego_initial_pose[1] + 9.1),  # 16.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 1: Right-side lane changer  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.25, ego_initial_pose[1] - 1.8),  # Right offset  \n    heading=ego_initial_pose[2] - 0.22,  # Leftward angle  \n    target_speed=12.0  \n)  \n\n# Adversary 2: Front lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.06, ego_initial_pose[1] + 0.5),  # Front offset  \n    heading=ego_initial_pose[2] + 0.18,  # Rightward angle  \n    target_speed=11.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.8  # Slow lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 7.5, ego_initial_pose[1] + 5.2),  # 9.1m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  \n)  \n\n# Adversary 1: Right-side tailgater  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 0.8, ego_initial_pose[1] - 1.1),  # 1.39m right-rear  \n    heading=ego_initial_pose[2],  \n    target_speed=6.2  \n)  \n\n# Adversary 2: Unsafe lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 3.2, ego_initial_pose[1] + 2.1),  # 3.92m front-left  \n    heading=ego_initial_pose[2] + 0.3,  # Rightward angle  \n    target_speed=7.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.8  # Slow lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 7.5, ego_initial_pose[1] + 5.2),  # 9.1m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  \n)  \n\n# Adversary 1: Unsafe lane changer (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.8, ego_initial_pose[1] - 1.4),  # 2.22m rear-right  \n    heading=ego_initial_pose[2] - 0.15,  # Rightward angle  \n    target_speed=7.2  \n)  \n\n# Adversary 2: Tailgating vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 0.7, ego_initial_pose[1] - 0.5),  # 0.89m rear  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle (sudden brake adversary)  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.1),  # 12.3m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary: Unsafe lane changer (right-side)  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.6, ego_initial_pose[1] - 0.3),  # 1.6m rear-right offset  \n    heading=ego_initial_pose[2] + 0.2,  # Rightward angle  \n    target_speed=8.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 9.8),  # 18m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=9.5  \n)  \n\n# Adversary 1: Right-side tailgater  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 0.62, ego_initial_pose[1] - 0.63),  # 0.89m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 2: Speeding rear vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.1, ego_initial_pose[1] - 1.8),  # 2.8m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=19.55  # ego_speed + 9.55  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.8  # Fast lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 14.2, ego_initial_pose[1] + 9.1),  # 16.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  \n)  \n\n# Adversary 1: Unsafe lane changer (left-side)  \nadv_vehicle_left1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.54, ego_initial_pose[1] + 0.3),  # Left offset  \n    heading=ego_initial_pose[2] + 0.25,  # Rightward angle  \n    target_speed=12.5  \n)  \n\n# Adversary 2: Tailgating vehicle (left-side)  \nadv_vehicle_left2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 0.95, ego_initial_pose[1] - 0.2),  # Close follow  \n    heading=ego_initial_pose[2],  \n    target_speed=11.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  # Fast lane cruising speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.1, ego_initial_pose[1] + 9.3),  # 17.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 1: Right-side sudden brake vehicle  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.8, ego_initial_pose[1] - 1.7),  # 3.3m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=10.8  \n)  \n\n# Adversary 2: Rear lane-changing vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.4, ego_initial_pose[1] - 0.9),  # 3.5m rear offset  \n    heading=ego_initial_pose[2] + 0.15,  # Rightward angle  \n    target_speed=12.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  # Normal lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.3),  # 12.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Left-side tailgater  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.5, ego_initial_pose[1] - 0.9),  # 1.21m left-rear  \n    heading=ego_initial_pose[2],  \n    target_speed=8.2  \n)  \n\n# Adversary 2: Right-side sudden braker  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.1, ego_initial_pose[1] - 1.8),  # 2.8m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.0  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 9.5, ego_initial_pose[1] + 6.8),  # 11.7m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=5.5  \n)  \n\n# Adversary 1: Speeding front vehicle  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 10.6),  # 18.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=12.373  # ego_speed + 7.373  \n)  \n\n# Adversary 2: Unsafe lane changer (rear-right)  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.1, ego_initial_pose[1] - 0.7),  # 1.3m rear-right  \n    heading=ego_initial_pose[2] + 0.3,  # Rightward angle  \n    target_speed=6.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (following mode)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # Baseline speed  \n)  \n\n# Lead vehicle (front adversary)  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 9.8),  # 18m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=20.556  # ego_speed + 12.556  \n)  \n\n# Rear adversary  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 7.5, ego_initial_pose[1] - 4.3),  # 8.7m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=18.035  # ego_speed + 10.035  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.0  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 7.5, ego_initial_pose[1] + 5.8),  # 9.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=5.5  \n)  \n\n# Adversary 1: Front tailgater  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 0.59, ego_initial_pose[1] + 0.45),  # 0.59m front gap  \n    heading=ego_initial_pose[2],  \n    target_speed=5.0  \n)  \n\n# Adversary 2: Left-side speeder  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.8, ego_initial_pose[1] + 0.6),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=19.249  # ego_speed + 14.249  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 11.2, ego_initial_pose[1] + 7.8),  # 13.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Unsafe right lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 4.12, ego_initial_pose[1] - 4.81),  # 4.8m right-front offset  \n    heading=ego_initial_pose[2] - 0.25,  # Leftward angle  \n    target_speed=8.5  \n)  \n\n# Adversary 2: Left-side tailgater  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 0.5, ego_initial_pose[1] + 0.35),  # 0.61m left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=8.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # Normal lane speed  \n)  \n\n# Lead vehicle (front)  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.5),  # 12.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)  \n\n# Adversary 1: Tailgating front vehicle  \nadv_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 0.75, ego_initial_pose[1] + 0.1),  # 0.75m front gap  \n    heading=ego_initial_pose[2],  \n    target_speed=8.1  \n)  \n\n# Adversary 2: Speeding left vehicle  \nadv_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.8, ego_initial_pose[1] + 0.5),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=16.725  # ego_speed + 8.725  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.5),  # 12.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)  \n\n# Adversary 1: Speeding rear vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 5.2, ego_initial_pose[1] - 3.8),  # 6.3m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=22.214  # ego_speed + 14.214  \n)  \n\n# Adversary 2: Sudden brake vehicle (left)  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.1, ego_initial_pose[1] + 1.5),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=9.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 9.5, ego_initial_pose[1] + 6.8),  # 11.7m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  \n)  \n\n# Adversary 1: Speeding front vehicle  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 10.9),  # 18.6m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=16.146  # ego_speed + 10.146  \n)  \n\n# Adversary 2: Sudden brake rear vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.2, ego_initial_pose[1] - 2.1),  # 3.8m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.5),  # 12.6m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary 1: Unsafe lane changer (front)  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.023, ego_initial_pose[1] + 0.5),  # 1.023m front offset  \n    heading=ego_initial_pose[2] + 0.15,  # Leftward angle  \n    target_speed=8.0  \n)  \n\n# Adversary 2: Sudden brake vehicle (left)  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.8, ego_initial_pose[1] + 0.3),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  # Slow lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 9.5, ego_initial_pose[1] + 6.8),  # 11.7m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  \n)  \n\n# Adversary 1: Right-side sudden brake  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.8, ego_initial_pose[1] - 2.1),  # 2.7m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=6.2  \n)  \n\n# Adversary 2: Left-side sudden brake  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.5, ego_initial_pose[1] + 1.2),  # 1.9m left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=6.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # Normal lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.5),  # 12.6m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)  \n\n# Adversary 1: Right-side speeder  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.1, ego_initial_pose[1] - 1.8),  # Right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=15.175  # ego_speed + 7.175 \n)  \n\n# Adversary 2: Unsafe lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 3.025, ego_initial_pose[1] + 0.5),  # Front offset  \n    heading=ego_initial_pose[2] - 0.35,  # Leftward angle  \n    target_speed=9.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane compliant)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.8  # Regulatory speed for special lane  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 11.2, ego_initial_pose[1] + 7.3),  # 13.2m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  \n)  \n\n# Adversary 1: Tailgating rear vehicle  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 0.88, ego_initial_pose[1] - 0.15),  # 0.88m rear offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary 2: Left-side sudden brake vehicle  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.1, ego_initial_pose[1] + 1.8),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 9.8),  # 18m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 1: Sudden brake vehicle (rear)  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.3, ego_initial_pose[1] - 1.4),  # 2.7m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=11.5  \n)  \n\n# Adversary 2: Tailgating vehicle (left)  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.8, ego_initial_pose[1] + 0.57),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=11.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle (front adversary)  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 14.2, ego_initial_pose[1] + 9.1),  # 16.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary 1: Left-side sudden brake  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.8, ego_initial_pose[1] + 1.2),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.2  \n)  \n\n# Adversary 2: Front sudden brake (same as lead vehicle)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  # Slow lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.3),  # 12.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  \n)  \n\n# Adversary 1: Left-side sudden brake  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.8, ego_initial_pose[1] + 1.1),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  \n)  \n\n# Adversary 2: Front speeding vehicle  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.7, ego_initial_pose[1] + 9.2),  # 18.3m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=18.058  # base_speed + 12.058  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.8, ego_initial_pose[1] + 7.2),  # 13m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary 1: Unsafe lane changer (rear-right)  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.46, ego_initial_pose[1] - 0.3),  # 1.46m rear-right  \n    heading=ego_initial_pose[2] - 0.2,  # Rightward angle  \n    target_speed=8.2  \n)  \n\n# Adversary 2: Tailgating vehicle (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 0.5, ego_initial_pose[1] - 1.12),  # 1.12m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  # Normal lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 9.5, ego_initial_pose[1] + 6.8),  # 11.7m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Left-side sudden brake  \nadv_vehicle_left1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.8, ego_initial_pose[1] + 0.6),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.9  \n)  \n\n# Adversary 2: Left-side sudden brake  \nadv_vehicle_left2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] + 1.2),  # Left-rear  \n    heading=ego_initial_pose[2],  \n    target_speed=8.1  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 9.8),  # 18m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=9.5  \n)  \n\n# Adversary 1: Right-side speeder  \nadv_vehicle_right1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.5, ego_initial_pose[1] - 1.8),  # Right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=21.467  # ego_speed + 11.467  \n)  \n\n# Adversary 2: Unsafe lane changer  \nadv_vehicle_right2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.2, ego_initial_pose[1] - 3.4),  # Right-rear  \n    heading=ego_initial_pose[2] + 0.3,  # Rightward angle  \n    target_speed=12.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (normal lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  # Normal lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.5),  # 12.6m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)  \n\n# Adversary 1: Right-side speeder  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.3, ego_initial_pose[1] - 1.8),  # Right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=18.24  # ego_speed + 10.24  \n)  \n\n# Adversary 2: Left-side tailgater  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.5, ego_initial_pose[1] + 0.6),  # Left-rear  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  # Slow lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 7.5, ego_initial_pose[1] + 5.2),  # 9.1m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  \n)  \n\n# Adversary 1: Unsafe lane changer (left-side)  \nadv_vehicle_left1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.4, ego_initial_pose[1] + 3.3),  # 4.83m left offset  \n    heading=ego_initial_pose[2] + 0.25,  # Rightward angle  \n    target_speed=7.2  \n)  \n\n# Adversary 2: Tailgating vehicle  \nadv_vehicle_left2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.0, ego_initial_pose[1] + 1.0),  # 1.45m rear-left  \n    heading=ego_initial_pose[2],  \n    target_speed=6.8  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 14.2, ego_initial_pose[1] + 8.3),  # 16.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=9.5  \n)  \n\n# Adversary 1: Sudden brake vehicle (rear)  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] - 2.1),  # 4.1m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 2: Speeding vehicle (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.8, ego_initial_pose[1] - 3.2),  # 4.3m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=22.051  # ego_speed + 12.051  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 11.5, ego_initial_pose[1] + 7.8),  # 13.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary 1: Close-range lane changer  \nadv_vehicle_rear1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.31, ego_initial_pose[1] - 0.9),  # 1.31m rear-right  \n    heading=ego_initial_pose[2] - 0.15,  # Rightward angle  \n    target_speed=8.2  \n)  \n\n# Adversary 2: Mid-range lane changer  \nadv_vehicle_rear2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.92, ego_initial_pose[1] - 1.2),  # 3.92m rear-right  \n    heading=ego_initial_pose[2] - 0.1,  # Slight rightward angle  \n    target_speed=9.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 14.2, ego_initial_pose[1] + 9.8),  # 17.3m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 1: Left-side unsafe lane changer  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.1, ego_initial_pose[1] + 2.9),  # Left offset 4.37m  \n    heading=ego_initial_pose[2] + 0.3,  # Rightward angle  \n    target_speed=12.0  \n)  \n\n# Adversary 2: Right-side unsafe lane changer  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.5, ego_initial_pose[1] - 2.7),  # Right offset 3.77m  \n    heading=ego_initial_pose[2] - 0.25,  # Leftward angle  \n    target_speed=11.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=9.8  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 11.5, ego_initial_pose[1] + 7.2),  # 13.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  \n)  \n\n# Adversary 1: Left-side tailgater  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.8, ego_initial_pose[1] + 0.5),  # Left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=10.2  \n)  \n\n# Adversary 2: Rear tailgater  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 0.6, ego_initial_pose[1] - 0.3),  # Extreme rear  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=9.8  # Fast lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 6.8),  # 12.3m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  \n)  \n\n# Adversary 1: Right-side lane changer  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.1, ego_initial_pose[1] - 2.2),  # 3.06m right offset  \n    heading=ego_initial_pose[2] - 0.2,  # Leftward angle  \n    target_speed=10.5  \n)  \n\n# Adversary 2: Rear lane changer  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] - 2.4),  # 4.25m rear offset  \n    heading=ego_initial_pose[2] + 0.15,  # Rightward angle  \n    target_speed=11.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  # Fast lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.3, ego_initial_pose[1] + 9.2),  # 17.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 1: Right lane changer (far)  \nadv_vehicle_right1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 4.8, ego_initial_pose[1] - 1.2),  # 4.8m rear-right  \n    heading=ego_initial_pose[2] - 0.15,  # Rightward angle  \n    target_speed=12.0  \n)  \n\n# Adversary 2: Right lane changer (near)  \nadv_vehicle_right2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] - 0.9),  # 3.5m rear-right  \n    heading=ego_initial_pose[2] - 0.2,  # Stronger rightward angle  \n    target_speed=11.8  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 11.5, ego_initial_pose[1] + 7.2),  # 13.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Right-side sudden brake  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.8, ego_initial_pose[1] - 1.5),  # 3.2m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)  \n\n# Adversary 2: Left-side sudden brake  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.1, ego_initial_pose[1] + 0.9),  # 2.3m left offset  \n    heading=ego_initial_pose[2],  \n    target_speed=9.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.8  # Fast lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 15.2, ego_initial_pose[1] + 9.8),  # 18m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=11.0  \n)  \n\n# Adversary 1: Front tailgater  \nadv_vehicle_front1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 5.3, ego_initial_pose[1] + 3.2),  # 6.2m front offset  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 2: Aggressive front tailgater  \nadv_vehicle_front2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 3.8, ego_initial_pose[1] + 2.3),  # 4.5m front offset  \n    heading=ego_initial_pose[2],  \n    target_speed=10.7  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.8  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.1, ego_initial_pose[1] + 7.3),  # 12.4m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  \n)  \n\n# Adversary 1: Rear right lane changer  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.2, ego_initial_pose[1] - 2.8),  # 4.29m rear-right  \n    heading=ego_initial_pose[2] - 0.15,  # Rightward angle  \n    target_speed=7.2  \n)  \n\n# Adversary 2: Front right lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.8, ego_initial_pose[1] - 1.7),  # 2.48m front-right  \n    heading=ego_initial_pose[2] - 0.2,  # Rightward angle  \n    target_speed=6.5  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.3),  # 12.5m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.5  \n)  \n\n# Adversary 1: Unsafe lane changer (front-right)  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.5, ego_initial_pose[1] - 1.8),  # 3.1m right offset  \n    heading=ego_initial_pose[2] - 0.2,  # Rightward angle  \n    target_speed=7.2  \n)  \n\n# Adversary 2: Sudden brake vehicle (rear)  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] - 2.1),  # 4.1m rear offset  \n    heading=ego_initial_pose[2],  \n    target_speed=6.8  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (normal lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  # Normal lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.1),  # 12.3m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Right-side lane changer (far)  \nadv_vehicle_right1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 3.8, ego_initial_pose[1] - 2.3),  # 4.54m right offset  \n    heading=ego_initial_pose[2] - 0.15,  # Leftward angle  \n    target_speed=9.5  \n)  \n\n# Adversary 2: Right-side lane changer (near)  \nadv_vehicle_right2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.1, ego_initial_pose[1] - 0.8),  # 1.39m right offset  \n    heading=ego_initial_pose[2] - 0.25,  # Sharper leftward angle  \n    target_speed=8.7  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.8  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 7.5, ego_initial_pose[1] + 5.2),  # 9.1m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  \n)  \n\n# Adversary 1: Rear lane changer  \nadv_vehicle_rear = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 2.1, ego_initial_pose[1] - 1.8),  # 2.93m rear-left  \n    heading=ego_initial_pose[2] + 0.28,  # Leftward angle  \n    target_speed=6.5  \n)  \n\n# Adversary 2: Front lane changer  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.8, ego_initial_pose[1] + 2.1),  # 3.68m front-left  \n    heading=ego_initial_pose[2] + 0.35,  # Aggressive left angle  \n    target_speed=7.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (slow lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=5.8  # Slow lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 7.5, ego_initial_pose[1] + 5.2),  # 9.2m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=6.0  \n)  \n\n# Adversary 1: Unsafe lane changer (rear-right)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.2, ego_initial_pose[1] - 1.36),  # 1.36m rear-right  \n    heading=ego_initial_pose[2] - 0.15,  # Rightward angle  \n    target_speed=6.5  \n)  \n\n# Adversary 2: Tailgating vehicle (left)  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 1.5, ego_initial_pose[1] + 0.62),  # 0.62m left-rear  \n    heading=ego_initial_pose[2],  \n    target_speed=6.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.1),  # 12.4m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary 1: Unsafe lane changer (front-left)  \nadv_vehicle_front = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 4.23, ego_initial_pose[1] + 0.8),  # 4.23m front offset  \n    heading=ego_initial_pose[2] + 0.3,  # Leftward angle  \n    target_speed=8.0  \n)  \n\n# Adversary 2: Speeding right-side vehicle  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 1.5, ego_initial_pose[1] - 2.1),  # 2.6m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=17.916  # ego_speed + 10.916  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (special lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.0  # Special lane compliant speed  \n)  \n\n# Lead vehicle (front adversary)  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 7.8),  # 12.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=7.5  \n)  \n\n# Adversary vehicle (right-side)  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.5, ego_initial_pose[1] - 1.8),  # 3.1m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=7.2  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (fast lane follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=10.0  # Fast lane cruising speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 14.2, ego_initial_pose[1] + 9.1),  # 16.8m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=10.5  \n)  \n\n# Adversary 1: Right-side speeder  \nadv_vehicle_right = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 2.8, ego_initial_pose[1] - 1.5),  # 3.2m right offset  \n    heading=ego_initial_pose[2],  \n    target_speed=17.696  # ego_speed + 7.696  \n)  \n\n# Adversary 2: Left-side lane changer  \nadv_vehicle_left = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.2, ego_initial_pose[1] + 2.1),  # 3.87m left offset  \n    heading=ego_initial_pose[2] + 0.35,  # Rightward angle  \n    target_speed=11.0  \n)",
    "from NGSIM_env.vehicle.humandriving import HumanLikeVehicle  \n\n# Ego vehicle (follower)  \nego_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=ego_initial_pose[:2],  \n    heading=ego_initial_pose[2],  \n    target_speed=7.8  # Normal lane speed  \n)  \n\n# Lead vehicle  \nlead_vehicle = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] + 10.2, ego_initial_pose[1] + 6.8),  # 12.3m ahead  \n    heading=ego_initial_pose[2],  \n    target_speed=8.0  \n)  \n\n# Adversary 1: Rear sudden brake  \nadv_vehicle_rear1 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 3.5, ego_initial_pose[1] - 2.1),  # 4.1m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=8.2  \n)  \n\n# Adversary 2: Rear sudden brake  \nadv_vehicle_rear2 = HumanLikeVehicle(  \n    road=road_network,  \n    position=(ego_initial_pose[0] - 6.2, ego_initial_pose[1] - 3.8),  # 7.3m behind  \n    heading=ego_initial_pose[2],  \n    target_speed=8.5  \n)"
  ],
  "behavior": [
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows lead vehicle with IDM  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0}  # Aggressive follow  \n)  \n\n# Adversarial vehicles enforce tailgating (fixed distance)  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=8.2,  \n    min_gap=0.58  # Hardcoded tailgating distance  \n)  \n\nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=8.2,  \n    min_gap=1.16  # Hardcoded tailgating distance  \n)  \n\n# Lead vehicle maintains constant speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with conservative IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.5, \"TIME_WANTED\": 2.0}  # Defensive follow\n)  \n\n# Adversary 1: Unsafe lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=8.0,  \n    steering=0.15,  # Leftward steering input\n    min_gap=1.0  \n)  \n\n# Adversary 2: Speeding profile  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=20.4,  # Maintain aggressive speed\n    steering=0.0  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=7.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 3.0, \"TIME_WANTED\": 1.2}  # Aggressive fast-lane  \n)  \n\n# Adversary 1: Speeding behavior  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=20.744,  \n    min_gap=0.1  # Dangerous tailgating  \n)  \n\n# Adversary 2: Lane change maneuver  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=13.0,  \n    steering=0.25,  # Right steering  \n    min_gap=0.5  # Unsafe gap  \n)  \n\n# Lead vehicle maintains speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=11.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 2.2}  # Conservative for special lane  \n)  \n\n# Adversary 1: Moderate speeding  \nadv_vehicle_left1.behavior = lambda: adv_vehicle_left1.control(  \n    target_speed=14.688,  \n    steering=0.0,  \n    min_gap=1.2  \n)  \n\n# Adversary 2: Extreme speeding  \nadv_vehicle_left2.behavior = lambda: adv_vehicle_left2.control(  \n    target_speed=20.471,  \n    steering=0.0,  \n    min_gap=0.8  # Dangerous proximity  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with special lane compliance  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.6, \"TIME_WANTED\": 2.3}  # Conservative parameters  \n)  \n\n# Adversary 1: Unsafe lane change maneuver  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=9.2,  \n    steering=-0.2,  # Left steering input  \n    min_gap=0.7  # Aggressive gap  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=8.5,  \n    min_gap=1.17  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.5, \"TIME_WANTED\": 1.5}  \n)  \n\n# Lead vehicle sudden brake behavior  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.444:  # Reaction time trigger\n        return vehicle.control(target_speed=max(0, vehicle.speed - 8.0))  \n    return vehicle.control(target_speed=10.0)\nlead_vehicle.behavior = lambda: sudden_brake(lead_vehicle)  \n\n# Adversary: Unsafe lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=11.2,  \n    steering=-0.25,  # Left steering input  \n    min_gap=1.5  # Aggressive maneuver  \n)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with slow lane compliance  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=adv_vehicle_front,  # Reacts to tailgater  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Conservative parameters  \n)  \n\n# Adversary 1: Unsafe lane change maneuver  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=7.2,  \n    steering=-0.15,  # Left steering input  \n    min_gap=1.0  # Aggressive gap  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=5.8,  \n    min_gap=0.55  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Responsive follow  \n)  \n\n# Adversary 1: Leftward lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=12.0,  \n    steering=-0.15,  # Left steering  \n    min_gap=1.8  # Aggressive maneuver  \n)  \n\n# Adversary 2: Rightward lane change  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=11.5,  \n    steering=0.12,  # Right steering  \n    min_gap=1.2  # Unsafe gap  \n)  \n\n# Lead vehicle maintains speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with slow-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Conservative driving  \n)  \n\n# Adversary 1: Persistent tailgating  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=6.2,  \n    min_gap=1.39  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Unsafe lane change maneuver  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=7.0,  \n    steering=0.2,  # Right steering input  \n    min_gap=1.8  # Aggressive gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with conservative parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Defensive slow lane  \n)  \n\n# Adversary 1: Unsafe right lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=7.2,  \n    steering=0.18,  # Right steering input  \n    min_gap=2.22  # Fixed unsafe distance  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=6.5,  \n    min_gap=0.89  # Dangerous fixed gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 2.0}  # Conservative settings  \n)  \n\n# Lead vehicle sudden brake behavior  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 1.119:  # Reaction time trigger\n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.5))  \n    return vehicle.control(target_speed=7.5)\nlead_vehicle.behavior = lambda: sudden_brake(lead_vehicle)  \n\n# Adversary: Unsafe right lane change  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=8.2,  \n    steering=0.15,  # Right steering input  \n    min_gap=1.6  # Fixed dangerous distance  \n)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Aggressive fast-lane  \n)  \n\n# Adversary 1: Persistent tailgating  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=10.5,  \n    min_gap=0.89  # Fixed dangerous distance  \n)  \n\n# Adversary 2: High-speed approach  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=19.55,  \n    min_gap=0.5  # Dangerous closing speed  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=9.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Responsive parameters  \n)  \n\n# Adversary 1: Unsafe lane change maneuver  \nadv_vehicle_left1.behavior = lambda: adv_vehicle_left1.control(  \n    target_speed=12.5,  \n    steering=0.2,  # Right steering input  \n    min_gap=1.0  # Aggressive gap  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_left2.behavior = lambda: adv_vehicle_left2.control(  \n    target_speed=11.2,  \n    min_gap=0.95  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=11.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Responsive fast-lane behavior  \n)  \n\n# Adversary 1: Sudden brake after reaction time  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.496:  # Dataset-specified reaction time\n        return vehicle.control(target_speed=max(0, vehicle.speed - 9.0))  \n    return vehicle.control(target_speed=10.8)\nadv_vehicle_right.behavior = lambda: sudden_brake(adv_vehicle_right)  \n\n# Adversary 2: Unsafe right lane change  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=12.0,  \n    steering=0.2,  # Right steering input  \n    min_gap=3.4  # Dataset-specified aggressive distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with standard IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_left,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Persistent tailgating  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=8.2,  \n    min_gap=1.21  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Delayed sudden braking  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.544:  # Trigger after reaction time  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.5))  \n    return vehicle.control(target_speed=7.5)\nadv_vehicle_right.behavior = lambda: sudden_brake(adv_vehicle_right)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with slow lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Conservative for slow lane  \n)  \n\n# Adversary 1: Persistent speeding  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=12.373,  \n    steering=0.0,  \n    min_gap=2.0  \n)  \n\n# Adversary 2: Aggressive lane change  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=6.0,  \n    steering=0.2,  # Right steering input  \n    min_gap=1.263  # Dataset-specified unsafe distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=5.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with standard parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=adv_vehicle_front,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Front adversary maintains aggressive speed  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=20.556,  \n    min_gap=1.5  # Unsafe following distance  \n)  \n\n# Rear adversary enforces dangerous approach  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=18.035,  \n    min_gap=0.8  # Extreme tailgating  \n)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with conservative slow-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  \n)  \n\n# Adversary 1: Persistent tailgating  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=5.0,  \n    min_gap=0.59  # Fixed dangerous distance  \n)  \n\n# Adversary 2: High-speed maintenance  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=19.249,  \n    steering=0.0,  \n    min_gap=1.5  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=5.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.7, \"TIME_WANTED\": 2.1}  # Conservative for special lane  \n)  \n\n# Adversary 1: Unsafe right lane change  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=8.5,  \n    steering=-0.2,  # Left steering input  \n    min_gap=1.0  # Aggressive maneuver  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=8.2,  \n    min_gap=0.61  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with standard IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Persistent tailgating  \nadv_front.behavior = lambda: adv_front.control(  \n    target_speed=8.1,  \n    min_gap=0.75  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Constant speeding  \nadv_left.behavior = lambda: adv_left.control(  \n    target_speed=16.725,  \n    steering=0.0,  \n    min_gap=1.5  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 2.0}  \n)  \n\n# Adversary 1: Persistent speeding  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=22.214,  \n    min_gap=0.5  # Dangerous tailgating  \n)  \n\n# Adversary 2: Sudden brake after reaction time  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.087:  # Trigger after reaction time\n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.0))  \n    return vehicle.control(target_speed=9.0)\nadv_vehicle_left.behavior = lambda: sudden_brake(adv_vehicle_left)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with slow lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Conservative  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.5)  \n\n# Adversary 1: Persistent speeding  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=16.146,  \n    steering=0.0  \n)  \n\n# Adversary 2: Sudden brake trigger  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.047:  # Reaction time trigger  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 8.0))  \n    return vehicle.control(target_speed=7.0)\nadv_vehicle_rear.behavior = lambda: sudden_brake(adv_vehicle_rear)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 2.0}  \n)  \n\n# Adversary 1: Unsafe left lane change  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=8.0,  \n    steering=0.15,  # Left steering  \n    min_gap=1.023  # Exact adversarial distance  \n)  \n\n# Adversary 2: Sudden brake after reaction time  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.112:  # From reaction_time parameter\n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.0))  \n    return vehicle.control(target_speed=7.2)\nadv_vehicle_left.behavior = lambda: sudden_brake(adv_vehicle_left)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=7.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with conservative IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Defensive slow lane  \n)  \n\n# Adversary 1: Right-side sudden brake  \ndef right_brake(vehicle):\n    if vehicle.simulation_time > 2.924:  # Reaction time trigger\n        return vehicle.control(target_speed=max(0, vehicle.speed - 7.5))  \n    return vehicle.control(target_speed=6.2)\nadv_vehicle_right.behavior = lambda: right_brake(adv_vehicle_right)  \n\n# Adversary 2: Left-side sudden brake  \ndef left_brake(vehicle):\n    if vehicle.simulation_time > 1.253:  # Shorter reaction time\n        return vehicle.control(target_speed=max(0, vehicle.speed - 8.0))  \n    return vehicle.control(target_speed=6.2)\nadv_vehicle_left.behavior = lambda: left_brake(adv_vehicle_left)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with normal lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Persistent speeding  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=15.175,  \n    steering=0.0,  \n    min_gap=1.5  \n)  \n\n# Adversary 2: Aggressive lane change  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=9.0,  \n    steering=-0.3,  # Left steering  \n    min_gap=0.8  # Unsafe maneuver  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane compliance parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.4, \"TIME_WANTED\": 2.5}  # Extra conservative  \n)  \n\n# Adversary 1: Persistent tailgating  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=7.5,  \n    min_gap=0.88  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Sudden brake with delayed reaction  \ndef sudden_brake_behavior(vehicle):\n    if vehicle.simulation_time > 1.314:  # Reaction time trigger  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.5))  \n    return vehicle.control(target_speed=8.0)\nadv_vehicle_left.behavior = lambda: sudden_brake_behavior(adv_vehicle_left)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=7.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Aggressive fast-lane  \n)  \n\n# Adversary 1: Sudden brake behavior  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.021:  # Reaction time trigger\n        return vehicle.control(target_speed=max(0, vehicle.speed - 9.0))  \n    return vehicle.control(target_speed=11.5)\nadv_vehicle_rear.behavior = lambda: sudden_brake(adv_vehicle_rear)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=11.2,  \n    min_gap=0.57  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.7, \"TIME_WANTED\": 2.1}  \n)  \n\n# Adversary 1: Left-side sudden brake  \ndef left_brake(vehicle):\n    if vehicle.simulation_time > 2.476:  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 9.0))  \n    return vehicle.control(target_speed=7.2)\nadv_vehicle_left.behavior = lambda: left_brake(adv_vehicle_left)  \n\n# Adversary 2: Front sudden brake  \ndef front_brake(vehicle):\n    if vehicle.simulation_time > 1.056:  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 10.0))  \n    return vehicle.control(target_speed=7.5)\nlead_vehicle.behavior = lambda: front_brake(lead_vehicle)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with conservative IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Defensive slow lane  \n)  \n\n# Adversary 1: Sudden brake behavior  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 1.722:  # Trigger after reaction time  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 8.0))  \n    return vehicle.control(target_speed=7.0)  \nadv_vehicle_left.behavior = lambda: sudden_brake(adv_vehicle_left)  \n\n# Adversary 2: Speeding profile  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=18.058,  # Maintain aggressive speed  \n    steering=0.0  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with special lane compliance  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.5, \"TIME_WANTED\": 2.5}  # Conservative parameters  \n)  \n\n# Adversary 1: Unsafe lane change maneuver  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=8.2,  \n    steering=-0.15,  # Right steering input  \n    min_gap=1.46  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=7.8,  \n    min_gap=1.12  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=7.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with standard IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Sudden brake after 2.11s  \ndef sudden_brake_1(vehicle):\n    if vehicle.simulation_time > 2.111:\n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.5))  \n    return vehicle.control(target_speed=7.9)\nadv_vehicle_left1.behavior = lambda: sudden_brake_1(adv_vehicle_left1)  \n\n# Adversary 2: Sudden brake after 2.12s  \ndef sudden_brake_2(vehicle):\n    if vehicle.simulation_time > 2.119:\n        return vehicle.control(target_speed=max(0, vehicle.speed - 7.0))  \n    return vehicle.control(target_speed=8.1)\nadv_vehicle_left2.behavior = lambda: sudden_brake_2(adv_vehicle_left2)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.5, \"TIME_WANTED\": 1.3}  \n)  \n\n# Adversary 1: Speeding behavior  \nadv_vehicle_right1.behavior = lambda: adv_vehicle_right1.control(  \n    target_speed=21.467,  \n    steering=0.0,  \n    min_gap=2.0  \n)  \n\n# Adversary 2: Unsafe lane change  \nadv_vehicle_right2.behavior = lambda: adv_vehicle_right2.control(  \n    target_speed=12.0,  \n    steering=0.25,  # Right steering input  \n    min_gap=1.0  # Aggressive gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=9.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with standard IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Persistent speeding  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=18.24,  \n    steering=0.0,  \n    min_gap=2.0  \n)  \n\n# Adversary 2: Dangerous tailgating  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=8.0,  \n    min_gap=1.08  # Fixed unsafe distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with slow-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Conservative driving  \n)  \n\n# Adversary 1: Unsafe lane change maneuver  \nadv_vehicle_left1.behavior = lambda: adv_vehicle_left1.control(  \n    target_speed=7.2,  \n    steering=0.2,  # Right steering input  \n    min_gap=1.8  # Aggressive gap  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_left2.behavior = lambda: adv_vehicle_left2.control(  \n    target_speed=6.8,  \n    min_gap=1.45  # Fixed dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.3, \"TIME_WANTED\": 1.4}  \n)  \n\n# Adversary 1: Sudden brake after reaction time  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 1.955:  # Trigger after reaction time\n        return vehicle.control(target_speed=max(0, vehicle.speed - 8.0))  \n    return vehicle.control(target_speed=10.5)\nadv_vehicle_rear.behavior = lambda: sudden_brake(adv_vehicle_rear)  \n\n# Adversary 2: Maintain aggressive speeding  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=22.051,  \n    steering=0.0,  \n    min_gap=1.0  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=9.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with special lane compliance  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.5, \"TIME_WANTED\": 2.5}  # Conservative parameters  \n)  \n\n# Adversary 1: Aggressive right lane change  \nadv_vehicle_rear1.behavior = lambda: adv_vehicle_rear1.control(  \n    target_speed=8.2,  \n    steering=-0.18,  # Right steering input  \n    min_gap=1.0  # Dangerous maneuver  \n)  \n\n# Adversary 2: Progressive right lane change  \nadv_vehicle_rear2.behavior = lambda: adv_vehicle_rear2.control(  \n    target_speed=9.0,  \n    steering=-0.12,  # Moderate right steering  \n    min_gap=1.5  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=7.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Aggressive fast-lane  \n)  \n\n# Adversary 1: Left-side lane change  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=12.0,  \n    steering=0.2,  # Right steering input  \n    min_gap=1.0  # Aggressive gap  \n)  \n\n# Adversary 2: Right-side lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=11.5,  \n    steering=-0.18,  # Left steering input  \n    min_gap=1.2  # Unsafe maneuver  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Responsive follow  \n)  \n\n# Adversary 1: Persistent left-side tailgating  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=10.2,  \n    min_gap=1.32  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Aggressive rear tailgating  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=10.5,  \n    min_gap=0.63  # Extremely dangerous gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.2, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Leftward lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=10.5,  \n    steering=-0.18,  # Left steering  \n    min_gap=1.8  # Aggressive maneuver  \n)  \n\n# Adversary 2: Rightward lane change  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=11.2,  \n    steering=0.12,  # Right steering  \n    min_gap=2.0  # Unsafe gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Aggressive fast-lane  \n)  \n\n# Adversary 1: Gradual right lane change  \nadv_vehicle_right1.behavior = lambda: adv_vehicle_right1.control(  \n    target_speed=12.0,  \n    steering=0.12,  # Right steering  \n    min_gap=1.2  \n)  \n\n# Adversary 2: Aggressive right lane change  \nadv_vehicle_right2.behavior = lambda: adv_vehicle_right2.control(  \n    target_speed=11.8,  \n    steering=0.18,  # Stronger right steering  \n    min_gap=0.9  # Dangerous proximity  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane compliance  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.7, \"TIME_WANTED\": 2.1}  \n)  \n\n# Right adversary sudden brake behavior  \ndef right_brake(vehicle):\n    if vehicle.simulation_time > 2.212:  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 7.5))  \n    return vehicle.control(target_speed=8.5)\nadv_vehicle_right.behavior = lambda: right_brake(adv_vehicle_right)  \n\n# Left adversary sudden brake behavior  \ndef left_brake(vehicle):\n    if vehicle.simulation_time > 1.597:  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 9.0))  \n    return vehicle.control(target_speed=9.0)\nadv_vehicle_left.behavior = lambda: left_brake(adv_vehicle_left)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Responsive parameters  \n)  \n\n# Adversary 1: Fixed-distance tailgating  \nadv_vehicle_front1.behavior = lambda: adv_vehicle_front1.control(  \n    target_speed=10.5,  \n    min_gap=1.05  # Hardcoded dangerous distance  \n)  \n\n# Adversary 2: Aggressive tailgating  \nadv_vehicle_front2.behavior = lambda: adv_vehicle_front2.control(  \n    target_speed=10.7,  \n    min_gap=0.80  # Extremely dangerous distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=11.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with conservative parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  \n)  \n\n# Adversary 1: Right lane change from rear  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=7.2,  \n    steering=-0.18,  # Right steering input  \n    min_gap=1.3  \n)  \n\n# Adversary 2: Right lane change from front  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=6.5,  \n    steering=-0.22,  # Right steering input  \n    min_gap=0.9  # Aggressive gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with conservative parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  \n)  \n\n# Adversary 1: Unsafe lane change maneuver  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=7.2,  \n    steering=0.15,  # Right steering input  \n    min_gap=1.8  # Aggressive gap  \n)  \n\n# Adversary 2: Sudden brake after reaction time  \ndef sudden_brake(vehicle):\n    if vehicle.simulation_time > 2.786:  # From dataset\n        return vehicle.control(target_speed=max(0, vehicle.speed - 7.5))  \n    return vehicle.control(target_speed=6.8)\nadv_vehicle_rear.behavior = lambda: sudden_brake(adv_vehicle_rear)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with normal lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.0, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1: Gradual unsafe lane change  \nadv_vehicle_right1.behavior = lambda: adv_vehicle_right1.control(  \n    target_speed=9.5,  \n    steering=-0.12,  # Left steering input  \n    min_gap=1.8  # Moderate aggression  \n)  \n\n# Adversary 2: Aggressive unsafe lane change  \nadv_vehicle_right2.behavior = lambda: adv_vehicle_right2.control(  \n    target_speed=8.7,  \n    steering=-0.2,  # Stronger left steering  \n    min_gap=0.9  # Dangerous proximity  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with slow lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  # Conservative driving  \n)  \n\n# Adversary 1: Left lane change maneuver  \nadv_vehicle_rear.behavior = lambda: adv_vehicle_rear.control(  \n    target_speed=6.5,  \n    steering=0.18,  # Left steering  \n    min_gap=1.5  # Aggressive gap  \n)  \n\n# Adversary 2: Aggressive left lane change  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=7.2,  \n    steering=0.25,  # Strong left steering  \n    min_gap=1.2  # Dangerous proximity  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with conservative parameters for slow lane  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.2, \"TIME_WANTED\": 2.5}  \n)  \n\n# Adversary 1: Unsafe right lane change  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=6.5,  \n    steering=0.18,  # Right steering input  \n    min_gap=1.36  # Fixed dangerous distance  \n)  \n\n# Adversary 2: Persistent tailgating  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=6.2,  \n    min_gap=0.62  # Hardcoded tailgating distance  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=6.0)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with special lane compliance  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 2.4}  # Conservative parameters  \n)  \n\n# Adversary 1: Unsafe left lane change  \nadv_vehicle_front.behavior = lambda: adv_vehicle_front.control(  \n    target_speed=8.0,  \n    steering=0.25,  # Left steering input  \n    min_gap=1.0  # Aggressive maneuver  \n)  \n\n# Adversary 2: Persistent speeding  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=17.916,  # Maintain high speed  \n    steering=0.0,  \n    min_gap=1.5  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=7.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with special lane parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 2.0}  \n)  \n\n# Front adversary sudden brake behavior  \ndef front_brake(vehicle):\n    if vehicle.simulation_time > 1.4706:  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.0))  \n    return vehicle.control(target_speed=7.5)\nlead_vehicle.behavior = lambda: front_brake(lead_vehicle)  \n\n# Right adversary delayed sudden brake  \ndef right_brake(vehicle):\n    if vehicle.simulation_time > 2.4104:  \n        return vehicle.control(target_speed=max(0, vehicle.speed - 5.5))  \n    return vehicle.control(target_speed=7.2)\nadv_vehicle_right.behavior = lambda: right_brake(adv_vehicle_right)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \n\n# Ego follows with fast-lane IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=None,  \n    accel_params={\"COMFORT_ACC_MAX\": 2.8, \"TIME_WANTED\": 1.3}  # Responsive fast-lane  \n)  \n\n# Adversary 1: Persistent speeding  \nadv_vehicle_right.behavior = lambda: adv_vehicle_right.control(  \n    target_speed=17.696,  \n    steering=0.0,  \n    min_gap=1.5  # Moderate following distance  \n)  \n\n# Adversary 2: Aggressive lane change  \nadv_vehicle_left.behavior = lambda: adv_vehicle_left.control(  \n    target_speed=11.0,  \n    steering=0.3,  # Right steering input  \n    min_gap=0.8  # Unsafe maneuver gap  \n)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=10.5)",
    "from NGSIM_env.vehicle.behavior import IDMVehicle  \nimport numpy as np  \n\n# Ego follows with normal IDM parameters  \nego_vehicle.behavior = IDMVehicle(  \n    ego_vehicle,  \n    front_vehicle=lead_vehicle,  \n    rear_vehicle=adv_vehicle_rear1,  \n    accel_params={\"COMFORT_ACC_MAX\": 1.8, \"TIME_WANTED\": 1.8}  \n)  \n\n# Adversary 1 sudden brake behavior  \ndef sudden_brake_1(vehicle):\n    if vehicle.simulation_time > 1.449:  # Reaction time trigger\n        return vehicle.control(target_speed=max(0, vehicle.speed - 7.5))  \n    return vehicle.control(target_speed=8.2)\nadv_vehicle_rear1.behavior = lambda: sudden_brake_1(adv_vehicle_rear1)  \n\n# Adversary 2 sudden brake behavior  \ndef sudden_brake_2(vehicle):\n    if vehicle.simulation_time > 2.041:  # Reaction time trigger\n        return vehicle.control(target_speed=max(0, vehicle.speed - 6.8))  \n    return vehicle.control(target_speed=8.5)\nadv_vehicle_rear2.behavior = lambda: sudden_brake_2(adv_vehicle_rear2)  \n\n# Lead vehicle maintains steady speed  \nlead_vehicle.behavior = lambda: lead_vehicle.control(target_speed=8.0)"
  ]
}