{
  "geometry": [
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # Main orthogonal roads\n    axis_1 = [[0, 0], [100, 0]]\n    axis_2 = [[0, -50], [0, 50]]\n    \n    # East-West lanes\n    net.add_lane(\"EW\", \"right\", StraightLane(axis_1, width=3.5, line_types=(LineType.CONTINUOUS, LineType.STRIPED)))\n    net.add_lane(\"EW\", \"left\", StraightLane(axis_1[::-1], width=3.5, line_types=(LineType.STRIPED, LineType.CONTINUOUS)))\n    \n    # North-South lanes (closed section)\n    closed_lane = StraightLane(axis_2, width=3.5, line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    closed_lane.isClosed = True\n    net.add_lane(\"NS\", \"up\", closed_lane)\n    \n    # Closure barriers\n    net.add_object(RoadObject(type='barrier', position=[0, 25], heading=0))\n    return Road(network=net, np_random=RandomState(seed=1))",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West arterial (fast lane)\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South crossroad\n    ns_lane = StraightLane([-50, -15], [-50, 15], line_types=(LineType.CONTINUOUS, LineType.NONE))\n    network.add_lane(\"north\", \"south\", ns_lane)\n\n    # Temporary control elements\n    road = RegulatedRoad(network)\n    road.register_object(RoadObject(type=ConstructionBarrier, position=[-5, -3]))\n    road.register_object(RoadObject(type=TrafficLight, position=[10, 0], state=RegulatedRoad.SignalPhase.TRANSITION))\n    \n    return road",
    "from highway_env.road.lane import StraightLane, LineType\nfrom highway_env.road.road import RoadNetwork, RegulatedRoad\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # East-West arterial (fast lanes)\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.STRIPED, LineType.STRIPED))\n    net.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South cross street\n    ns_lane = StraightLane([-50, -5], [-50, 55], line_types=(LineType.NONE, LineType.STRIPED)) \n    net.add_lane(\"north\", \"south\", ns_lane)\n    \n    # Closure markers\n    closure_zone = RoadObject(\"construction\", width=8, length=12)\n    closure_zone.pos = Vector(0, 0)\n    \n    return RegulatedRoad(network=net, road_objects=[closure_zone])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # Main straight lanes (fast type)\n    center_line = [0, 0]\n    lane_width = 3.5\n    main_lane = StraightLane(center_line, [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=lane_width)\n    net.add_lane(\"north\", \"south\", main_lane)\n    \n    # Intersection closure simulation\n    closure_start = 50\n    closure_length = 20\n    closure_barrier = RoadObject(\"closure_barrier\", \n                                [closure_start, -lane_width/2], \n                                [closure_start + closure_length, -lane_width/2])\n    net.add_object(closure_barrier)\n    \n    return RegulatedRoad(network=net, \n                        regulatory_elements=[\"priority_rule\", \"closure_sign\"])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # East-West arterial\n    ew_lane = StraightLane([0, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=5)\n    # North-South cross\n    ns_lane = StraightLane([75, -75], [75, 75], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=5)\n    \n    net.add_lane(\"east\", \"west\", ew_lane)\n    net.add_lane(\"south\", \"north\", ns_lane)\n    \n    # Temporary control elements\n    construction_zone = RoadObject(road=net, position=[70, 0], heading=0, type=\"construction_barrel\")\n    return RegulatedRoad(network=net, road_objects=[construction_zone], traffic_signal=None)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4)\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South crossing lanes\n    ns_lane = StraightLane([-100, -15], [-100, 15], line_types=(LineType.CONTINUOUS, LineType.NONE))\n    network.add_lane(\"north\", \"south\", ns_lane)\n    \n    # Temporary traffic lights\n    signal = TrafficLight(position=Vector(0, 0), phase_pattern=[(30, \"red\"), (5, \"green\")])\n    \n    return RegulatedRoad(network, traffic_lights=[signal])",
    "from highway_env.road.lane import StraightLane, LineType\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # Main orthogonal axes\n    axis1 = [StraightLane([0, -50], [0, 50], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5, speed_limit=30)]\n    axis2 = [StraightLane([-50, 0], [50, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5, speed_limit=30)]\n    \n    # Closure barriers (simulated via obstacle lines)\n    closure_barriers = [\n        RoadObject('barrier', [0, 25], heading=0),\n        RoadObject('barrier', [25, 0], heading=90)\n    ]\n    \n    net.add_lanes(\"EW\", \"NS\", axis1)\n    net.add_lanes(\"NS\", \"EW\", axis2)\n    return net",
    "from highway_env.road.lane import StraightLane, LineType\nfrom highway_env.road.road import RoadNetwork, Road\nfrom highway_env.vehicle.objects import Obstacle\n\n# Define intersection structure\nnetwork = RoadNetwork()\nintersection_center = [60, 60]\nentry_length = 80\n\n# East-West straight lanes\new_lane = StraightLane([0, 60], [120, 60], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, special_type=\"regulated\")\nnetwork.add_lane(\"east\", \"west\", ew_lane)\n\n# North-South temporary closure\nclosure_barrier = Obstacle(road=Road(network), position=intersection_center, heading=0)\nclosure_barrier.collidable = True\nclosure_barrier.LENGTH = 8\nclosure_barrier.WIDTH = 8\n\n# Configure road access constraints\nnetwork.get_lane((\"east\", \"west\", 0)).access_controlled = True",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # West-East straight lanes (fast lanes)\n    west_approach = StraightLane([-150, 0], [-10, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=5, speed_limit=60)\n    east_approach = StraightLane([10, 0], [150, 0], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=5, speed_limit=60)\n    \n    # Temporary closure barriers\n    closure_barriers = RoadObject.special(\"construction_cones\", count=8, spacing=4).along(east_approach.position(0, 0)).offset(2)\n    \n    net.add_lane(\"west\", \"int\", west_approach)\n    net.add_lane(\"int\", \"east\", east_approach)\n    \n    return RegulatedRoad(network=net, obstacles=closure_barriers)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import RoadObject\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South circular lanes (intersection loop)\n    ns_arc = CircularLane(center=[100, 0], radius=50, start_phase=0, end_phase=Ï€, \n                         line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"north\", \"south\", ns_arc)\n    \n    # Temporary traffic control signage\n    control_sign = RoadObject(road=network, position=[50, 3], \n                             heading=0, type=\"construction_sign\")\n    return RegulatedRoad(network=network, road_objects=[control_sign])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # Main straight lanes (fast-lane arterial)\n    center_line = [0, 0]\n    lane_width = 3.5\n    fast_lane = StraightLane(center_line, [300, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=lane_width)\n    net.add_lane(\"north\", \"south\", fast_lane)\n    \n    # Cross lanes for intersection\n    circular_lane = CircularLane(center=[150, 0], radius=50, start_phase=0, end_phase=3.14, width=lane_width)\n    net.add_lane(\"east\", \"west\", circular_lane)\n    \n    return RegulatedRoad(network=net, np_random=globalNPC.random)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main arterial straight lanes\n    lane1 = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    lane2 = StraightLane([0, 3.5], [200, 3.5], line_types=(LineType.STRIPED, LineType.CONTINUOUS))\n    \n    # Connecting circular lanes for intersection\n    entry_lane = CircularLane(center=[50, 50], radius=30, start_phase=0, end_phase=np.pi/2,\n                             line_type=LineType.CONTINUOUS)\n    \n    network.add_lane(\"north\", \"south\", lane1)\n    network.add_lane(\"north\", \"south\", lane2)\n    network.add_lane(\"west\", \"east\", entry_lane)\n    \n    # Temporary traffic control objects\n    road_object = RoadObject(type=\"construction_barrier\", \n                            position=[45, 48], \n                            heading=np.pi/4)\n    return RegulatedRoad(network, road_objects=[road_object])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef setup_intersection():\n    network = RoadNetwork()\n    \n    # North-South straight lanes\n    ns_lane = StraightLane([0, -50], [0, 50], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"north\", \"south\", ns_lane)\n    \n    # East-West straight lanes\n    ew_lane = StraightLane([-50, 0], [50, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    return RegulatedRoad(network=network)\n\nroad = setup_intersection()",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef build_intersection():\n    net = RoadNetwork()\n    \n    # North-South Axis\n    north_lane = StraightLane([0, 5], [0, -5], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5)\n    south_lane = StraightLane([0, -5], [0, 5], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5)\n    \n    # East-West Axis \n    east_lane = StraightLane([5, 0], [-5, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5)\n    west_lane = StraightLane([-5, 0], [5, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5)\n    \n    net.add_lane(\"ns\", \"north\", north_lane)\n    net.add_lane(\"sn\", \"south\", south_lane)\n    net.add_lane(\"ew\", \"east\", east_lane)\n    net.add_lane(\"we\", \"west\", west_lane)\n    \n    # Temporary control barriers\n    barrier_positions = [[2.5, 0], [-2.5, 0], [0, 2.5], [0, -2.5]]\n    for pos in barrier_positions:\n        net.add_object(RoadObject(pos, width=1.2, length=4, type=\"barrier\"))\n    \n    return RegulatedRoad(network=net, np_random=env.np_random)\n\nroad = build_intersection()",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight passage\n    ew_lane = StraightLane([0, 0], [100, 0], \n                          line_types=(LineType.CONTINUOUS, LineType.STRIPED),\n                          speed_limit=15)\n    \n    # North-South crossing lane\n    ns_lane = StraightLane([0, -5], [0, 100],\n                          line_types=(LineType.STRIPED, LineType.CONTINUOUS),\n                          speed_limit=15)\n    \n    network.add_lane(\"east\", \"west\", ew_lane)\n    network.add_lane(\"south\", \"north\", ns_lane)\n    \n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_intersection(): \n    network = RoadNetwork()\n    \n    # Main road slow lanes (35 km/h speed limit)\n    lane_width = 3.5\n    main_lane = StraightLane(\n        [0, -lane_width/2], [200, -lane_width/2], \n        line_types=(LineType.CONTINUOUS, LineType.SIDE),\n        speed_limit=35/3.6,\n        width=lane_width\n    )\n    \n    # Create temporary closure zone\n    closure_area = RoadObject(\n        position=[95, 0], \n        length=10, \n        width=2*lane_width,\n        object_type=\"closure_barrier\"\n    )\n    \n    network.add_lane(\"north\", \"south\", main_lane)\n    return RegulatedRoad(network, road_objects=[closure_area])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import Obstacle\n\nroad_network = RoadNetwork()\nintersection_center = [50, 50]\n\n# Crossroad configuration\nfor angle in [0, np.pi/2, np.pi, 3*np.pi/2]:\n    start_pt = intersection_center + utils.rotated_vector([40, 0], angle)\n    end_pt = intersection_center + utils.rotated_vector([-40, 0], angle)\n    road_network.add_lane(StraightLane(start_pt, end_pt, width=3.5, line_types=(LineType.CONTINUOUS, LineType.STRIPED)))\n\n# Temporary closure barriers\nclosure_barriers = []\nfor entry_vector in [[-40,0], [0,40], [40,0], [0,-40]]:\n    barrier_pos = intersection_center + entry_vector\n    closure_barriers.append(Obstacle(road_network, position=barrier_pos, heading=np.arctan2(entry_vector[1], entry_vector[0])))",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_lane_1 = StraightLane([-150, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    ew_lane_2 = StraightLane([-150, 4], [150, 4], line_types=(LineType.STRIPED, LineType.STRIPED), width=4)\n    \n    # North-South circular lanes (for turning)\n    radius = 60\n    ns_lane_1 = CircularLane([0, -150], radius, 3*np.pi/2, np.pi/2, line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    ns_lane_2 = CircularLane([4, -150], radius+4, 3*np.pi/2, np.pi/2, line_types=(LineType.STRIPED, LineType.STRIPED))\n    \n    network.add_lane(\"east\", \"west\", ew_lane_1)\n    network.add_lane(\"east\", \"west\", ew_lane_2)\n    network.add_lane(\"north\", \"south\", ns_lane_1)\n    network.add_lane(\"north\", \"south\", ns_lane_2)\n    \n    return RegulatedRoad(network=network, traffic_lights={})\n\nintersection_road = construct_intersection()",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main axis lanes\n    main_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"north\", \"south\", main_lane)\n    \n    # Closure zone with physical barriers\n    closure_area = BoxObstacle(center=(100, 0), width=8, length=25, heading=0)\n    \n    return RegulatedRoad(network, obstacles=[closure_area], traffic_signals=[])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main straight lanes (East-West direction)\n    center = [0, 0]\n    main_lane = StraightLane(center, [100, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=30)\n    opposite_lane = StraightLane([0, 4], [100, 4], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=30)\n    \n    # Cross lanes (North-South direction)\n    cross_lane = StraightLane([-50, -20], [-50, 20], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=30)\n    \n    network.add_lane(\"east\", \"west\", main_lane)\n    network.add_lane(\"west\", \"east\", opposite_lane)\n    network.add_lane(\"south\", \"north\", cross_lane)\n    \n    return RegulatedRoad(network=network, traffic_signals=[])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef IntersectionGeometry():\n    network = RoadNetwork()\n    \n    # Main slow lane (east-west direction)\n    slow_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=3.5, speed_limit=40)\n    \n    # Create intersection arms (4-way)\n    north = StraightLane([0, 15], [0, 200], line_types=(LineType.CONTINUOUS, LineType.NONE))\n    south = StraightLane([0, -15], [0, -200], line_types=(LineType.NONE, LineType.CONTINUOUS))\n    east = StraightLane([15, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.NONE))\n    west = StraightLane([-15, 0], [-200, 0], line_types=(LineType.NONE, LineType.CONTINUOUS))\n    \n    # Add temporary control elements\n    network.add_lane(\"entry\", \"intersection\", slow_lane)\n    network.add_lane(\"north\", \"intersection\", north)\n    network.add_lane(\"south\", \"intersection\", south)\n    network.add_lane(\"east\", \"intersection\", east)\n    network.add_lane(\"west\", \"intersection\", west)\n    \n    return RegulatedRoad(network, \n                        obstacles=[RoadObject.cone(position=(50, 0))], \n                        stop_lines={slow_lane: 30})",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main straight lanes with temporary control\n    lane1 = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    lane2 = StraightLane([0, 4], [200, 4], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    \n    # Cross lanes for intersection\n    lane3 = StraightLane([0, 0], [0, 200], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    lane4 = StraightLane([4, 0], [4, 200], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    \n    network.add_lane(\"north\", \"south\", lane1)\n    network.add_lane(\"north\", \"south\", lane2)\n    network.add_lane(\"east\", \"west\", lane3)\n    network.add_lane(\"east\", \"west\", lane4)\n    \n    return RegulatedRoad(network=network, traffic_lights=[])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.STRIPED, LineType.STRIPED))\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South circular lanes for turn movements\n    ns_lane = CircularLane(center=[100, 100], radius=50, start_phase=0, end_phase=Ï€,\n                          line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"north\", \"south\", ns_lane)\n    \n    # Temporary construction zone\n    construction = ConstructionZone(start=Vector(50, -2), length=30, width=4)\n    return RegulatedRoad(network, regulations=[construction])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # Main roads\n    net.add_lane(\"east\", \"west\", StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED)))\n    net.add_lane(\"north\", \"south\", StraightLane([0, 0], [0, -100], line_types=(LineType.CONTINUOUS, LineType.STRIPED)))\n    # Temporary control elements\n    construction_barrier = Obstacle(road=road, position=[15, -3.5], heading=0)\n    return RegulatedRoad(network=net, obstacles=[construction_barrier])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # East-West arterial (special lane type)\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.STRIPED, LineType.SOLID))\n    net.add_lane(\"east\", \"int\", ew_lane)\n    \n    # Connecting circular lanes for turns\n    radius = 30\n    for offset in [-15, 15]:\n        turn_lane = CircularLane(\n            center=[100, offset],\n            radius=radius,\n            start_phase=0,\n            end_phase=np.pi,\n            line_type=LineType.STRIPED\n        )\n        net.add_lane(\"int\", \"north\" if offset>0 else \"south\", turn_lane)\n    \n    return RegulatedRoad(network=net, np_random=RandomState())",
    "from highway_env.road.lane import StraightLane  \nfrom highway_env.road.road import RoadNetwork  \n\nnetwork = RoadNetwork()  \neast_west = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))  \nnorth_south = StraightLane([0, -100], [0, 100], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))  \nnetwork.add_lane(\"east\", \"west\", east_west)  \nnetwork.add_lane(\"north\", \"south\", north_south)  \nroad = RegulatedRoad(network=network)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\nfrom scenic.simulators.highway.obstacles import ClosedArea\n\nlane1 = StraightLane(\n    start=[-50, 0],\n    end=[50, 0],\n    line_types=(LineType.CONTINUOUS, LineType.STRIPED),\n    width=4,\n    speed_limit=30  # Fast lane specification\n)\n\nlane2 = StraightLane(  # Cross-traffic lane\n    start=[0, -50],\n    end=[0, 50],\n    line_types=(LineType.STRIPED, LineType.CONTINUOUS),\n    width=4\n)\n\nnetwork = RoadNetwork()\nnetwork.add_lane(\"north\", \"south\", lane1)\nnetwork.add_lane(\"east\", \"west\", lane2)\n\nclosure = ClosedArea(\n    outline=[(-5, -5), (5, -5), (5, 5), (-5, 5)],\n    center=(0, 0),\n    duration=10  # Temporary closure\n)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\nroad_network = RoadNetwork()\nlane_width = 3.5\nspeed_limit = 8.33  # 30 km/h in m/s\n\n# East-West straight lanes\new_lane = StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=lane_width, speed_limit=speed_limit)\nroad_network.add_lane(\"east\", \"west\", ew_lane)\n\n# North-South straight lanes \nns_lane = StraightLane([0, -lane_width], [0, 100], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=lane_width, speed_limit=speed_limit)\nroad_network.add_lane(\"north\", \"south\", ns_lane)\n\nroad = RegulatedRoad(network=road_network, np_random=RandomState())",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef build_intersection():\n    network = RoadNetwork()\n    \n    # Main orthogonal roads\n    entry_lane = StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, speed_limit=10)  # Slow lane\n    exit_lane = StraightLane([100, 0], [200, 0], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=4)\n    \n    # Cross lanes (closed section)\n    closed_lane = StraightLane([95, -5], [95, 5], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=6, for_driving=False)\n    \n    network.add_lane(\"north\", \"intersection\", entry_lane)\n    network.add_lane(\"intersection\", \"south\", exit_lane)\n    network.add_object(\"closure\", RoadObject(closed_lane, obstacle_type=\"construction_barrier\"))\n    \n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane\n\ndef IntersectionLanes():\n    network = RoadNetwork()\n    # Create orthogonal straight lanes forming cross intersection\n    lane_EW = StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    lane_NS = StraightLane([0, 0], [0, 100], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    network.add_lane(\"east\", \"west\", lane_EW)\n    network.add_lane(\"north\", \"south\", lane_NS)\n    return RegulatedRoad(network=network)\n\nroad = IntersectionLanes()",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight lanes (fast lane type)\n    east_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, speed_limit=30)\n    west_lane = StraightLane([200, 0], [0, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, speed_limit=30)\n    \n    # North-South circular lanes (temporary closure)\n    north_ramp = CircularLane([200, 0], 50, np.deg2rad(90), np.deg2rad(180), line_types=(LineType.NONE, LineType.BLOCKED))\n    south_ramp = CircularLane([0, 0], 50, np.deg2rad(270), np.deg2rad(180), line_types=(LineType.NONE, LineType.BLOCKED))\n    \n    # Add closure barriers\n    closure_barrier = RoadObject('construction_barrier', [100, 0], heading=np.pi/2)\n    \n    network.add_lane(\"east\", \"intersection\", east_lane)\n    network.add_lane(\"west\", \"intersection\", west_lane)\n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import Obstacle\n\nroad_network = RoadNetwork()\n\n# Eastbound straight lanes (fast lane type)\nlane1 = StraightLane([0, 0], [300, 0], line_types=(LineType.STRIPED, LineType.SOLID), width=3.5)\nlane2 = StraightLane([0, 3.5], [300, 3.5], line_types=(LineType.SOLID, LineType.STRIPED), width=3.5)\n\n# Intersection closure barriers\nclosure_barriers = [\n    Obstacle(road=road, position=[150, 7.0], heading=math.pi/2),\n    Obstacle(road=road, position=[150, -7.0], heading=-math.pi/2)\n]\n\n# Traffic control infrastructure\ntraffic_light = TrafficLight(position=Vector(140, 0), state=LightPhase.RED)\n\nroad_network.add_lane(\"east\", \"intersection\", lane1)\nroad_network.add_lane(\"east\", \"intersection\", lane2)\nroad_network.add_object(closure_barriers)\nroad_network.add_object(traffic_light)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main orthogonal roads with fast lane specifications\n    for angle in [0, np.pi/2]:\n        lane = StraightLane([0, 0], \n                           [100*np.cos(angle), 100*np.sin(angle)], \n                           line_types=[LineType.CONTINUOUS, LineType.CONTINUOUS],\n                           width=4.0,\n                           speed_limit=60)  # Fast lane configuration\n        network.add_lane(\"north\", \"south\", lane)\n    \n    # Temporary closure barriers (road objects)\n    closure_zone = RoadObject(geometry=CircularRegion(center=(10,10), radius=8),\n                             static=True,\n                             collision_check=True)\n    \n    return RegulatedRoad(network=network,\n                        road_objects=[closure_zone],\n                        traffic_signals=[])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main orthogonal lanes with temporary markings\n    lane_EW = StraightLane([0, 0], [100, 0], width=3.5, line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    lane_NS = StraightLane([0, 0], [0, 100], width=3.5, line_types=(LineType.STRIPED, LineType.CONTINUOUS))\n    \n    # Temporary traffic control elements\n    construction_zone = RoadObject(type=\"barrier\", position=[30, -2], heading=0)\n    \n    network.add_lane(\"east\", \"west\", lane_EW)\n    network.add_lane(\"north\", \"south\", lane_NS)\n    return RegulatedRoad(network, road_objects=[construction_zone])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import RoadObject\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main road straight lanes\n    main_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=25)\n    network.add_lane(\"north\", \"south\", main_lane)\n    \n    # Temporary closure markers\n    closure_start = main_lane.position(150, 0)\n    closure_barrier = RoadObject(closure_start, width=8, length=10)\n    network.add_object(closure_barrier)\n    \n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main orthogonal roads\n    main_east = StraightLane([0, 0], [200, 0], line_types=[LineType.CONTINUOUS, LineType.STRIPED])\n    main_west = StraightLane([200, 6], [0, 6], line_types=[LineType.STRIPED, LineType.CONTINUOUS])\n    north_south = CircularLane(center=[100, 50], radius=50, start_phase=0, end_phase=3.14, width=6)\n    \n    # Temporary control elements\n    construction_zone = StraightLane([80, -2], [120, -2], line_types=[LineType.CONTINUOUS, LineType.NONE])\n    network.add_lane(\"EW\", \"main\", main_east)\n    network.add_lane(\"WE\", \"main\", main_west)\n    network.add_lane(\"NS\", \"curve\", north_south)\n    network.add_lane(\"CZ\", \"temp\", construction_zone)\n    \n    return RegulatedRoad(network, traffic_signals=dict(phase_duration=30))",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    net.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South straight lanes \n    ns_lane = StraightLane([-50, -15], [-50, 200], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    net.add_lane(\"north\", \"south\", ns_lane)\n    \n    # Turn connection lanes\n    turn_lane = CircularLane(center=[-10, -10], radius=15, start_phase=0, end_phase=1.57, width=3)\n    net.add_lane(\"east\", \"north\", turn_lane)\n    \n    return RegulatedRoad(network=net, np_random=RandomState())",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\n# Define intersection geometry\nroad_network = RoadNetwork()\nmain_lane = StraightLane(\n    start=[0, 0],\n    end=[100, 0],\n    line_types=(LineType.STRIPED, LineType.STRIPED),\n    width=4,\n    speed_limit=60\n)\ncross_lane = StraightLane(\n    start=[-50, 5],\n    end=[50, 5],\n    line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS),\n    width=4,\n    speed_limit=40\n)\nroad_network.add_lane(\"north\", \"south\", main_lane)\nroad_network.add_lane(\"west\", \"east\", cross_lane)\n\n# Create regulated road with temporary control\nroad = RegulatedRoad(network=road_network, np_random=None)\nroad.objects.append(RoadObject(\n    category=\"construction_cone\",\n    position=[30, 2],\n    heading=0\n))",
    "from highway_env.road.lane import StraightLane, LineType\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main straight lane with temporary control markings\n    center_line = [(0, 0), (200, 0)]\n    main_lane = StraightLane(center_line, width=3.5, line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    network.add_lane(\"n_south\", \"n_north\", main_lane)\n    \n    # Temporary traffic control infrastructure\n    construction_zone = RegulatedRoad.add_stop_sign(network, position=(50, 0), affected_lanes=[main_lane])\n    regulatory_signs = [ConstructionZone(length=30, position=Vector(40, 0))]\n    \n    return RegulatedRoad(network, regulations=regulatory_signs)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.vehicle.objects import RoadObject\n\ndef construct_road_network():\n    net = RoadNetwork()\n    # Eastbound slow lane with temporary control\n    east_lane = StraightLane([0, 0], [100, 0], line_types=[LineType.CONTINUOUS, LineType.STRIPED], \n                            width=3.5, speed_limit=40, lane_type=\"slow\")\n    # Add perpendicular lanes for intersection\n    north_lane = StraightLane([50, -50], [50, 50], line_types=[LineType.STRIPED, LineType.CONTINUOUS],\n                             width=3.5, speed_limit=40)\n    \n    net.add_lane(\"east\", \"int\", east_lane)\n    net.add_lane(\"north\", \"int\", north_lane)\n    \n    # Add temporary traffic control signage\n    control_sign = RoadObject(road=net, position=[20, 0.5], \n                             heading=east_lane.heading_at(20), \n                             type=\"construction_sign\")\n    return RegulatedRoad(network=net, road_objects=[control_sign])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # Main road lanes (horizontal)\n    main_lane_1 = StraightLane([-150, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    main_lane_2 = main_lane_1.shifted(4)\n    \n    # Closed section (vertical approach blocked)\n    closed_lane = StraightLane([0, -50], [0, 50], line_types=(LineType.STRIPED, LineType.STRIPED))\n    closed_lane.closed = True\n    \n    # Turn lanes with special markings\n    turn_lane = CircularLane(center=[30, 30], radius=20, start_phase=0, end_phase=1.5Ï€, line_type=LineType.STRIPED)\n    \n    net.add_lane(\"main_EW\", \"special\", main_lane_1)\n    net.add_lane(\"main_EW\", \"special\", main_lane_2)\n    net.add_lane(\"closed_NS\", \"blocked\", closed_lane)\n    return RegulatedRoad(network=net)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef IntersectionScenario():\n    network = RoadNetwork()\n    \n    # East-West through lanes\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    we_lane = StraightLane([200, 3.5], [0, 3.5], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    \n    # North-South through lanes (closed)\n    ns_lane = StraightLane([100, -200], [100, 0], line_types=(LineType.STRIPED, LineType.STRIPED))\n    sn_lane = StraightLane([103.5, 0], [103.5, -200], line_types=(LineType.STRIPED, LineType.STRIPED))\n    \n    # Closure zone\n    closure_area = PolygonObstacle(vertices=[(95, -5), (105, -5), (105, 5), (95, 5)])\n    \n    network.add_lane(\"east\", \"west\", ew_lane)\n    network.add_lane(\"west\", \"east\", we_lane)\n    network.add_lane(\"north\", \"intersection\", ns_lane)\n    network.add_lane(\"south\", \"intersection\", sn_lane)\n    return RegulatedRoad(network, obstacles=[closure_area])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main orthogonal axes\n    east_lane = StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.SIDE))\n    north_lane = CircularLane(center=[50, 50], radius=50, start_phase=0, end_phase=np.pi/2,\n                             line_types=(LineType.CONTINUOUS, LineType.SIDE))\n    \n    # Closure barriers\n    closure_zone = Obstacle(geometry=Rectangle(width=10, height=10), \n                           position=[50, 50], \n                           static=True)\n    \n    network.add_lane(\"east\", \"intersection\", east_lane)\n    network.add_lane(\"north\", \"intersection\", north_lane)\n    network.add_object(closure_zone)\n    \n    return RegulatedRoad(network=network, \n                        speed_limit=15, \n                        regulation_type=RegulationType.STOP)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef build_intersection():\n    network = RoadNetwork()\n    \n    # East-West Straight Lanes\n    east_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3)\n    west_lane = StraightLane([200, 0], [0, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3)\n    \n    # North-South Straight Lanes\n    north_lane = StraightLane([100, -150], [100, 150], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3)\n    south_lane = StraightLane([100, 150], [100, -150], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3)\n    \n    network.add_lane(\"east\", \"intersection\", east_lane)\n    network.add_lane(\"west\", \"intersection\", west_lane)\n    network.add_lane(\"north\", \"intersection\", north_lane)\n    network.add_lane(\"south\", \"intersection\", south_lane)\n    \n    return RegulatedRoad(network=network)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef IntersectionGeometry():\n    net = RoadNetwork()\n    \n    # East-West Straight Lanes\n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=3.5)\n    net.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South Circular Lanes (for turn movements)\n    radius = 30\n    ns_lane = CircularLane(center=[100, -100], radius=radius, start_phase=3*pi/2, end_phase=pi/2,\n                          line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=3.5)\n    net.add_lane(\"north\", \"south\", ns_lane)\n    \n    return RegulatedRoad(network=net, np_random=env.np_random)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_entry = StraightLane([-150, 0], [-10, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    ew_exit = StraightLane([10, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    \n    # North-South circular lanes for turns\n    ns_arc = CircularLane(center=[0, 0], radius=20, start_phase=3*np.pi/2, end_phase=5*np.pi/2,\n                          line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    \n    net.add_lane(\"east\", \"west\", ew_entry)\n    net.add_lane(\"west\", \"east\", ew_exit)\n    net.add_lane(\"north\", \"south\", ns_arc)\n    \n    # Construction zone markers\n    net.add_object(RoadObject('construction', [15, -2], heading=np.pi/2))\n    return RegulatedRoad(network=net, np_random=RandomState())",
    "from highway_env.road.lane import CircularLane, StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main straight lanes (fast type)\n    StraightLane([0, -50], [0, 50], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=30, id=\"fast_lane\")\n    # Circular lanes for intersection closure\n    closure_radius = 15\n    CircularLane(center=[0, 0], radius=closure_radius, start_phase=0, end_phase=2*math.pi, clockwise=True,\n                 line_types=(LineType.STRIPED, LineType.STRIPED), forbidden=True, id=\"closure_zone\")\n    return network",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef build_intersection():\n    network = RoadNetwork()\n    \n    # Eastbound fast lane (ego direction)\n    lane_EB = StraightLane([0, 0], [300, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=3.5)\n    network.add_lane(\"south\", \"north\", lane_EB)\n    \n    # Westbound lane\n    lane_WB = StraightLane([0, 3.5], [300, 3.5], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=3.5)\n    network.add_lane(\"north\", \"south\", lane_WB)\n    \n    # Temporary control signage (abstracted as road object)\n    network.add_object(RoadObject(\"construction_zone\", Vector(150, -5.25), width=2.0)\n    \n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_road_network():\n    network = RoadNetwork()\n    \n    # Eastbound fast lane (ego vehicle's lane)\n    lane_eb = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), \n                          speed_limit=35, width=4)\n    \n    # Westbound lane\n    lane_wb = StraightLane([200, -7.5], [0, -7.5], line_types=(LineType.STRIPED, LineType.CONTINUOUS),\n                          speed_limit=35)\n    \n    # North-south crossing (temporarily closed)\n    closed_ns = CircularLane(center=[100, -3.75], radius=3.75, start_phase=0, end_phase=Ï€,\n                            line_types=(LineType.BLOCKED, LineType.BLOCKED))\n    \n    network.add_lane(\"east\", \"intersection\", lane_eb)\n    network.add_lane(\"west\", \"intersection\", lane_wb)\n    network.add_lane(\"north\", \"closure\", closed_ns)\n    \n    return RegulatedRoad(network=network, np_random=RandomState)",
    "from highway_env.road.lane import StraightLane, CircularLane  \nfrom highway_env.road.regulation import RegulatedRoad  \n\ndef construct_intersection():  \n    network = RoadNetwork()  \n    # East-West straight lanes  \n    ew_lane = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=20)  \n    # North-South circular lanes  \n    ns_lane = CircularLane([-50, -50], 100, np.deg2rad(90), np.deg2rad(180), width=4, line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), speed_limit=20)  \n    \n    network.add_lane(\"entrance_east\", \"intersection\", ew_lane)  \n    network.add_lane(\"intersection\", \"exit_west\", ew_lane)  \n    network.add_lane(\"entrance_north\", \"intersection\", ns_lane)  \n    \n    road = RegulatedRoad(network=network)  \n    road.add_closure(region=ew_lane.position(150, 0), duration=60)  # Temporary closure  \n    return road",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad, SpeedLimitSign\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # North-South arterial (main approach)\n    north_lane = StraightLane([0, 0], [0, 150], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    south_lane = StraightLane([0, -150], [0, 0], line_types=(LineType.STRIPED, LineType.CONTINUOUS))\n    # East-West crossing\n    east_lane = StraightLane([-150, 0], [150, 0], line_types=(LineType.BROKEN, LineType.BROKEN))\n    west_lane = StraightLane([150, 0], [-150, 0], line_types=(LineType.BROKEN, LineType.BROKEN))\n    \n    network.add_lane(\"ns\", \"intersection\", north_lane)\n    network.add_lane(\"sn\", \"intersection\", south_lane)\n    network.add_lane(\"ew\", \"intersection\", east_lane)\n    network.add_lane(\"we\", \"intersection\", west_lane)\n    \n    # Temporary control measures\n    control_zone = RegulatedRoad(network).add_regulation(\n        SpeedLimitSign(position=Vector(0, 50), \n        applicable_lanes=[north_lane, south_lane],\n        speed_limit=10\n    )\n    return Road(network=network, regulations=[control_zone])",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\nfrom scenic.simulators.highway.obstacles import BoxObstacle\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West straight lanes (closed section)\n    closure_start = 35\n    closure_end = 45\n    ew_lane = StraightLane([0, 0], [50, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), speed_limit=13.89)  # 50km/h\n    \n    # North-South circular lanes\n    ns_arc = CircularLane(center=[25, -25], radius=25, start_phase=0.5*np.pi, end_phase=1.5*np.pi,\n                          line_types=(LineType.CONTINUOUS, LineType.NONE), speed_limit=13.89)\n    \n    # Closure markers\n    closure_zone = BoxObstacle(pos=(40, 0), width=10, length=3.5, heading=0)\n    \n    network.add_lane(\"east\", \"west\", ew_lane)\n    network.add_lane(\"south\", \"north\", ns_arc)\n    return RegulatedRoad(network, obstacles=[closure_zone])\n\nroad = construct_intersection()",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.utils import Vector\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # East-West straight lanes\n    ew_lane = StraightLane([-50, 0], [50, 0], line_types=(LineType.STRIPED, LineType.STRIPED), speed_limit=8)\n    \n    # North-South curved lanes (closed)\n    ns_arc = CircularLane(center=[0, 0], radius=15, start_phase=0, end_phase=np.pi, \n                         line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), forbidden=True)\n    \n    # Closure barriers\n    closure_barriers = [\n        RoadObject(position=Vector(20, 0),  # East entry\n        RoadObject(position=Vector(-20, 0)) # West entry\n    ]\n    \n    net.add_lane(\"east\", \"west\", ew_lane)\n    net.add_lane(\"north\", \"south\", ns_arc)\n    return RegulatedRoad(network=net, road_objects=closure_barriers)\n\nroad = construct_intersection()",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef IntersectionLanes():\n    network = RoadNetwork()\n    \n    # East-West arterial road\n    ctr = [0, 0]\n    ew_lane1 = StraightLane([ctr[0]-50, ctr[1]-3.5], [ctr[0]+50, ctr[1]-3.5], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    ew_lane2 = StraightLane([ctr[0]-50, ctr[1]+3.5], [ctr[0]+50, ctr[1]+3.5], line_types=(LineType.STRIPED, LineType.CONTINUOUS))\n    \n    # North-South cross road\n    ns_lane1 = StraightLane([ctr[0]-3.5, ctr[1]-50], [ctr[0]-3.5, ctr[1]+50], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    ns_lane2 = StraightLane([ctr[0]+3.5, ctr[1]-50], [ctr[0]+3.5, ctr[1]+50], line_types=(LineType.STRIPED, LineType.CONTINUOUS))\n    \n    network.add_lane(\"east\", \"west\", ew_lane1)\n    network.add_lane(\"west\", \"east\", ew_lane2)\n    network.add_lane(\"south\", \"north\", ns_lane1)\n    network.add_lane(\"north\", \"south\", ns_lane2)\n    \n    return RegulatedRoad(network=network)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_road_network():\n    network = RoadNetwork()\n    # Main arterial lanes (fast-type)\n    lane1 = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, speed_limit=40)\n    lane2 = StraightLane([0, -4], [200, -4], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=4, speed_limit=40)\n    \n    # Intersection closure barriers\n    closure_zone = StraightLane([95, -8], [105, 8], line_types=(LineType.SOLID, LineType.SOLID), width=10, forbidden=True)\n    \n    network.add_lane(\"north\", \"south\", lane1)\n    network.add_lane(\"south\", \"north\", lane2)\n    network.add_object(\"closure\", closure_zone)\n    return RegulatedRoad(network=network, np_random=RandomState())",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom scenic.core.regions import PolylineRegion\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # Main axes (East-West slow lane)\n    east_lane = StraightLane([0, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), speed_limit=15)\n    west_lane = StraightLane([150, 0], [0, 0], line_types=(LineType.STRIPED, LineType.CONTINUOUS), speed_limit=15)\n    \n    # North-South connecting lanes\n    north_approach = CircularLane(center=[75, 50], radius=50, start_phase=0, end_phase=3.14, speed_limit=15)\n    south_approach = CircularLane(center=[75, -50], radius=50, start_phase=3.14, end_phase=6.28, speed_limit=15)\n    \n    net.add_lane(\"east\", \"int\", east_lane)\n    net.add_lane(\"west\", \"int\", west_lane)\n    net.add_lane(\"north\", \"int\", north_approach)\n    net.add_lane(\"south\", \"int\", south_approach)\n    \n    # Closure zone\n    closure_shape = PolylineRegion([(70, -5), (80, -5), (80, 5), (70, 5)])\n    RoadObject(geometry=closure_shape, static=True)\n    \n    return RegulatedRoad(network=net)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import RoadObject\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main orthogonal roads\n    entry_lanes = [StraightLane([-150, 0], [-10, 0], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=4) for _ in range(2)]\n    exit_lanes = [StraightLane([10, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4) for _ in range(2)]\n    \n    # Circular lanes for turning paths\n    turning_radius = 20\n    circular_lanes = [\n        CircularLane(center=[0, 0], radius=turning_radius, start_phase=0, end_phase=np.pi/2,\n        line_type=LineType.CONTINUOUS, width=4) for _ in range(4)\n    ]\n    \n    # Temporary control markers\n    control_barrier = RoadObject(object_type=\"barricade\", position=[2, -2], heading=np.pi/4)\n    \n    network.add_lanes(\"north\", \"south\", entry_lanes + exit_lanes)\n    network.add_lanes(\"east\", \"west\", circular_lanes)\n    network.add_object(control_barrier)\n    return network",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef IntersectionScenario():\n    network = RoadNetwork()\n    \n    # Main straight lanes with closure area\n    closure_zone = [(15, -2), (15, 2), (25, 2), (25, -2)]  # Rectangular closure area\n    main_lane = StraightLane([0, 0], [40, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), speed_limit=30)\n    crossing_lane = StraightLane([20, -20], [20, 20], line_types=(LineType.STRIPED, LineType.CONTINUOUS), speed_limit=30)\n    \n    # Connect lanes with priority rules\n    network.add_lane(\"north\", \"intersection\", main_lane)\n    network.add_lane(\"intersection\", \"south\", main_lane)\n    network.add_lane(\"west\", \"intersection\", crossing_lane)\n    network.add_lane(\"intersection\", \"east\", crossing_lane)\n    \n    # Add closure obstacle\n    network.add_object(Obstacle(shape=closure_zone))\n    \n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # Eastbound fast lane\n    lane_EB = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), \n                          width=3.5, speed_limit=60)\n    # Westbound fast lane\n    lane_WB = StraightLane([200, 0], [0, 0], line_types=(LineType.STRIPED, LineType.CONTINUOUS),\n                          width=3.5, speed_limit=60)\n    net.add_lane(\"E\", \"W\", lane_EB)\n    net.add_lane(\"W\", \"E\", lane_WB)\n    return RegulatedRoad(network=net)",
    "from highway_env.road.lane import StraightLane, LineType\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # East-West major road with construction markers\n    ew_lane = StraightLane([0, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), \n                          width=3.5, special_type=\"construction_zone\")\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South crossing with temporary controls\n    ns_lane = StraightLane([-75, -15], [-75, 15], line_types=(LineType.STRIPED, LineType.NONE),\n                          width=3.0, special_type=\"temp_control\")\n    network.add_lane(\"north\", \"south\", ns_lane)\n    \n    # Add temporary traffic control objects\n    control_sign = RoadObject(type=\"construction_barrier\", \n                             position=Vector(-70, -2), \n                             heading=0)\n    network.add_object(control_sign)\n    \n    return RegulatedRoad(network=network, regulations=[\"construction_priority\"])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import Obstacle\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # East-West straight lanes (slow type)\n    ew_lane = StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, speed_limit=10)\n    net.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South closed lanes\n    closure_zone = Obstacle(road=Road(net), position=[50, -5], heading=0)\n    closure_zone.LENGTH = 10\n    closure_zone.WIDTH = 20\n    \n    return Road(network=net)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    \n    # Main road parameters\n    main_lane_width = 3.5\n    dash_line = LineType.BROKEN\n    solid_line = LineType.CONTINUOUS\n    \n    # Create 4-way intersection\n    for angle in [0, np.pi/2, np.pi, 3*np.pi/2]:\n        start = (0, 0)\n        end = (50 * np.cos(angle), 50 * np.sin(angle))\n        net.add_lane(\"EW\", \"E\", StraightLane(start, end, line_types=[solid_line, dash_line], width=main_lane_width))\n    \n    # Temporary control barriers\n    barrier_pos = CircularLane(center=[0,0], radius=8, start_phase=np.pi/4, end_phase=3*np.pi/4,\n                              width=0.5, line_types=[LineType.STRIPE, LineType.STRIPE])\n    net.add_object(\"barrier\", barrier_pos)\n    \n    return RegulatedRoad(network=net, np_random=np.random)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import Obstacle\n\ndef build_network():\n    net = RoadNetwork()\n    \n    # East-West straight lanes (slow type)\n    ew_lane = StraightLane([0, 0], [150, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), speed_limit=15)\n    net.add_lane(\"east\", \"west\", ew_lane)\n    \n    # North-South crossing lanes \n    ns_lane = StraightLane([75, -75], [75, 75], line_types=(LineType.STRIPED, LineType.CONTINUOUS))\n    net.add_lane(\"north\", \"south\", ns_lane)\n    \n    # Intersection closure obstacle\n    closure = Obstacle(road, position=[75, 0], heading=0)\n    closure.type = 'roadwork'\n    return RegulatedRoad(network=net, regulations=[closure])\n\nroad = build_network()",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\nfrom highway_env.vehicle.objects import Obstacle\n\ndef IntersectionBuilder():\n    network = RoadNetwork()\n    \n    # Main entrance lanes\n    entrance1 = StraightLane([0, -50], [0, -10], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    entrance2 = StraightLane([-50, 0], [-10, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    \n    # Circular arcs for turning paths\n    arc1 = CircularLane(center=[0,0], radius=10, start_phase=3*pi/2, end_phase=pi, angle=90)\n    arc2 = CircularLane(center=[0,0], radius=10, start_phase=0, end_phase=pi/2, angle=90)\n    \n    # Closed lane section\n    closure_area = BoxObstacle(center=entrance1.position(0.8, 0), length=15, width=3.5)\n    closure_area.in_intersection = True\n    \n    network.add_lane(\"north\", \"south\", entrance1)\n    network.add_lane(\"west\", \"east\", entrance2)\n    network.add_lane(\"south\", \"east\", arc1)\n    network.add_lane(\"west\", \"north\", arc2)\n    \n    return RegulatedRoad(network=network, \n                        obstacles=[closure_area],\n                        traffic_signals=TrafficSignalState.YELLOW_BLINKING)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # North-South axis\n    ns_lane = StraightLane([0, -100], [0, 100], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS))\n    # East-West axis \n    ew_lane = CircularLane(center=[0, 0], radius=50, start_phase=0, end_phase=np.pi, line_types=(LineType.STRIPED, LineType.STRIPED))\n    \n    network.add_lane(\"north\", \"south\", ns_lane)\n    network.add_lane(\"east\", \"west\", ew_lane)\n    \n    return RegulatedRoad(network=network, traffic_control=True)",
    "from highway_env.road.lane import StraightLane, CircularLane\nfrom highway_env.road.regulation import RegulatedRoad\n\nlane1 = StraightLane(\n    start=[0, -3.5], \n    end=[150, -3.5],\n    width=3.0,\n    line_types=(LineType.CONTINUOUS, LineType.STRIPED),\n    speed_limit=15,\n    lane_type='slow'\n)\n\nlane2 = StraightLane(\n    start=[0, 3.5],\n    end=[150, 3.5],\n    width=3.0,\n    line_types=(LineType.STRIPED, LineType.CONTINUOUS),\n    speed_limit=15\n)\n\nnetwork = RoadNetwork()\nnetwork.add_lane(\"north\", \"south\", lane1)\nnetwork.add_lane(\"south\", \"north\", lane2)\n\nroad = RegulatedRoad(network=network, np_random=env.np_random)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Eastbound fast lane (ego direction)\n    lane = StraightLane(\n        [0, 0], \n        [500, 0], \n        width=3.5, \n        line_types=(LineType.CONTINUOUS, LineType.STRIPED),\n        speed_limit=60\n    )\n    network.add_lane(\"east\", \"west\", lane)\n    \n    # Westbound lane (opposing traffic)\n    network.add_lane(\"west\", \"east\", StraightLane(\n        [0, 3.5], \n        [500, 3.5], \n        width=3.5,\n        line_types=(LineType.STRIPED, LineType.CONTINUOUS),\n        speed_limit=60\n    ))\n    \n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main orthogonal lanes with temporary control\n    lane_EW = StraightLane([0, 0], [100, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=15)\n    lane_NS = StraightLane([0, 0], [0, 100], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4, speed_limit=15)\n    \n    # Special lane marking for traffic control\n    network.add_lane(\"east\", \"west\", lane_EW)\n    network.add_lane(\"north\", \"south\", lane_NS)\n    \n    return RegulatedRoad(network=network, traffic_signals=dict(), obstacles=[\n        RoadObject(road=network, position=[50, -2], heading=0)  # Temporary control marker\n    ])",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    \n    # Main orthogonal roads (temporarily closed east-west axis)\n    north_south = StraightLane([0, -50], [0, 50], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=3.5)\n    east_west_closed = StraightLane([-50, 0], [50, 0], line_types=(LineType.STRIPED, LineType.STRIPED), forbidden=True)\n    \n    # Add closure barriers\n    closure_zone = RoadObject(\n        polygon=Polygon([(-5, -5), (5, -5), (5, 5), (-5, 5)]),\n        position=[0, 0],\n        heading=0\n    )\n    \n    network.add_lane(\"ns\", \"n\", north_south)\n    network.add_lane(\"ns\", \"s\", north_south.shifted(-3.5))\n    network.add_road_object(closure_zone)\n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.regulation import RegulatedRoad\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    net = RoadNetwork()\n    # Main straight lanes (East-West direction)\n    lane1 = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    lane2 = StraightLane([0, -4], [200, -4], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4)\n    # Crossing lanes (North-South direction)\n    lane3 = StraightLane([100, -200], [100, 200], line_types=(LineType.CONTINUOUS, LineType.CONTINUOUS), width=4)\n    \n    net.add_lane(\"EW\", \"main\", lane1)\n    net.add_lane(\"EW\", \"secondary\", lane2)\n    net.add_lane(\"NS\", \"cross\", lane3)\n    \n    return RegulatedRoad(network=net, np_random=RandomGenerator())",
    "from highway_env.road.lane import StraightLane\nfrom highway_env.road.road import RoadNetwork\n\ndef construct_intersection():\n    network = RoadNetwork()\n    # Main straight lanes (fast lanes)\n    lane1 = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED), width=4, speed_limit=30)\n    lane2 = StraightLane([0, 10], [200, 10], line_types=(LineType.STRIPED, LineType.CONTINUOUS), width=4, speed_limit=30)\n    # Crossing lanes with temporary closure\n    lane3 = StraightLane([-50, -20], [-50, 200], line_types=(LineType.NONE, LineType.BLOCKED), width=0, speed_limit=0)\n    # Add lanes to road network\n    network.add_lane(\"north\", \"south\", lane1)\n    network.add_lane(\"south\", \"north\", lane2)\n    network.add_lane(\"west\", \"east\", StraightLane([-20, 0], [220, 0], line_types=(LineType.BLOCKED, LineType.BLOCKED), width=0))\n    return RegulatedRoad(network)",
    "from highway_env.road.lane import StraightLane, CircularLane\n\ndef IntersectionRoad():\n    network = RoadNetwork()\n    \n    # Eastbound arterial (fast lane)\n    lane1 = StraightLane([0, 0], [200, 0], line_types=(LineType.CONTINUOUS, LineType.STRIPED))\n    lane1_speed = 25  # m/s (90 km/h)\n    \n    # Northbound connecting lane\n    lane2 = CircularLane(center=[50, 50], radius=30, start_phase=0, end_phase=np.pi/2,\n                        line_types=(LineType.CONTINUOUS, LineType.NONE))\n    \n    # Temporary control barriers\n    construction_zone = RoadObject(type=Obstacle, lane=lane1, position=80)\n    \n    network.add_lane(\"entrance\", \"intersection\", lane1)\n    network.add_lane(\"intersection\", \"exit\", lane2)\n    return RegulatedRoad(network, obstacles=[construction_zone])"
  ],
  "spawn": [
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=8.33  # ~30 km/h\n)\n\nfor _ in range(5):\n    spawn_vehicle = Vehicle(\n        road=ego.road,\n        position=ego.road.network.random_lane_position(),\n        heading=Uniform(0, 2*math.pi),\n        speed=Normal(10, 2),\n        enable_lane_change=True\n    )\n    spawn_vehicle.lane_change_controller.emergency = 0.8  # Higher urgency",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,  # East orientation\n    speed=8,    # m/s (~29 km/h)\n    lane=network.get_lane((\"east\", \"west\", 0))\n)\n\ndef initialize_traffic():\n    spawn_vehicle(ego.road, \n                 count=20,\n                 spacing=15,\n                 lane_selection=lambda: random.choice(network.lanes),\n                 speed_range=(5, 12))",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,  # Eastbound orientation\n    lane=0,     # Fast lane\n    lane_position=10.0\n)\n\nfor _ in range(5):\n    npc = Vehicle(\n        road=ego.road,\n        position=ego.road.network.random_lane_position(),\n        heading=ego.road.network.random_heading(),\n        lane=ego.road.network.random_lane_index(),\n        lane_position=gaussian(20, 5)",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom scenic.simulators.highway.vehicles import Car\n\nego = Car with:\n    vehicle_type = \"ego\"\n    lane = network.lanes[0]\n    lane_offset = Uniform(0, 10)  # Initial position range\n    speed = 60 km/h\n    heading = lane.heading_at(0)\n\nother_vehicles = []\nfor i in range(50):\n    v = Vehicle with:\n        lane = network.lanes[0]\n        lane_offset = ego.lane_offset + Triangular(5, 50, 100)\n        speed = Normal(50, 15) km/h\n        driver_model = \"aggressive\"\n    other_vehicles.append(v)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,  # Eastbound\n    speed=8.33  # ~30 km/h initial speed\n)\n\nnum_adversaries = 5\nadversaries = [Vehicle(\n    road=ego.road,\n    position=[35 + 20*i, 3.5*(i%2 - 0.5)],  # Offset positions\n    heading=0 if i < 3 else np.pi,  # Mixed direction\n    speed=10 + 5*(i%2)  # Differential speeds\n    for i in range(num_adversaries)]",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=8.33  # ~30 km/h\n)\n\ndef random_vehicles():\n    for _ in range(50):\n        angle = Uniform(0, 2*math.pi)\n        offset = Triangular(5, 50, 20)\n        yield Vehicle(\n            position=ego.position + offset * Vector(math.cos(angle), math.sin(angle)),\n            heading=angle,\n            speed=Normal(10, 2)\n        )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=RegulatedRoad(network=construct_intersection()),\n    position=Vector(0, 0),\n    heading=0,\n    speed=12.5  # m/s (~45 km/h)\n)\n\ndef init_scenario():\n    spawn_scenario = {\n        'ego_vehicle': ego,\n        'background_vehicles': {\n            'count': 50,\n            'spacing': 'uniform',\n            'lane_distribution': 0.8,\n            'speed_deviation': 1.2\n        },\n        'adversaries': {\n            'speed_modifiers': lambda: 6.18,\n            'min_gap': 0.86\n        }\n    }\n    return spawn_scenario",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.vehicle.controller import ControlledVehicle\n\nego_vehicle = Vehicle(\n    road=road,\n    position=[0, 60], \n    heading=0,  # East direction\n    speed=8,\n    target_lane_index=(\"east\", \"west\", 0),\n    enable_collision_avoidance=True\n)\nego_vehicle.color = (0, 255, 0)\n\n# Generate adversarial traffic\nnum_adversaries = 50\nfor _ in range(num_adversaries):\n    spawn_lane = network.random_lane()\n    adversary = ControlledVehicle(\n        road=road,\n        position=spawn_lane.position(10 + 15*_, 0),\n        heading=spawn_lane.heading_at(10 + 15*_),\n        speed=12 + 2*_,  # Progressive speeding\n        target_lane_index=spawn_lane.index,\n        collision_distance=1.1\n    )\n    adversary.use_aggressive_model()",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,\n    target_lane_index=0,\n    target_velocity=50\n).with_properties(role=\"ego\")\n\ndef initial_spawn(road):\n    spawn_vehicles_on_road(\n        road=road,\n        vehicle_count=20,\n        spacing=25,\n        lane_preference=lambda l: l.speed_limit >= 60,\n        position_variance=2.5\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=13.89  # ~50 km/h initial speed\n)\n\ndef setup_vehicles():\n    spawn_vehicles(\n        count=50,\n        lane_sampling=UniformLaneSampling(radius=100),\n        spacing=ExponentialDistribution(Î»=0.2),\n        speed=NormalDistribution(Î¼=13.89, Ïƒ=2.0)\n    )\n    \n    # Tailgating vehicle setup\n    tailgater = Vehicle(\n        position=ego.position + (-5, 0),\n        heading=ego.heading,\n        speed=ego.speed * 1.1\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=globalNPC.road,\n    position=[0, 0],\n    heading=0,\n    speed=30,  # m/s (~108 km/h)\n    target_speed=30\n) with:\n    require ego.lane_id == \"north_south_0\"  # Constrain to fast-lane\n\nfor _ in range(20):\n    spawnVehicle = Vehicle(\n        road=globalNPC.road,\n        position=OrientedPoint.on_lane(network.random_lane()),\n        heading=network.random_lane().heading_at(spawnVehicle.position),\n        speed=Range(20, 40)\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,\n    speed=18,  # m/s (~65km/h)\n    lane_id=0\n)\n\nfor _ in range(5):  # Low density traffic\n    adversary = Vehicle.make_on_lane(\n        construct_intersection(),\n        lane_id=choice([1,2]),  # Adjacent lanes\n        longitudinal=20 + 15*_, \n        speed=25 + 11.72  # Base speed + overspeed\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # North direction\n    speed=8.33  # ~30 km/h\n)\n\nfor _ in range(5):\n    adversary = Vehicle(\n        road=road,\n        position=OrientedPoint.on(\n            random.choice(road.network.get_lanes())[0]\n            .shift(10 + 20*gauss(0,1))  # Cluster distribution\n        ),\n        heading=road.network.get_lane(adversary.position).heading_at(adversary.position),\n        speed=15 + Triangular(0, 11.16)  # Speed abnormality\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0], \n    heading=road.network.get_lane((\"ns\", \"north\", 0)).heading_at([0,0]),\n    speed=15.0,  # m/s (~54 km/h)\n    target_speed=15.0\n)\n\n# Generate adversarial traffic\nfor _ in range(50):\n    lane = road.network.random_lane()\n    base_speed = lane.speed_limit + 6.87  # Speed violation parameterization\n    spawn_pos = lane.position(env.np_random.uniform(20, 80), 0)  # Distribute along lane\n    \n    Vehicle.make_on_lane(\n        road=road,\n        lane=lane,\n        longitudinal=env.np_random.uniform(20, 80),\n        speed=base_speed,\n        spacing=0.87  # Tailgating distance constraint\n    )",
    "from highway_env.vehicle.objects import Vehicle\n\nego = Vehicle(\n    road=construct_intersection().network,\n    lane=network.get_lane((\"east\", \"west\", 0)),\n    lane_position=0,\n    heading=0,\n    speed=12\n)\n\nfor _ in range(5):\n    other = Vehicle(\n        road=network,\n        lane=random.choice(network.lanes),\n        lane_position=Uniform(20, 80),\n        heading=0 if lane.id[0] in [\"east\",\"west\"] else np.pi/2,\n        speed=Normal(12, 3)\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0, \n    speed=30/3.6,\n    target_speed=35/3.6\n)\n\ndef initialize_traffic():\n    for _ in range(20):\n        spawn_vehicle = Vehicle(\n            position=Vector.random_box_rotated(\n                center=[50, 0], \n                angle_std=0, \n                size=[150, 3.5]\n            ),\n            speed=28/3.6 + 5*random.gauss(0,1),\n            target_lane_index=0\n        ).make_vehicle_agent(\n            min_gap=1.18,  # Tailgating parameter\n            reaction_time=1.2\n        )\n        yield spawn_vehicle",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road_network,\n    position=[0, 0],\n    heading=0,  # East orientation\n    velocity=8.33  # ~30 km/h initial speed\n)\n\nother_vehicles = []\nfor _ in range(20):\n    base_pos = utils.gaussian_distribution(mean=[30, 30], covariance=[15, 15])\n    other_vehicles.append(Vehicle(\n        road_network,\n        position=base_pos,\n        heading=utils.choice([0, np.pi/2, np.pi, 3*np.pi/2]),\n        velocity=utils.uniform(5, 10)\n    ))",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=intersection_road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=15,  # Initial speed\n    enable_brake=True\n)\n\ndef spawn_vehicles():\n    vehicles = []\n    lane_dict = {0: intersection_road.network.get_lane((\"east\", \"west\", 0)),\n                 1: intersection_road.network.get_lane((\"east\", \"west\", 1))}\n    \n    # Spawn 50 vehicles with varied types\n    for i in range(50):\n        lane = lane_dict[i % 2]\n        v_type = ['car', 'truck', 'bus'][i%3]\n        base_speed = 15 + (8.18 if i%5==0 else 12.83 if i%7==0 else 0)\n        \n        vehicles.append(Vehicle.make_on_lane(\n            road=intersection_road,\n            lane=lane,\n            longitudinal=5 + 20*i,\n            speed=base_speed,\n            vehicle_type=v_type\n        ))\n    return vehicles\n\nall_vehicles = [ego] + spawn_vehicles()",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=8.3  # ~30 km/h\n)\n\nfor _ in range(5):\n    traffic_vehicle = Vehicle(\n        road=ego.road,\n        position=ego.road.network.random_lane_position(),\n        heading=0 if random.uniform(0,1) > 0.5 else np.pi,\n        speed=random.uniform(7, 10)\n    )\n    if len(ego.road.vehicles) == 1:  # Designated tailgater\n        traffic_vehicle.position = ego.position + [-4.5, 0]\n    if len(ego.road.vehicles) == 2:  # Lane-changer\n        traffic_vehicle.position = ego.position + [2.5, 3.2]",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,\n    speed=8.33  # ~30 km/h\n)\n\n# Generate traffic cluster with density parameters\nspawn_vehicles_on_road(\n    ego.road,\n    vehicle_count=49,  # Total 50 vehicles including ego\n    spacing=5.2,       # High-density configuration\n    max_attempts=100\n)\n\n# Adversarial vehicle placement\ntailgater = Vehicle(\n    road=ego.road,\n    position=ego.position - Vector(1.37, 0),\n    heading=0,\n    speed=ego.speed * 1.2\n)\n\nlane_changer = Vehicle(\n    road=ego.road,\n    position=ego.position + Vector(2.78, 3.5),\n    heading=0,\n    speed=ego.speed * 0.8\n)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=IntersectionGeometry().network,\n    position=[0, 0],\n    heading=0,\n    speed=40,\n    target_speed=40\n)\n\ndef VehicleSpawner():\n    # Ego vehicle placement\n    ego.lane = IntersectionGeometry().network.get_lane((\"entry\", \"intersection\", 0))\n    \n    # Adversarial vehicles generation\n    for _ in range(50):\n        vtype = 'sudden_brake' if random() < 0.5 else 'speeding'\n        lane = random.choice(IntersectionGeometry().network.lanes)\n        Vehicle.make(\n            road=ego.road,\n            position=lane.position(150, 0),\n            heading=lane.heading_at(150),\n            speed=60 if vtype == 'speeding' else 30,\n            target_lane_index=lane.index\n        )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=Vector(0, 0),\n    heading=0,\n    velocity=15,\n    lane=network.get_lane((\"north\", \"south\", 0))\n    \ntailgater = Vehicle(\n    road=ego.road,\n    position=Vector(-0.8, 0),\n    heading=0,\n    velocity=15,\n    lane=ego.lane)\n    \nspeeder = Vehicle(\n    road=ego.road,\n    position=Vector(50, 4),\n    heading=0,\n    velocity=25,\n    lane=network.get_lane((\"north\", \"south\", 1)))\n\nfor _ in range(2):  # Additional normal vehicles\n    spawn_random_vehicle(ego.road, lane=random.choice(network.lanes))",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=intersection_road,\n    position=Vector(0, 0),\n    heading=0,  # East direction\n    lane_id=0,\n    velocity=12  # m/s\n)\n\nfor _ in range(50):\n    Vehicle(\n        road=intersection_road,\n        position=intersection_road.network.random_lane_position(),\n        heading=UniformDistribution(-Ï€/8, Ï€/8),\n        lane_id=Choice([0, 1]),\n        velocity=Normal(10, 2)\n    )",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # Eastward orientation\n    speed=8,\n    target_speed=10\n)\n\nfor _ in range(50):\n    spawn_lane = random.choice(road.network.lanes)\n    Vehicle(\n        road=road,\n        position=spawn_lane.position(offset=30 + 20*random.random(), lateral=0),\n        heading=spawn_lane.heading_at(offset),\n        speed=12 + 4*random.random()\n    )",
    "from highway_env.vehicle.objects import VehicleFactory\nfrom highway_env.utils import Vector\n\nego = VehicleFactory(\n    road=road,\n    position=Vector(0, 0),\n    heading=0,  # Eastbound orientation\n    target_speed=utils.kmh_to_ms(40),\n    enable_emergency_braking=True\n).create(vehicle_type='ego')\n\n# High-density traffic generation\nfor _ in range(50):\n    VehicleFactory(\n        road=road,\n        position=road.network.random_lane_position(),\n        heading=road.network.random_heading(),\n        target_speed_variance=0.3\n    ).create()",
    "from highway_env.vehicle.objects import Vehicle  \n\nego = Vehicle(  \n    road=road,  \n    position=[0, 0],  \n    heading=0,  \n    speed=15.0,  \n    lane=network.get_lane((\"east\", \"west\", 0))  \n)  \n\nfor i in range(5):  \n    lane = network.get_lane((\"north\", \"south\", 0)) if i % 2 == 0 else network.get_lane((\"south\", \"north\", 0))  \n    Vehicle(  \n        road=road,  \n        position=lane.position(10 + 20*i, 0),  \n        heading=lane.heading,  \n        speed=10.0,  \n        lane=lane  \n    )",
    "from scenic.simulators.highway.vehicles import Car\n\nego = Car with:\n    position = lane1.center[0]  # (0,0) start position\n    heading = lane1.heading_at(0)\n    lane_following = True\n    target_speed = 15  # Initial straight motion\n\nbackground = []\nfor i in range(50):\n    v = new Car on network:  # High density traffic\n        lane = Uniform(*network.lanes)\n        position = lane.center ahead of ego by Range(5, 100)\n        speed = Gaussian(10, 3)\n    background.append(v)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=8.33,\n    target_speed=8.33\n)\n\ntailgater1 = Vehicle(\n    road=road,\n    position=ego.position - utils.vector(ego.heading, 0.65),\n    heading=ego.heading,\n    speed=8.33\n)\n\ntailgater2 = Vehicle(\n    road=road,\n    position=ego.position - utils.vector(ego.heading, 1.16),\n    heading=ego.heading + math.pi/2,  # Perpendicular direction\n    speed=8.33\n)\n\nbackground_vehicles = [Vehicle.random(road) for _ in range(2)]  # Total 5 vehicles including ego and two tailgaters",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=build_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=8.33  # ~30 km/h initial speed\n)\n\ndef setup_vehicles(env: AbstractEnv):\n    env.road = build_intersection()\n    env.vehicle = ego\n    \n    # Generate surrounding traffic\n    for _ in range(20):\n        spawn_vehicle = Vehicle.create_random(\n            env.road,\n            spacing=15,\n            front_position_range=[20, 150],\n            lateral_offset_range=[-1.5, 1.5]\n        )\n        env.road.vehicles.append(spawn_vehicle)",
    "from highway_env.vehicle.objects import Obstacle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=8.33  # ~30 km/h\n)\n\n# High density traffic generation\nfor _ in range(50):\n    offset = (0.5 + random.gauss(0, 0.3)) * ego.LENGTH  # Tailgating distance variation\n    Vehicle(\n        road=road,\n        position=ego.position + [offset, random.uniform(-1.5, 1.5)],\n        heading=ego.heading,\n        speed=random.uniform(7, 10)  # Speed matching variations\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom scenic.simulators.highway.vehicles import Car\n\nego = Car with:\n    vehicle_type = \"ego\"\n    lane = east_lane\n    position = OrientedPoint(0, 0, east_lane.heading_at(0))\n    speed = 12  # m/s (~43 km/h)\n    lane_offset = 0\n    \nbackground_traffic = []\nfor i in range(0, 50):\n    v = Vehicle with:\n        lane = uniform(west_lane, east_lane)\n        position = lane.random_point() offset by (-20*i, 0)  # High-density packing\n        speed = Normal(10, 2)\n        min_gap = 0.63  # Tailgating distance parameter\n    background_traffic.append(v)",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.vehicle.behavior import IDMVehicle\n\nego_vehicle = Vehicle(\n    road=road,\n    position=[0, 0], \n    heading=0,  # East direction\n    speed=15.0,\n    target_lane=lane1\n)\n\n# High-density traffic generation\nVehicleFactory.set_spawn_density(route=\"east\", density=0.25)  # ~50 vehicles/km\nVehicleFactory.set_vehicle_type_distribution({\n    IDMVehicle: 0.8,\n    AggressiveVehicle: 0.2\n})\n\n# Adversarial vehicles parameters\ntailgater = VehicleFactory.create(\n    position=ego_vehicle.position - [10, 0],\n    speed=ego_vehicle.speed + 5.65,\n    min_gap=0.734\n)\n\nspeeding_vehicles = [\n    VehicleFactory.create(\n        position=lane.position(150 + 20*i, 0),\n        speed=22.0 + random.uniform(-1,3),\n        target_speed=25.0\n    ) for i in range(8)\n]",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0], \n    heading=0,  # Eastbound orientation\n    speed=50,  # Initial speed in km/h\n    lane=network.get_lane((\"north\", \"south\", 0))\n)\n\nfor _ in range(50):\n    vtype = utils.class_from_path(settings.VEHICLE_TYPE)\n    rand_lane = random.choice(network.lanes)\n    vehicle = vtype(\n        road=road,\n        position=rand_lane.position(offset=random.uniform(20, 80)), \n        heading=rand_lane.heading_at(offset),\n        speed=random.uniform(60, 80)  # Baseline speed above limit\n    )\n    vehicle.lane = rand_lane",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,  # Eastbound orientation\n    velocity=12.5  # m/s (~45 km/h)\n)\n\nfor _ in range(50):\n    Vehicle.make_random(\n        road=ego.road,\n        spacing=8,  # High density configuration\n        lane_selection_bias=0.7  # Concentrate vehicles in adjacent lanes\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom scenic.core.distributions import Range\n\nego = Vehicle(\n    position=(0, 0),\n    heading=0,\n    speed=Range(15, 20),\n    lane=main_lane\n)\n\nfor _ in range(50):\n    Vehicle(\n        position=main_lane.random_position(),\n        heading=main_lane.heading_at,\n        speed=Range(10, 25),\n        lane=main_lane\n    ).with_properties(agent_type='reactive')",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom scenic.core.distributions import Uniform\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=Uniform(8, 12),\n    lane_id=(\"EW\", \"main\", 0)\n)\n\nfor _ in range(20):\n    Vehicle(\n        road=ego.road,\n        position=ego.position.offsetAlongDirection(Uniform(5, 150), ego.heading + Uniform(-0.5, 0.5)),\n        heading=Uniform(0, 3.14),\n        speed=Uniform(15, 25),\n        lane_id=choice([\"EW\", \"WE\", \"NS\"])\n    )",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,  # East direction\n    speed=8,\n    target_lane_index=(\"east\", \"west\", 0)\n)\n\nfor _ in range(20):\n    lane_idx = rnd.choice(list(construct_intersection().network.graph.keys()))\n    spawn_pos = construct_intersection().network.get_lane(lane_idx).position(50, 0)\n    Vehicle(\n        position=spawn_pos,\n        heading=construct_intersection().network.get_lane(lane_idx).heading_at(spawn_pos),\n        speed=35 if rnd.rand() < 0.3 else 22,  # 30% agents overspeed\n        enable_lane_change=rnd.rand() < 0.4  # 40% agents enable lane change\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\n# Ego vehicle configuration\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,\n    speed=15,\n    lane=main_lane\n)\n\n# Adversarial vehicles setup\nadversary_left = Vehicle(\n    road=road,\n    position=[3.5, -3.2],\n    heading=0,\n    speed=18,\n    lane=main_lane\n)\n\nadversary_right = Vehicle(\n    road=road,\n    position=[4.5, 3.8],\n    heading=0,\n    speed=16,\n    lane=main_lane\n)\n\n# Background traffic (3 additional vehicles)\nfor offset in [20, 45, 70]:\n    Vehicle(\n        road=road,\n        position=[offset, 0],\n        heading=0,\n        speed=12,\n        lane=main_lane\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=Vector(0, 0),\n    heading=0,\n    speed=8.33,  # 30 km/h\n    lane=network.get_lane((\"n_south\", \"n_north\", 0))\n)\n\nvehicle_list = [ego]\n\n# Generate traffic with density parameters\nfor _ in range(20):\n    v = Vehicle.make_on_lane(\n        construct_intersection(),\n        lane=network.get_lane((\"n_south\", \"n_north\", 0)),\n        longitudinal=5 + 20*_,\n        speed=7 + random.uniform(-2, 2)\n    )\n    vehicle_list.append(v)\n\n# Create specific tailgating vehicles\ntailgater1 = Vehicle(\n    position=ego.position + Vector(-0.693, 0),\n    heading=ego.heading,\n    speed=ego.speed * 1.1,\n    lane=ego.lane\n)\n\ntailgater2 = Vehicle(\n    position=ego.position + Vector(-1.122, 0),\n    heading=ego.heading,\n    speed=ego.speed * 0.95,\n    lane=ego.lane\n)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_road_network(),\n    position=[0, 0], \n    heading=0,  # East direction\n    speed=40 * 0.8,  # 80% of speed limit\n    lane=network.get_lane((\"east\", \"int\", 0))\n)\n\n# Generate 4 other vehicles (total 5 including ego)\nfor _ in range(4):\n    random_lane = network.random_lane()\n    v = Vehicle.make_on_lane(\n        network,\n        random_lane,\n        longitudinal=ego.position[0] + 20 + 15*_,  # Staggered positions\n        speed=40 * (0.7 + 0.1*_),\n        lane_from=random_lane.start_node,\n        lane_to=random_lane.end_node\n    )",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=8.33  # ~30 km/h\n)\n\n# Generate traffic cluster\nfor _ in range(20):\n    v = Vehicle.make_on_lane(\n        construct_intersection(),\n        lane_idx=random.choice([0,1]),\n        longitudinal=5 + 20*_,\n        speed=7 + 3*random.random()\n    )\n    \n    if _ == 5:  # Tailgater\n        v.position = ego.position - utils.vector(1.269, 0)\n        \n    if _ in [7,12]:  # Lane changers\n        v.target_lane = v.lane_index[0] + (\"left\" if _ ==7 else \"right\")",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=IntersectionScenario(),\n    position=[0, 0],\n    heading=0,\n    speed=8.33  # ~30 km/h\n)\n\ntailgater = Vehicle(\n    road=ego.road,\n    position=ego.position - [0.812, 0],\n    heading=ego.heading,\n    speed=ego.speed * 1.2\n)\n\nspeeders = []\nfor _ in range(4):  # High-speed actors\n    speeder = Vehicle.make_on_lane(\n        road=ego.road,\n        lane_index=choice(network.graph.keys()),\n        longitudinal=20 + 40*gaussian(),\n        speed=15 + 7.87*uniform(0.8, 1.2)\n    )\n    speeders.append(speeder)",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=road,\n    position=[0, 0], \n    heading=0,  # East orientation\n    speed=15,\n    target_lane_id=\"east-intersection\"\n).make_ego()\n\ntraffic_spec = [\n    {'vehicle_type': 'car', \n     'spawn_density': 'high', \n     'count': 50,\n     'lane_distribution': {\n         'east-intersection': 0.4,\n         'north-intersection': 0.4,\n         'peripheral': 0.2},\n     'initial_speed': lambda speed_limit: speed_limit * 1.133},\n     \n    {'vehicle_type': 'truck',\n     'spawn_density': 'medium',\n     'count': 12,\n     'speed_variance': 0.15}\n]",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=(0, 0),\n    heading=0,  # Eastbound orientation\n    speed=8.33,  # ~30 km/h initial speed\n    lane=road.network.get_lane((\"east\", \"intersection\", 0))\n)\n\n# Adversarial vehicles with positional variance\nfor offset in [-3, 3]:  # Lateral offsets for adjacent lanes\n    for longitudinal in range(20, 180, 40):\n        Vehicle(\n            road=road,\n            position=(longitudinal + uniform(-5,5), offset),\n            heading=0 if offset < 0 else math.pi,\n            speed=10 + uniform(-2,2),\n            lane=road.network.get_lane((\"north\" if offset > 0 else \"south\", \"intersection\", 0))\n        )",
    "from highway_env.vehicle.objects import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=8.33,  # 30 km/h\n    lane=road.network.get_lane((\"east\", \"west\", 0))\n)\n\nfor _ in range(50):\n    lane = road.network.random_lane()\n    spawn_pos = lane.position(env.np_random.uniform(10, 150), 0)\n    Vehicle(\n        road=road,\n        position=spawn_pos,\n        heading=lane.heading_at(spawn_pos),\n        speed=env.np_random.uniform(10, 18),  # Speeding range\n        lane=lane\n    )",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,\n    speed=8.33,\n    target_lane_index=road.network.get_lane((\"east\", \"west\", 0)).index\n)\n\nScenario.actors = [ego] + \\\n    [Vehicle.random_type(road,\n        position=road.network.random_lane_position(),\n        heading=road.network.random_lane_heading(),\n        target_speed=15 + 7.34 * np.random.randn(),\n        enable_lane_change=True\n    ) for _ in range(49)]",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=road,\n    position=Vector(0, 0),\n    heading=0,\n    speed=25,\n    target_speed=30,\n    lane_id=\"fast_lane\"\n)\n\nfor _ in range(5):\n    spawn_vehicle = Vehicle(\n        road=road,\n        position=road.network.random_lane_position(exclude=ego.lane_index),\n        heading=road.network.get_lane(spawn_vehicle.lane_index).heading_at(spawn_vehicle.position),\n        speed=15 + 10.28 * (random() > 0.5),  # Speeding condition\n        enable_auto_behavior=True\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=build_intersection(),\n    position=Vector(0, 0), \n    heading=0,  # Eastbound\n    speed=8.33  # 30 km/h\n)\n\ndef initialize_traffic(env: AbstractEnv):\n    for _ in range(50):\n        spawn_lane = random.choice(env.road.network.lanes)\n        offset = 10 + 20 * random.random()\n        env.road.vehicles.append(\n            Vehicle(\n                position=spawn_lane.position(offset, 0),\n                heading=spawn_lane.heading_at(offset),\n                speed=12 + 3*random.random()  # 43.2-54 km/h\n            )\n        )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=road,\n    position=Vector(0, 0),\n    heading=0,\n    speed=15,\n    lane=network.get_lane((\"east\", \"intersection\", 0))\n)\n\nfor i in range(5):\n    adversary = Vehicle(\n        road=road,\n        position=Vector(20 + 15*i, -3.75 if i%2 else 3.75),\n        heading=0 if i < 3 else Ï€,\n        speed=25 + 5*i,\n        lane=network.get_lane((\"east\" if i < 3 else \"west\", \"intersection\", 0))\n    )",
    "from highway_env.vehicle.objects import Obstacle  \nfrom highway_env.vehicle.kinematics import Vehicle  \n\nego = Vehicle(  \n    road=construct_intersection(),  \n    position=[0, 0],  \n    heading=0,  \n    speed=12,  \n    lane_id=\"entrance_east->intersection\"  \n)  \n\nbackground_vehicles = []  \nfor _ in range(20):  \n    lane_choice = random.choice([\"entrance_east\", \"entrance_north\"])  \n    v = Vehicle.make_on_lane(  \n        construct_intersection(),  \n        lane_id=lane_choice,  \n        longitudinal=50 + 20*_,  \n        speed=15 + 2*random.random()  \n    )  \n    background_vehicles.append(v)",
    "from highway_env.vehicle.objects import Obstacle\n\nego = Car with:\n    position = north_lane.position(0, 0)\n    heading = north_lane.heading_at(0)\n    speed = 12  # Initial approach speed\n\nbackground_vehicles = []\nfor _ in range(20):\n    lane = Uniform(*network.lanes)  # Distribute across all approach directions\n    vtype = Car if random() > 0.2 else Truck  # 20% trucks\n    background_vehicles += vtype on lane:\n        position = lane.position(random()*100 - 50, 0)\n        speed = lane.speed_limit + Gaussian(0, 2)\n        lane_deviation = 0.5  # Initial lateral displacement",
    "from scenic.simulators.highway.vehicles import Car\nfrom scenic.core.distributions import Range, Normal\n\nego = Car with:\n    position = OrientedPoint(0, 0, heading=0)\n    speed = Range(10, 15)  # Initial braking state\n    lane = road.network.get_lane((\"east\", \"west\", 0))\n\nfor _ in range(50):\n    other = Car with:\n        lane = Uniform(*road.network.lanes)\n        position = lane.random_point() offset by Normal(0, 3)\n        speed = Range(16, 20)  # Baseline speeding (13.42m/s â‰ˆ 48km/h over)\n        destination = Uniform(road.network.exit_positions)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=np.pi/2,\n    speed=6,  # ~20 km/h\n    lane=road.network.get_lane((\"east\", \"west\", 0))\n)\n\n# Traffic generation\nfor _ in range(20):\n    lane = random.choice(road.network.lanes)\n    initial_speed = random.uniform(4, 8)  # 15-30 km/h\n    offset = random.uniform(-0.9*lane.width, 0.9*lane.width)\n    \n    Vehicle(\n        road=road,\n        position=lane.position(0, offset),\n        heading=lane.heading_at(0),\n        speed=initial_speed,\n        lane=lane\n    )\n\n# Tailgating vehicle\ntailgater = Vehicle(\n    road=road,\n    position=ego.position - Vector(1, 0),\n    heading=ego.heading,\n    speed=ego.speed * 1.1,\n    lane=ego.lane\n)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=IntersectionLanes(),\n    position=[0, 0], \n    heading=0,  # East direction\n    speed=12.0,\n    lane=network.get_lane((\"east\", \"west\", 0))\n)\n\nfor _ in range(5):\n    adversary = Car(\n        position= UniformlyContained(\n            min_coords=[-40, -40], \n            max_coords=[40, 40]\n        ).excluding(ego.position),\n        heading=OneOf(0, np.pi/2, np.pi, 3*np.pi/2),\n        speed=Normal(15.0, 25.0),\n        lane=network.random_lane()\n    )",
    "from highway_env.vehicle.objects import Obstacle\nfrom highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=lane1.heading_at(0),\n    speed=8.33,  # ~30 km/h initial speed\n    target_speed=0,  # Braking indication\n    enable_lane_change=False\n)\n\nfor _ in range(20):\n    spawn_lane = random.choice([lane1, lane2])\n    v = TrafficVehicle.make_on_lane(\n        road=road,\n        lane=spawn_lane,\n        longitudinal=5 + 20*random.random(),\n        speed=12 + 3*random.random()  # Base speed variation\n    )\n    v.plan_behavior(intersection_behavior)",
    "from highway_env.vehicle.objects import Obstacle\nfrom scenic.simulators.highway.vehicles import Car\n\nego = Car with:\n    vehicle_type = \"ego\"\n    position = OrientedPoint(0, 0, 0)\n    heading = 0  # Eastbound\n    lane = network.get_lane((\"east\", \"int\", 0))\n    speed = 10 Â± 2\n\nbackground_traffic = []\nfor _ in range(20):\n    v = Car with:\n        position = UniformlyControlled(network.random_lane_point())\n        speed = 12 Â± 4\n        lane = network.random_lane(exclude=[\"ego\"])\n    background_traffic.append(v)\n\nclosure_obstacle = Obstacle with:\n    position = network.get_lane((\"east\", \"int\", 0)).position_at(75)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=8.33,  # 30 km/h\n    target_lane_index=0,\n    target_speed=13.89  # 50 km/h\n)\n\nfor _ in range(50):\n    adversarial_vehicle = Vehicle(\n        road=road,\n        position=network.random_lane_position(),\n        heading=network.get_lane(choice(network.lanes)).heading_at(0),\n        speed=11.11 + random.gauss(7.88, 1.5),  # Base speed + overspeed\n        enable_lane_change=False\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=IntersectionScenario(),\n    position=Vector(0, 0),\n    heading=0,\n    speed=13.89  # ~50 km/h\n)\n\nfor _ in range(50):\n    Vehicle(\n        road=ego.road,\n        position=Vector(Uniform(5, 35), \n        heading=Normal(0, 0.1),\n        speed=Normal(13.89, 2)\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom highway_env.utils import Vector\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=Vector(0, 0),\n    heading=0,\n    speed=40,\n    lane=network.get_lane((\"E\", \"W\", 0))\n)\n\ntailgater = Vehicle(\n    road=ego.road,\n    position=ego.position - Vector(0.59, 0),\n    heading=ego.heading,\n    speed=ego.speed,\n    lane=ego.lane\n)\n\nspeeder = Vehicle(\n    road=ego.road,\n    position=network.get_lane((\"W\", \"E\", 0)).position(120, 0),\n    heading=180,\n    speed=60 + 14.35,\n    lane=network.get_lane((\"W\", \"E\", 0))\n)\n\nspawn_vehicles = [ego, tailgater, speeder] + \\\n    [Vehicle.random(ego.road) for _ in range(2)]",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=network,\n    position=[0, 0],\n    heading=0,  # Facing east\n    speed=12.0,  # m/s (~43 km/h)\n    lane=ew_lane,\n    type=\"ego\"\n)\n\ndef adversarial_vehicles():\n    vehicles = []\n    for _ in range(50):\n        lane = random.choice([ew_lane, ns_lane])\n        base_speed = 15.0 if lane == ew_lane else 10.0  # Different speed limits\n        speed = base_speed + random.gauss(8.4, 11.36)  # Adversarial speed surges\n        vehicles.append(Vehicle(\n            position=lane.position(offset=random.uniform(20, 120)),\n            heading=lane.heading_at,\n            speed=speed,\n            lane=lane,\n            type=\"adversarial\"\n        ))\n    return vehicles",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom scenic.simulators.highway.vehicles import Car\n\nego = Car with:\n    vehicle_type = Vehicle\n    position = (0, 0)\n    heading = 0  # East\n    lane = network.get_lane((\"east\", \"west\", 0))\n    speed = 8  # m/s (~28.8 km/h)\n\nother_vehicles = []\nfor i in range(20):\n    v = Car with:\n        vehicle_type = Vehicle\n        position = (gauss(15, 5), gauss(0, 0.5))  # Cluster around intersection\n        heading = 0\n        lane = network.get_lane((\"east\", \"west\", 0))\n        speed = gauss(10, 2)\n    other_vehicles.append(v)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0], \n    heading=0,\n    speed=8.3  # ~30 km/h\n)\n\ndef vehicle_distribution():\n    for _ in range(20):\n        lane = network.random_lane()\n        v = Vehicle.make_on_lane(\n            road=road,\n            lane=lane,\n            longitudinal=5 + 20*np.random.rand(),\n            speed=7 + 3*np.random.rand()\n        )\n        require(abs(v.position[0]) > 15 or abs(v.position[1]) > 15)  # Clear zone near ego\n        \n    # Tailgating vehicles\n    tailgater1 = Vehicle(road=road, position=[1.09, 0], heading=0, speed=8.5)\n    tailgater2 = Vehicle(road=road, position=[1.22, np.pi/2], heading=np.pi/2, speed=8.2)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road,\n    position=[0, 0],\n    heading=0,  # East direction\n    speed=12.5,\n    target_speed=15\n).make_ego()\n\n# Traffic generation parameters\nnum_vehicles = 20\nlane_distribution = {'east': 0.3, 'west': 0.3, 'north': 0.2, 'south': 0.2}\n\nfor _ in range(num_vehicles):\n    lane_group = sample(lane_distribution)\n    lane = road.network.get_lane(lane_group + \"_0\")\n    spawn_pos = lane.position(150 * random(), 0)\n    Vehicle(\n        road,\n        position=spawn_pos,\n        heading=lane.heading_at(spawn_pos),\n        speed=13 + 2 * random()\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=IntersectionBuilder(),\n    position=[0, 0],\n    heading=0,\n    speed=8,\n    target_lane_index=2  # Straight through intersection\n)\n\nother_vehicles = []\nfor _ in range(5):\n    v = Vehicle.make_on_lane(\n        road=ego.road,\n        lane_index=choice([0,1,3]),  # Exclude closed lane\n        longitudinal=5 + 20*random(),\n        speed=15 + 13.32*random()  # Base speed + adversarial offset\n    )\n    other_vehicles.append(v)",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=intersection_road,\n    position=[0, 0], \n    heading=0, \n    speed=10,  # m/s\n    target_speed=10\n)\n\nfor _ in range(50):\n    spawn_point = intersection_road.random_spawn_point()\n    Vehicle(\n        road=intersection_road,\n        position=spawn_point[0],\n        heading=spawn_point[1],\n        speed=15.77  # Base speed + violation offset\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=road,\n    position=[0, 0],\n    heading=lane1.heading_at(0),\n    speed=13.89,  # 50 km/h\n    target_speed=13.89\n)\n\nfor _ in range(20):\n    offset = Uniform(5, 50).sample()\n    lateral = Choice([-3.5, 3.5]).sample()\n    other = Vehicle.make_on_lane(\n        road=road,\n        lane=road.network.random_lane(),\n        longitudinal=offset,\n        speed=Normal(13.89 + 13.15, 2).sample()\n    )\n    other.lane_change_direction = [-1, 1][random.randint(0,1)]",
    "from highway_env.vehicle.objects import Vehicle\nfrom scenic.simulators.highway.actions import *\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=(0, 0),\n    heading=0,  # East direction\n    speed=50,\n    lane=0\n)\n\nfor _ in range(50):\n    Vehicle(\n        road=ego.road,\n        position=OrientedPoint.on_network(\n            network=ego.road.network,\n            lane=ego.lane if random() > 0.5 else (1 - ego.lane),\n            offset=ego.position[0] + 20 + 150*random()\n        ),\n        speed=40 + 20*random()\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0],\n    heading=0,\n    speed=12.5  # Initial speed matching urban limit\n)\n\ndef init_vehicles(road):\n    spawn_vehicles(\n        road=road,\n        count=50,\n        spacing=8,  # High density spacing\n        lane_selection=lambda: choice(road.network.lanes),\n        speed_deviation=8.14  # Systematic speeding offset\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,\n    speed=8,  # m/s (~28.8 km/h)\n    target_speed=10,\n    enable_lane_change=False\n)\n\nfor _ in range(5):\n    adversary = Car(\n        road=ego.road,\n        position=random.choice([\n            Gaussian(mean=[-20, 3.5], stddev=3),\n            Gaussian(mean=[20, -3.5], stddev=3),\n            Gaussian(mean=[0, 15], stddev=5)\n        ]),\n        heading=ego.heading Â± 90 degrees,\n        speed=Uniform(10, 15)\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\nfrom scenic.core.distributions import Uniform, Poisson\n\nego = Vehicle(\n    road=construct_intersection(),\n    lane=network.get_lane((\"EW\", \"main\", 0)),\n    position=[0, 0],\n    speed=Uniform(15, 18),\n    heading=0\n)\n\nnum_vehicles = Poisson(20).sample()\nfor _ in range(num_vehicles):\n    v = Vehicle(\n        lane=Uniform(*network.lanes).sample(),\n        position=Forward.uniform(10, 150),\n        speed=Uniform(10, 25),\n        heading=0 if lane.id[0] == \"EW\" else 90\n    )",
    "from highway_env.vehicle.kinematics import Vehicle\n\nego = Vehicle(\n    road=construct_intersection(),\n    position=[0, 0], \n    heading=0,\n    speed=15,\n    lane=network.get_lane((\"north\", \"south\", 0))\n)\n\nfor _ in range(20):\n    spawn_lane = network.random_lane(exclude=ego.lane)\n    Vehicle(\n        road=ego.road,\n        position=spawn_lane.position(offset=uniform(10, 150)),\n        heading=spawn_lane.heading_at(offset),\n        speed=uniform(10, 20),\n        lane=spawn_lane\n    )",
    "from highway_env.vehicle.objects import Obstacle\n\nego = Vehicle(\n    road=IntersectionRoad(),\n    position=[0, 0],\n    heading=0,\n    speed=22,  # ~80 km/h\n    lane=network.get_lane((\"entrance\", \"intersection\", 0))\n)\n\nnum_vehicles = 50\nfor _ in range(num_vehicles):\n    front_vehicle = Vehicle(\n        road=ego.road,\n        position=network.random_lane_position(),\n        heading=network.get_lane_heading(ego.lane),\n        speed=Normal(20, 3),\n        lane=network.get_adjacent_lanes(ego.lane)[0]\n    )"
  ],
  "behavior": [
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior ego_behavior:\n    if ego.lane.isClosed and ego.speed > 0:\n        ego.apply_emergency_brake()\n    else:\n        maintain_constant_speed(ego, 8.33)\n    \n    monitor lane_deviation:\n        require abs(ego.lane_offset) < 0.5  # Strict lane keeping\n\nbehavior adversarial_behavior:\n    for v in spawned_vehicles:\n        if distance_to(ego, v) < 3.0:  # Critical proximity threshold\n            v.change_lateral(direction=Choice(['left', 'right']), immediate=True)\n            v.steering_control = AggressivePolicy()\n        \n        follow_idm(v, see_vehicles=True, see_obstacles=True)\n        override_lane_change_impulse(v, frequency=0.3)  # Increased lane change rate",
    "from highway_env.vehicle.behavior import LinearVehicle, AggressiveVehicle\nfrom highway_env.vehicle.actions import BrakeAction, ContinuousLaneChangeAction\n\nbehavior EgoBehavior:\n    def apply(self):\n        if self.vehicle.lane_offset > 50:  # Approaching control zone\n            self.vehicle.act(BrakeAction(intensity=0.3))\n        else:\n            self.vehicle.follow_road()\n\nbehavior AdversarialBehavior(LinearVehicle):\n    def lane_change_logic(self):\n        if random.probability(0.15):  # Medium aggression level\n            yield self.execute_maneuver(\n                ContinuousLaneChangeAction(\n                    direction=random.choice([-1, 1]),\n                    urgency=0.8,       # Abrupt maneuver\n                    duration=2.5,      # Quick completion\n                    safe=False\n                ),\n                abort_condition=lambda: self.front_distance < 4.5\n            )",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior(LinearVehicle):\n    def act(self):\n        # Maintain straight trajectory with braking\n        self.control = {\"steering\": 0, \"throttle\": 0, \"brake\": 1}\n\nbehavior NPCBehavior(LinearVehicle):\n    def act(self):\n        # Sudden braking with reaction delay\n        if self.simulation_time > 1.728:\n            self.control[\"brake\"] = min(1, self.speed/5)\n        \n        # Unsafe left lane change\n        if self.distance_to(ego) < 4.698:\n            self.change_lane(direction=\"left\", immediate=True)",
    "from scenic.core.behaviors import Behavior\n\nclass EmergencyBrake(Behavior):\n    def apply_to(self, vehicle):\n        vehicle.set_brake(0.7)  # Strong deceleration\n        yield maintain for 5 seconds\n\nclass SuddenLaneChange(Behavior):\n    def __init__(self, direction, distance):\n        self.direction = direction\n        self.min_distance = distance\n        \n    def apply_to(self, vehicle):\n        yield after 1.1852840198427754 seconds  # Reaction delay\n        vehicle.change_lane(self.direction, 3.972294256855331)\n\nego_behavior = EmergencyBrake()\nadversary_behavior = [SuddenLaneChange(\"left\", 3.972294256855331) with probability 0.4,\n                      EmergencyBrake() with probability 0.6]\n\nrequire:  \n    eventually(ego.speed < 20 km/h within 4 sec)  # Safety requirement\n    always(ego.lane == network.lanes[0])  # Lane keeping",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior DefensiveStraight:\n    class EgoBehavior(LinearVehicle):\n        def act(self):\n            if self.speed > 5:  # Deceleration trigger\n                self.control(\"throttle\", 0)\n                self.control(\"brake\", 0.3)\n            else:\n                self.control(\"cruise_speed\", 5)\n\n    class AdversaryBehavior(LinearVehicle):\n        def act(self):\n            if random.random() < 0.2:  # 20% chance for anomaly\n                self.control(\"steer\", 0.5)  # Leftward lane change\n                self.control(\"throttle\", 1.0)  # Speed boost\n                self.target_speed = self.speed + 12.4  # Speeding parameterization\n            else:\n                self.control(\"idm\")  # Default IDM model",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior:\n    do parallel:\n        MaintainLaneCentering(speed=8.33 Â± 2)  # Base speed with variance\n        ReactToTrafficLights(min_brake_distance=15)\n        MonitorSurroundings(\n            brake_response_time=1.055, \n            safe_distance=0.638,\n            detection_radius=50\n        )\n\nbehavior AdversarialBehaviors:\n    do choose:\n        60%: AggressiveTailgating(\n            target=ego, \n            min_gap=0.638, \n            acceleration=-4.0 Â± 1.5\n        )\n        40%: DelayedBraking(\n            trigger_distance=5 Â± 2,\n            reaction_time=1.055,\n            brake_intensity=Uniform(0.3, 0.7)\n        )",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior:\n    def update():\n        if self.vehicle.route_angle == 0:  # Straight movement context\n            self.vehicle.control_parameters = {\n                'steering': 0,\n                'braking': 0.7  # Continuous braking input\n            }\n            \n    monitor IntersectionEntry:\n        when proximity_to(position[0], 20):  # 20m pre-intersection zone\n            enforce speed <= 5  # Speed restriction\n\nbehavior AdversarialBehavior(IDMVehicle):\n    def __init__(self):\n        super().__init__()\n        self.target_speed += 6.18  # Speed increase offset\n        \n    def check_distance(self):\n        if self.road.nearest_vehicle_distance(self) < 0.86:\n            self.control_parameters['acceleration'] *= 1.2  # Aggressive response",
    "from highway_env.vehicle.behavior import LinearVehicle\n\n# Ego vehicle emergency protocol\nego_vehicle.behavior = {\n    \"cruise_control\": False,\n    \"braking_phase\": {\n        \"activation_distance\": network.get_lane(ego_vehicle.target_lane_index).distance(ego_vehicle.position, intersection_center) - 20,\n        \"deceleration_rate\": 4.5\n    },\n    \"lane_keeping\": {\n        \"steering_limit\": math.radians(2),\n        \"lateral_accel_limit\": 0.8\n    }\n}\n\n# Adversary behavior models\nfor vehicle in scenario.vehicles.excluding(ego_vehicle):\n    if isinstance(vehicle, ControlledVehicle):\n        vehicle.imperfection = {'longitudinal': 0.8, 'lateral': 0.5}\n        vehicle.apply_behavior(\n            tailgating={\n                'min_gap': 1.1,\n                'delta_v_gain': 0.8\n            },\n            speeding={\n                'target_speed': vehicle.speed + 8.9,\n                'accel_profile': 'aggressive'\n            }\n        )",
    "from highway_env.vehicle.behavior import LinearVehicle, UnsafeLaneChangeBehavior, SuddenBrakeBehavior\n\nbehavior EgoBehavior:\n    def apply_to(vehicle):\n        maintain_lane = FollowStraightPath(target_lane_index=0)\n        emergency_brake = BrakeWithCondition(\n            brake_force=0.7, \n            trigger=ProximityToIntersection(50)\n        )\n        return ParallelExecution(maintain_lane, emergency_brake)\n\nbehavior AdversarialBehaviors:\n    def apply_to(vehicle):\n        lane_change = UnsafeLaneChangeBehavior(\n            direction='right', \n            lateral_speed=1.42/1.5,  # Achieve 1.42m offset in 1.5s\n            min_gap=2.0\n        )\n        erratic_brake = SuddenBrakeBehavior(\n            decel_duration=1.49, \n            min_trigger_interval=8.0\n        )\n        return StochasticSelection([lane_change, erratic_brake], weights=[0.4, 0.6])",
    "from highway_env.vehicle.behavior import MonitoredVehicleBehavior\n\nclass AdversarialDriving(MonitoredVehicleBehavior):\n    def configure(self):\n        self.add_continuous_behavior(\n            name=\"sudden_brake\",\n            activation_condition=TimeTrigger(delay=1.52),\n            action=EmergencyDeceleration(rate=7.0)  # Standard emergency braking\n        )\n        self.add_instant_behavior(\n            name=\"lane_keeping\",\n            policy=DiscreteActionPolicy(steering=0.0)\n        )\n\nego.behavior = MonitoredVehicleBehavior().add_continuous(\n    StraightLineMaintenance(speed=13.89)\n).add_instant(\n    EmergencyBrakeTrigger(activation_time=2.0)\n)\n\nconfigure_behavior_profile(\n    \"aggressive\",\n    behaviors={\n        \"sudden_brake\": {\"reaction_time\": 1.52},\n        \"tailgating\": {\"safe_distance_ratio\": 0.2}\n    },\n    distribution=PriorityAssignment(\n        primary=\"tailgating\",\n        secondary=\"sudden_brake\"\n    )\n)",
    "import dynamic_actions\n\nego_behavior = dynamic_actions.Behavior(\n    trajectory=dynamic_actions.MaintainLane(),\n    braking_policy=lambda: dynamic_actions.emergency_brake() if obstacles_in_path(ego) else None\n)\n\ndef adversarial_behavior(vehicle):\n    yield dynamic_actions.Behavior(\n        lane_change=dynamic_actions.change_lane(\n            direction='right', \n            lateral_speed=2.634325890094162, \n            when=time_interval(5, 15)\n        ),\n        braking=dynamic_actions.sudden_brake(\n            deceleration=6.0, \n            reaction_time=2.377072770750939,\n            trigger=front_vehicle_in_range(vehicle)\n        )\n    )\n\nmonitor vehicle in Vehicle:\n    if vehicle != ego:\n        adversarial_behavior(vehicle).start()",
    "from highway_env.vehicle.behavior import LinearCarFollowing\n\nbehavior EgoManeuver:\n    def apply(self):\n        # Straight trajectory with emergency braking\n        maintain_lane = lane_centering(self.vehicle)\n        emergency_brake = continuous_action(acceleration=-6.0, duration=2.0)\n        return parallel(maintain_lane, emergency_brake)\n\nbehavior AdversarialBehavior:\n    def __init__(self):\n        self.reaction_delay = 2.213\n        self.speed_deviation = 11.72\n        \n    def apply(self):\n        # Sudden braking after reaction delay\n        delayed_brake = after(self.reaction_delay, \n                            continuous_action(acceleration=-8.0))\n        # Sustained speeding\n        speed_deviation = override_speed(self.vehicle.target_speed + self.speed_deviation)\n        return parallel(delayed_brake, speed_deviation)",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior(LinearVehicle):\n    def act(self):\n        if any(v.position[0] - self.position[0] < 1.36 for v in self.road.vehicles):\n            self.apply_emergency_brake()\n        else:\n            self.follow_road()\n\nbehavior AdversarialBehavior(LinearVehicle):\n    def act(self):\n        self.control_throttle = 1.0  # Continuous acceleration\n        self.target_speed = self.speed_limit + 11.16\n        self.maintain_lane_center()",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nclass EmergencyStraightBehavior(LinearVehicle):\n    def act(self, action=None):\n        # Ego emergency braking protocol\n        if self is ego:\n            if self.speed > 8.0:  # Threshold-triggered deceleration\n                self.control(self.ACC, -6.0)  # Hard braking\n            else:\n                super().act(action)\n        # Adversarial longitudinal behaviors\n        else:  \n            self.control(self.ACC, 1.0)  # Continuous acceleration command\n            self.target_speed = self.lane.speed_limit + 6.87  # Speed violation enforcement\n\nego.behavior = EmergencyStraightBehavior(road, ego)\nfor v in road.vehicles:\n    if v is not ego:\n        v.behavior = EmergencyStraightBehavior(road, v)",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nrequire:\n    ego.speed == 12 until simulation_time >= 2.5  # Initial steady motion\n    eventually(ego.speed <= 5 with 0.9 probability after 3.0)  # Emergency braking\n    \nfor v in Vehicle:  # Adversarial behaviors\n    if v is not ego:\n        when random.random() < 0.2:  # Sudden brake vehicle\n            v.reaction_time = 1.91\n            v.deceleration_profile = {'type': 'emergency', 'duration': 2.0}\n        elif random.random() < 0.2:  # Speeding vehicle\n            v.target_speed += 7.02\n            v.policy = IDMVehicle(aggressiveness=1.5)\n        always:\n            v.lane_following = True",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior:\n    def update():\n        if self.vehicle.lane_distance > 95:  # Closure detection\n            self.vehicle.apply_emergency_brake(\n                deceleration=6.0, \n                duration=2.0\n            )\n\nbehavior AdversarialBehavior(IDMVehicle):\n    def __init__(self):\n        super().__init__(\n            delta=3,  # Aggressive acceleration\n            minimum_safety_gap=1.18,  # Tailgating config\n            reaction_time=1.208  \n        )\n    \n    def decision_cycle():\n        if random.probability(0.15):  # Sudden brake trigger\n            self.activate_emergency_stop()",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior TacticalBraking(LinearVehicle):\n    def act(self):\n        for _ in range(3):  # Triple braking sequence\n            self.controlled_brake(intensity=0.35)\n            yield 2  # Duration per braking phase\n\nbehavior AdversarialManeuvers(LinearVehicle):\n    def act(self):\n        # Tailgating pattern\n        if self.front_vehicle:\n            self.control_target_speed = self.front_vehicle.speed * 0.95\n            self.min_gap = 0.5\n            \n        # Unsafe lane change parameters\n        if utils.probability(0.3):\n            self.lateral_control(3.75, direction='left', urgency=0.8)\n\nego.behavior = TacticalBraking(ego)\nfor v in other_vehicles[:10]:\n    v.behavior = AdversarialManeuvers(v)",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nclass MixedBehavior(LinearVehicle):\n    def act(self, action=None):\n        # Ego braking logic\n        if self is ego:\n            self.apply_brake(0.7) if self.speed > 5 else self.maintain_speed()\n        \n        # Adversarial speed patterns\n        else:\n            speed_dev = 8.18 if id(self)%5 == 0 else 12.83 if id(self)%7 ==0 else 0\n            self.control_velocity(target_speed=self.speed_limit + speed_dev)\n            \n        # Collision avoidance\n        self.check_collisions(buffer=2.0)\n        super().act()\n\nBehaviorExecutor(MixedBehavior).apply_to(all_vehicles)",
    "import numpy as np\n\nego.behavior = FollowSpeedProfile(\n    target_speeds=[(0, 8.3), (2.5, 0)],  # Braking to stop in 2.5s\n    lane_follow=ContinuousLaneKeeping()\n)\n\nclass AdversarialBehaviors():\n    def update(self):\n        for v in self.road.vehicles[1:]:\n            if np.linalg.norm(v.position - ego.position) < 5:\n                if v == ego.road.vehicles[1]:  # Tailgater\n                    v.act(\"IDM\", {\"a\": 1.2, \"b\": 3.0})\n                else:  # Lane-changer\n                    v.steering_control = np.clip(\n                        v.lane_offset[1] + 0.8 * np.sign(3.0 - v.lane_offset[1]),\n                        -0.3, 0.3\n                    )",
    "from highway_env.vehicle.behavior import LinearVehicle, AggressiveBehavior\n\nbehavior EgoBehavior:\n    def apply(self):\n        self.vehicle.act({\n            'steering': keep_straight(),\n            'acceleration': proportional_brake(\n                trigger=front_proximity_sensor < 1.5,\n                intensity=0.4\n            )\n        })\n\nbehavior AdversarialBehaviors:\n    class Tailgating(LinearVehicle):\n        def __init__(self, target_vehicle):\n            super().__init__()\n            self.target = target_vehicle\n            self.safety_distance = 1.2  # Below standard safety margin\n            \n        def update(self):\n            self.acceleration = adaptive_speed_control(\n                front_distance=self.target.position - self.position,\n                min_gap=self.safety_distance\n            )\n    \n    class UnsafeLaneChange(AggressiveBehavior):\n        def __init__(self):\n            self.lane_change_attempt = right_lane_shift(\n                urgency=0.9,       # High urgency parameter\n                lateral_speed=0.4  # Aggressive lateral movement\n            )\n            \n        def update(self):\n            if self.vehicle.lane_offset > 2.7:\n                abort_lane_change()\n            else:\n                execute_maneuver(self.lane_change_attempt)",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior:\n    def update(self):\n        if self.vehicle.lane_index == IntersectionGeometry().network.get_lane((\"entry\", \"intersection\", 0)):\n            self.vehicle.apply_emergency_brake()\n            self.vehicle.plan_trajectory(straight=True)\n\nbehavior AdversarialBehavior(IDMVehicle):\n    def __init__(self):\n        super().__init__()\n        self.reaction_time = 1.475 if self.vtype == 'sudden_brake' else 0\n        self.speed_increment = 14.22 if self.vtype == 'speeding' else 0\n    \n    def decision_cycle(self):\n        if random() < 0.3:  # Probability for sudden maneuvers\n            if self.vtype == 'sudden_brake':\n                self.apply_brake(1.0)\n            elif self.vtype == 'speeding':\n                self.control(self.speed + self.speed_increment)\n                \n        self.track_vehicle(ego, reaction_time=self.reaction_time)",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nclass EmergencyBrake(IDMVehicle):\n    def act(self, action=None):\n        self.target_velocity = max(0, self.velocity - 5)\n\nego.behavior = EmergencyBrake(\n    road=ego.road,\n    position=ego.position,\n    heading=ego.heading,\n    velocity=ego.velocity)\n\ntailgater.behavior = IDMVehicle(\n    road=tailgater.road,\n    position=tailgater.position,\n    heading=tailgater.heading,\n    velocity=tailgater.velocity).tailgate(lead=ego)\n\nspeeder.behavior = IDMVehicle(\n    road=speeder.road,\n    position=speeder.position,\n    heading=speeder.heading,\n    velocity=speeder.velocity).accelerate(target_speed=25)",
    "from highway_env.vehicle.behavior import AggressiveBehavior\n\nego.behavior = BrakeAction(\n    target_speed=8,  # Reduced speed for braking\n    duration=ContinuousDuration()\n)\n\nfor v in scenario.vehicles.excluding(ego):\n    v.behavior = AggressiveBehavior(\n        lane_change=UnsafeLaneChangeAction(\n            direction='left', \n            min_lateral_gap=1.76,\n            frequency=0.3\n        ),\n        following=TailgatingAction(\n            min_gap=1.35,\n            persistence=0.7\n        )\n    ).merge()",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior(IDMVehicle):\n    def act(self):\n        if self.road.objects_in_range(self, 50):  # Detect construction barrier\n            self.apply_emergency_brake()\n        else:\n            super().act()\n\nbehavior AdversarialBehavior(IDMVehicle):\n    def __init__(self):\n        self.target_speed += 9.9  # Speed increase parameter\n        self.acceleration_params['deceleration'] *= 2.0  # Aggressive braking\n        \n    def act(self):\n        if random.random() < 0.05:  # 5% probability for sudden brake\n            self.apply_brake(duration=2.98)\n        super().act()",
    "from highway_env.vehicle.behavior import Speeding, UnsafeLaneChange\n\nbehavior InterruptibleStraight:\n    def apply_to(ego):\n        ego.policy = ContinuousPolicy(\n            steering=SteeringManager.keep_lane(),\n            acceleration=AccelerationManager.emergency_brake_if_obstacle()\n        )\n\nbehavior AdversarialDriving:\n    def apply_to(vehicle):\n        if vehicle is not ego:\n            vehicle.behaviors = ParallelBehaviors([\n                Speeding(speed_increase=14.604327683451016),\n                UnsafeLaneChange(\n                    direction='left', \n                    min_gap=4.578648450530164,\n                    probability=0.7\n                )\n            ])\n\nSimulation.behaviors = [InterruptibleStraight, AdversarialDriving]",
    "from scenic.simulators.highway.actions import *  \n\ncars = list(vehicles) where vehicles are not ego  \nrequire cars[0].after(1.41, accelerate(-5))  \nrequire cars[1].after(1.30, accelerate(-5))  \n\nfor car in cars[2:]:  \n    require car.behavior == LaneCentering()  \n\nrequire ego.behavior == LaneCentering()",
    "require:\n    # Ego safety protocol\n    eventually(ego.speed < 0.5)  # Full braking requirement\n    \n    # Adversarial conditions\n    exists v in background:\n        (v.current_lane_offset > 3.586) imply  # Unsafe lane change\n            (v.change_lane(direction='right', duration=2))\n    \n    exists v in background:\n        always:  # Sudden brake pattern\n            after 2.04662.s:  # Reaction delay\n                v.speed *= 0.4 until 4.s",
    "from scenic.simulators.highway.actions import *\n\n# Ego vehicle behavior\nego_behavior = 'BrakeWhileStraight':\n    do FollowStraightLane(),\n    when: ego.position.x > 20:  # Initiate braking at intersection entry\n        do SetSpeedAction(0.5 * ego.speed) over 2 seconds\n\n# Tailgating behaviors\ntailgater1_behavior = 'AggressiveFollowing':\n    do FollowFrontVehicle.with_args(\n        min_distance=0.65,\n        deceleration=6.0\n    )\n\ntailgater2_behavior = 'ModerateFollowing': \n    do FollowFrontVehicle.with_args(\n        min_distance=1.16,\n        deceleration=4.0\n    )\n\nbackground_behavior = 'NormalDriving':\n    do MaintainSpeed()",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nclass EgoBehavior(LinearVehicle):\n    def act(self, action: str = 'brake'):\n        if self.road.network.get_lane(self.position).id == \"intersection\":\n            self.target_speed = max(0, self.speed - 3.5)  # Progressive braking\n        \nclass AggressiveBehavior(LinearVehicle):\n    def __init__(self, speed_increment: float):\n        super().__init__()\n        self.speed_increment = speed_increment\n        \n    def act(self):\n        self.target_speed += self.speed_increment\n        if random.random() < 0.3:  # 30% chance for lane changes\n            self.check_lane_change()\n\ndef configure_behaviors():\n    ego.set_behavior_type(EgoBehavior)\n    \n    for v in spawned_vehicles:\n        if random.random() < 0.15:  # 15% aggressive drivers\n            speed_boost = choice([6.96, 6.82])  # Two observed speeding patterns\n            v.set_behavior_type(AggressiveBehavior, params={'speed_increment': speed_boost})",
    "import time\n\ndef EgoBehavior():\n    # Maintain straight trajectory\n    while True:\n        ego.act({\"steering\": 0, \"acceleration\": 0})\n        if time.time() > 5:  # Trigger brake after 5s\n            ego.act({\"steering\": 0, \"acceleration\": -6})  # Emergency brake\n        yield\n\ndef AggressiveDriving(vehicle):\n    # Tailgating behavior model\n    target_speed = vehicle.road.vehicles[0].speed\n    vehicle.act({\n        \"acceleration\": 0.2 if vehicle.speed < target_speed else -0.5,\n        \"steering\": 0\n    })\n    \n    # Sudden brake trigger\n    if random.random() < 0.05 and time.time() > 2.06:\n        vehicle.act({\"acceleration\": -8})\n    yield\n\nbehavior monitor:\n    EgoBehavior() for ego\n    AggressiveDriving(vehicle) for vehicle in Vehicle if vehicle != ego",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior DefensiveStraight:\n    override LaneCenteringController.steering_control = 0  # Maintain straight trajectory\n    override LongitudinalController.speed_control =:\n        if ego.position.distance_to(intersection_center) < 50:\n            proportional_brake(-3 m/sÂ²)  # Gradual deceleration\n        else:\n            maintain_speed()\n            \nbehavior AdversarialBehaviors:  # For background vehicles\n    require:\n        eventually (some v in background_traffic:\n            TailgatingBehavior(v).activate(min_gap=0.63)\n            SuddenBrakeEvent(v).trigger(reaction_time=1.87)\n        )\n        \nsimulate:\n    ego.behavior = DefensiveStraight\n    background_traffic.behavior = IDMBehavior with parameters:\n        delta = 4  # Aggressive acceleration exponent\n        safety_time = 1.0  # Reduced safety margin\n    AdversarialBehaviors()",
    "from highway_env.vehicle.behavior import IDMBehavior\n\n# Ego vehicle emergency braking\nego_behavior = Behavior(\n    trajectory=FollowLane(target_lane=lane1),\n    braking_condition=(\n        ProximityToObject(closure_barriers[0], 50) | \n        TailgatingSensor(threshold=2.0)\n    ),\n    braking_profile=EmergencyBrake(intensity=0.7)\n)\n\n# Adversarial behavior models\nIDMBehavior.configure_parameters(\n    min_gap=0.734,  # Tailgating parameter\n    delta_speed=5.65  # Speed difference enforcement\n)\n\nAggressiveBehavior.configure(\n    speed_deviation=5.65,\n    lane_change_frequency=0.3,\n    safety_margin=0.5\n)\n\n# Persistent obstacle avoidance\nContinuousActionSpace.define(\n    steering=keepLane(),\n    acceleration=adaptiveSpeed(\n        base_speed=15.0,\n        obstruction_response=linearDecay(response_distance=100)\n    )\n)",
    "# Ego behavior\nego.behavior = ContinuousAction(\n    steering=keepLane(), \n    acceleration=brakeWithRate(3.5)  # Emergency braking profile\n).require(\n    persistently(obstacleInPath(closure_zone))\n)\n\n# Adversarial behaviors\nfor v in vehicles.excluding(ego):\n    v.behavior = ParallelAction(\n        Take(duration=5.0,\n            action=ChangeLane(direction='left', \n                             lane_offset=1, \n                             min_gap=2.24)),\n        Take(duration=2.0,\n            action=SpeedUp(acceleration=4.0))\n    ).withProbability(0.8)",
    "from highway_env.vehicle.behavior import AggressiveVehicle\n\nclass HazardousBehavior(AggressiveVehicle):\n    def act(self):\n        # Unsafe lane change parameters\n        if self.lane_offset > 2.43:\n            self.change_lane(direction=-1)  # Leftward maneuver\n        \n        # Sudden braking pattern\n        if self.speed > 8:\n            self.apply_emergency_brake(delay=2.21)\n\n        super().act()\n\nBehavioralAgent = HazardousBehavior.with_probability(0.85)  # Majority adoption rate",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior sudden_brake_variant1:\n    when simulate.step >= 2.66 * 15:  # Convert reaction time to simulation steps\n        ego.control(speed=ego.speed * 0.6, duration=1.5)\n\nbehavior sudden_brake_variant2:\n    when distance_to(closure_barrier) < 50:\n        self.control(braking=0.7, duration=1.0)\n\nego.behavior = ContinuousExecution(\n    LinearVehicle.act(ego) >> sudden_brake_variant1\n)\n\nfor v in Vehicle:\n    if v != ego:\n        v.behavior = probabilistic_behavior({\n            sudden_brake_variant1: 0.5,\n            sudden_brake_variant2: 0.5\n        })",
    "from highway_env.vehicle.behavior import LinearVehicle, AggressiveVehicle\n\nclass ConstructionZoneBehavior(LinearVehicle):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.target_speed = self.speed * 0.88  # 12% speed reduction\n        self.min_distance_to_obstacle = 3.0\n\nego.behavior = ConstructionZoneBehavior(\n    speed_control=dict(adaptive=True, speed_limit=15),\n    lane_change_controller=dict(disabled=True)\n    \nfor v in surrounding_vehicles:\n    if isinstance(v.behavior, AggressiveVehicle):\n        v.behavior.configure(\n            speed_factor=1.129,  # 12.9% speed increase\n            min_front_gap=0.76,\n            lane_change_urgency=Uniform(0.7, 1.0)\n        )",
    "from highway_env.vehicle.behavior import LinearVehicle\nfrom highway_env.vehicle.controllers import MDPVehicle\n\nego.behavior = MDPVehicle.make_decision.update(\n    action={'type': 'BRAKE', 'duration': 2.5}, \n    policy=utils.lka_policy\n)\n\nfor v in vehicles:\n    if v.speed > 30:  # Speeding behavior\n        v.act(LinearVehicle.ACCELERATION_ACTIONS[2])  # Max acceleration\n    \n    if v.enable_lane_change and distance_to_ego(v) < 50:\n        v.act({\n            'type': 'LANE_CHANGE', \n            'direction': 'RIGHT', \n            'lateral_offset': 1.53,\n            'urgency': 0.9\n        })",
    "from highway_env.vehicle.behavior import LinearVehicle\n\n# Ego vehicle behavior\nclass EgoBehavior(LinearVehicle):\n    def act(self):\n        if self.speed > 5:\n            self.control_throttle = False\n            self.brake_intensity = 0.7\n        else:\n            self.maintain_lane()\n\nego.behavior = EgoBehavior()\n\n# Adversarial lane-change behaviors\nadversary_left.behavior = LinearVehicle().lane_change(\n    direction='left',\n    duration=1.2,\n    urgency=0.9\n)\n\nadversary_right.behavior = LinearVehicle().lane_change(\n    direction='right', \n    duration=0.8,\n    urgency=0.95\n)\n\n# Background traffic behavior\nfor vehicle in road.vehicles[3:]:\n    vehicle.behavior = LinearVehicle().maintain_lane()",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior ego_behavior:\n    # Braking maneuver parameters\n    initial_speed = 8.33\n    target_deceleration = -2.5 m/sÂ²\n    maintain_lane_deviation = 0.5m\n    \n    while True:\n        modulate_speed(ego, target_deceleration, delta_time=0.1)\n        enforce_lane_keeping(ego, max_deviation=maintain_lane_deviation)\n\nbehavior tailgating_behavior(Vehicle front_vehicle):\n    safety_margin = 0.7\n    reaction_time = 0.3\n    \n    def adjust_gap():\n        current_gap = front_vehicle.position.x - self.position.x\n        acceleration = (current_gap - safety_margin) / reaction_time\n        self.control(self.speed + acceleration * dt)\n\n    every 0.1s:\n        adjust_gap()\n\n# Apply behaviors\nego.control = ego_behavior\ntailgater1.control = tailgating_behavior(ego)\ntailgater2.control = IDMVehicle(aggressive_impatience=1.5)",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nclass AdversarialBehavior(LinearVehicle):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Tailgating parameters\n        self.min_gap = 1.02493596582140  # Exact unsafe following distance\n        # Braking reaction time configuration\n        self.reaction_time = 2.489147352428208\n        \n    def act(self):\n        # Sudden braking behavior with delayed reaction\n        front_vehicle, distance = self.road.neighbor_vehicles(self)\n        if front_vehicle and distance < 5:\n            if self.speed > front_vehicle.speed:\n                self.apply_braking(0.7 * self.speed_limit, \n                                  duration=self.reaction_time)\n        super().act()\n\nego.behavior = AdversarialBehavior(ego)\nfor v in network.vehicles:\n    if v != ego:\n        v.behavior = AdversarialBehavior(v)",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior(LinearVehicle):\n    def apply_braking_pattern(self):\n        while self.speed > 2.78:  # Maintain >10 km/h during braking\n            self.control(self.ACCELERATION, -0.35)\n            yield self.take(0.5)\n            \nbehavior AdversarialBehavior():\n    def tailgate_sequence(vehicle):\n        vehicle.act(\"IDM\", {\"delta\": 0.8})  # Aggressive following\n        vehicle.set_route(ego.route)\n        \n    def unsafe_lane_change(vehicle):\n        vehicle.act(\"Mobil\", {\"lane_change_direction\": -1})\n        vehicle.check_collisions = lambda: False  # Disable safety checks",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior():\n    target_speed = 0  # Emergency braking\n    lane_follow = require lambda self: self.lane_offset == 0\n    collision_avoidance = monitor(obstacle_in_path, reaction_time=0.5)\n\nbehavior TailgaterBehavior(IDMVehicle):\n    min_gap = 0.812\n    policy = lambda: (accelerate @ 2.0) ^ (keep_distance @ 0.8)\n\nbehavior SpeederBehavior(IDMVehicle):\n    max_speed = 22.87  # base 15 + 7.87 increment\n    lane_change_aggressiveness = 0.9\n    speed_maintenance = require lambda v: v.speed >= 20\n    intersection_approach = yield from dynamic_brake_model(closure_area)",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior:\n    def update():\n        if self.vehicle.lane_distance_to(\"intersection\") < 50:\n            self.vehicle.control(\"decelerate\", intensity=0.7)\n            self.maintain_lane()\n        else:\n            self.keep_velocity(15Â±0.5)\n\nbehavior AdversarialBehavior(Policy):\n    def select_action():\n        if random() < 0.3:\n            return {'type': 'accelerate', 'duration': 2Â±0.5, 'delta': +3}\n        elif random() < 0.2:\n            return {'type': 'emergency_brake', 'reaction_time': 1.0Â±0.1}\n        else:\n            return follow_policy(\"IDM\")\n            \n    def configure():\n        set_reaction_time(1.006)\n        set_speed_tolerance(0.15)\n        enable_lane_change(prob=0.15)\n        enable_tailgating(min_gap=1.5)",
    "from highway_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior configuration\nego.behavior = LinearVehicle(\n    trajectory=ego.lane,\n    target_speed=8.33,\n    braking_threshold=0.4\n)\n\n# Adversarial braking patterns\nfor i, vehicle in enumerate(road.vehicles[1:]):  # Skip ego\n    if i % 2 == 0:\n        vehicle.control(\n            speed=0, \n            after=1.656  # Reaction time parameterization\n        )\n    else:\n        vehicle.control(\n            speed=0,\n            after=1.349  # Secondary reaction time\n        )",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nego.behavior = LinearVehicle(road=road, lane=ego.lane).follow_road().with_brake(intensity=0.7)\n\nfor v in traffic_vehicles:\n    if env.np_random.rand() < 0.6:  # Tailgating probability\n        v.behavior = LinearVehicle(road, v.lane,\n                                   target_speed=v.speed + 8.47,  # Speeding\n                                   follow_distance=1.08)  # Tailgating\n    else:\n        v.behavior = LinearVehicle(road, v.lane).follow_road()",
    "from highway_env.vehicle.behavior import IDMController, LinearVehicle\n\nbehavior ego_behavior:\n    control = IDMController(vehicle=ego, \n                           target_speed=0,  # Emergency braking\n                           delta=4)  # Aggressive deceleration\n    persistent_condition: ego.lane_index == road.network.get_lane((\"east\", \"west\", 0)).index\n\nbehavior adversarial_behavior(Vehicle):\n    requires: isinstance(vehicle, LinearVehicle) and vehicle is not ego\n    \n    params = {\n        'speed_deviation': 7.34,\n        'lane_change_direction': 'right',\n        'safety_margin': 3.36\n    }\n    \n    control = IDMController(vehicle=self.vehicle,\n                           target_speed=self.vehicle.target_speed + params['speed_deviation'],\n                           delta=1.0)\n    \n    lane_change = ChangeLaneAction(\n        direction=params['lane_change_direction'],\n        margin=params['safety_margin'],\n        priority=1\n    )\n    \n    continuous:\n        execute lane_change with probability 0.3 per second",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior sudden_brake:\n    override LinearVehicle.act()\n    if ego.projected_position.distance_to(Vector(0, 0)) < 50:  # Approaching closure zone\n        with reaction_delay(1.87):\n            ego.action = Action({'acceleration': -6, 'steering': 0})\n\nbehavior aggressive_speed:\n    override LinearVehicle.target_speed_getter()\n    return 30 + 10.28  # Base speed limit + speeding offset\n\nego.behavior = sudden_brake\nfor v in spawned_vehicles:\n    if v.speed > 25:\n        v.behavior = aggressive_speed",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nclass AggressiveBehavior(LinearVehicle):\n    def act(self, action: str = 'IDLE'):\n        if random.random() < 0.15:  # Sudden brake probability\n            self.target_speed = max(0, self.speed - 8 * (1 - math.exp(-self.timer/1.38)))\n        \n        if random.random() < 0.1:  # Unsafe lane change probability\n            self._lat_controller.target_lane_index = self.road.network.next_lane(\n                self.lane_index, 'left', 3.38\n            )\n\nego.behavior = LinearVehicle.with_lane_keeping(\n    target_speed=10.0,  # 36 km/h\n    braking_threshold=4.0  # Emergency braking trigger\n)",
    "from highway_env.vehicle.behavior import LinearVehicle\nfrom scenic.simulators.highway.actions import *\n\nego_behavior:\n    with:\n        persistent_braking_pattern:\n            TakeSetSpeedAction(target_speed=8.0, \n                              dynamics=dict(acceleration=-3.0, duration=2.0))\n        lane_keeping:\n            FollowLaneAction(target_lane=network.get_lane((\"east\", \"intersection\", 0)))\n\nadversary_behavior:\n    with probability 0.6:\n        aggressive_speeding:\n            TakeSetSpeedAction(target_speed=current_speed + 8.32, \n                              dynamics=dict(acceleration=5.0, duration=1.5))\n    with probability 0.4:\n        unsafe_lanechange:\n            ChangeLaneAction(\n                direction=RIGHT, \n                lane_offset=1, \n                dynamics=dict(duration=1.0, speed_gain=3.0))",
    "from highway_env.vehicle.behavior import IDMVehicle  \n\nbehavior ego_behavior:  \n    use_behavior_model(IDMVehicle,  \n        target_speed=8,  # Braking maneuver  \n        min_gap=4.0  \n    )  \n    maintain_lane()  \n\nbehavior adversarial_braking(vehicle):  \n    require vehicle in background_vehicles  \n    after delay(random.choice([1.68, 1.36])):  \n        vehicle.act({'acceleration': -6.0})  \n    continue_driving(120)  \n\nparallel:  \n    ego_behavior for ego  \n    adversarial_braking for 40% of background_vehicles",
    "from highway_env.vehicle.behavior import LinearVehicle, AggressiveVehicle\n\nego.behavior = LinearVehicle with:\n    trajectory = FollowLane(target_lane=north_lane)\n    braking_pattern = \"\"\"\n        when: ego.position.distance_to(intersection_center) < 50\n        do: gradual_brake(target_speed=8, duration=3)\n    \"\"\"\n\nfor v in background_vehicles:\n    v.behavior = AggressiveVehicle with:\n        lane_change = AdaptiveLaneChangePolicy(\n            direction_bias=0.3, \n            min_gap=2.56,\n            preferred_side=\"right\"\n        )\n        speed_control = \"\"\"\n            maintain speed = lane.speed_limit + 6.74 \n            with variance 1.5\n        \"\"\"\n        obstacle_avoidance = ReactiveSteering(\n            detection_range=15,\n            min_distance=3\n        )",
    "from scenic.simulators.highway.actions import lane_change, dynamic_brake\n\nbehavior EgoBehavior():\n    # Collision avoidance protocol\n    while ego.speed > 5:  # Progressive braking\n        do dynamic_brake(ego, rate=2.5)\n    \n    # Path adherence\n    require ego.lane == road.network.get_lane((\"east\", \"west\", 0))\n\nbehavior AggressiveDriving():\n    params = {'direction': 'right', 'duration': 2, 'distance': 2.39}\n    whenever simulation_step(interval=5):\n        do lane_change(ego, **params) with probability 0.4\n    \n    # Continuous speed violation\n    require monitor('speed_excess'):\n        current_speed = self.speed\n        lane_limit = self.lane.speed_limit\n        maintain current_speed >= lane_limit + 13.42",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nclass EmergencyStopVehicle(LinearVehicle):\n    def act(self):\n        self.control_parameters = {\"acceleration\": -4}  # Hard braking\n\nclass TailgatingVehicle(LinearVehicle):\n    def act(self):\n        target_speed = self.road.vehicles[0].speed * 1.2\n        self.control_parameters = {\"acceleration\": 2 if self.speed < target_speed else -1}\n\nclass UnsafeLaneChangeVehicle(LinearVehicle):\n    def act(self):\n        if self.lane_distance_to(ego) < 4:\n            self.change_lane(direction=1)  # Right shift\n\nego.behavior = EmergencyStopVehicle()\ntailgater.behavior = TailgatingVehicle()\n\nfor v in road.vehicles[2:8]:  # Assign to 6 vehicles\n    v.behavior = UnsafeLaneChangeVehicle()",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior:\n    # Continuous straight movement with braking\n    do FollowLaneCentered(ego.lane) until:\n        eventually ego.speed < 5.0 within 4.seconds\n    \nbehavior AdversarialBehavior:\n    # Speed amplification with stochastic braking\n    params = {'speed_increase': 9.666, 'brake_reaction': 1.164}\n    \n    setup:\n        self.target_speed = self.speed + params['speed_increase']\n    \n    rule:\n        when probabilityPerStep(0.05): \n            accelerate(self.target_speed)\n        after delay(params['brake_reaction']):\n            emergency_stop(duration=2.0)\n\nsimulation:\n    ego.behavior = EgoBehavior\n    for v in Adversary: \n        v.behavior = AdversarialBehavior",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior intersection_behavior:\n    params = {\n        'speed_factor': 1.25,  # 10.85 km/h speed increase\n        'min_gap': 1.07  # Tailgating distance\n    }\n    \n    def control():\n        if self.front_vehicle:\n            accel = IDMVehicle.acceleration(self, front_vehicle=self.front_vehicle, **params)\n        else:\n            accel = self.speed_control(target_speed=self.speed_limit * params['speed_factor'])\n        self.act(accel)\n\nego_brake_action:\n    with requirements:\n        maintain lane_centering within 0.5m\n        linear deceleration until full_stop within 40m",
    "from scenic.core.dynamic_behaviors import TakeAction\nfrom highway_env.vehicle.behavior import AggressiveActor\n\nbehavior EgoStrategy:\n    do TakeAction({'steering': 0, 'acceleration': -2}) until:\n        ego.lane_distance > 70  # Pre-closure braking\n\nbehavior AdversarialPatterns:\n    params = {'lane_change_intensity': 0.3, 'tailgating_rate': 0.25}\n    \n    for vehicle in background_traffic:\n        if (bernoulli(params['lane_change_intensity'])):\n            do AggressiveActor.unsafe_lane_change_action(direction='right', duration=2, lateral_speed=3.77/2)\n        if (bernoulli(params['tailgating_rate'])):\n            do AggressiveActor.tailgating_action(target=ego, follow_distance=1.18, time_gap=0.3)\n\nsimulation:\n    compose:\n        EgoStrategy(),\n        AdversarialPatterns()",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior(LinearVehicle):\n    def __init__(self):\n        super().__init__()\n        self.velocity_keep_threshold = 0.2\n        \n    def act(self):\n        if self.road.objects:  # Detect traffic control\n            self.take_exit(destination=\"straight\")\n            if self.lane_distance > 15:  # Approaching control zone\n                self.brake(intensity=0.6, duration=2)\n\nbehavior AdversarialBehavior(LinearVehicle):\n    def __init__(self):\n        super().__init__()\n        self.reaction_time = 2.15\n        \n    def act(self):\n        if random.random() < 0.05:  # 5% probability for sudden brake\n            self.brake(intensity=1.0, duration=self.reaction_time)\n        else:\n            self.accelerate(1.2)  # Maintain overspeed",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nrequire:\n    ego.controlled_behavior == \"emergency_brake\"\n\nmodel Tailgate(IDMVehicle):\n    override target_headway = 0.3  # Default: 1.5s\n    override min_gap = 1.42        # Specified distance\n\nmodel UnsafeLaneChange(IDMVehicle):\n    override lane_change_duration = 1.2  # Default: 2s\n    override lateral_safety_margin = 1.28\n\nBehaviorConfiguration:\n    adversary_types = [Tailgate, UnsafeLaneChange]\n    spawn_ratios = {Tailgate: 0.4, UnsafeLaneChange: 0.6}\n    conflict_zone = (15, 25)  # Intersection impact area",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior ego_behavior(LinearVehicle):\n    def act(self):\n        self.controlled = True\n        self.action['steering'] = 0  # Maintain straight trajectory\n        self.action['acceleration'] = -4  # Continuous braking\n        self.check_collisions = True\n\nbehavior adversarial_behavior(LinearVehicle):\n    def __init__(self, following_distance=0.59, speed_excess=14.35):\n        self.tailgate_distance = following_distance\n        self.speed_excess = speed_excess\n    \n    def act(self):\n        if self.lane == ego.lane:\n            self.maintain_following()\n        else:\n            self.speed = self.lane.speed_limit + self.speed_excess\n\n    def maintain_following(self):\n        target_pos = ego.position - Vector(self.tailgate_distance, 0)\n        self.control_target_speed(target_pos, ego.speed)",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior EgoBehavior:\n    def update(self):\n        if self.vehicle.lane.special_type == \"construction_zone\":\n            # Defensive braking profile\n            brake_profile = {\n                'acceleration': -3.0,  # Moderate deceleration\n                'duration': 2.5,       # Sustained braking period\n                'trigger_distance': 30.0  # Initiate at 30m from intersection\n            }\n            self.control_with_profile(brake_profile)\n        else:\n            self.keep_lane_centered()\n\nbehavior AdversarialBehavior(IDMVehicle):\n    def __init__(self):\n        super().__init__()\n        self.target_speed += random.choice([8.42, 11.36])  # Speed surge injection\n        \n    def decision_cycle(self):\n        if random.random() < 0.3:  # 30% chance for lane violation\n            self.check_lane_change_opportunity(aggressiveness=0.8)\n        else:\n            self.maintain_unsafe_speed()",
    "import math\n\nrequire abs(ego.speed - 8) < 0.1  # Maintain initial speed\n\n# Ego braking logic\ndef ego_brake():\n    if ego.position.distanceTo(closure_zone.position) < 50:\n        ego.speed *= math.exp(-0.05 * simulation.current_time)\n\n# Adversarial behaviors\ndef sudden_brake(vehicle):\n    vehicle.speed *= 0.6 after 1.418s delay when vehicle.speed > 5\n\ndef tailgating(vehicle, leader):\n    maintain leader.distanceTo(vehicle) <= 1.021625\n\nego.behavior = ego_brake\nfor v in other_vehicles:\n    v.behavior = [sudden_brake(v), tailgating(v, preceding_vehicle(v))]",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior:\n    def update():\n        # Straight trajectory maintenance\n        require(abs(self.vehicle.heading) < 0.1 rad)\n        \n        # Emergency braking condition\n        if any(v.distance_to(self.vehicle) < 2.0 for v in self.road.vehicles):\n            self.vehicle.control(\"brake\", 0.7)\n        else:\n            self.vehicle.control(\"cruise\", 8.3)\n\nbehavior TailgatingBehavior(LinearVehicle):\n    def update():\n        # Dangerous following pattern\n        front_vehicle = self.road.nearest_vehicles_ahead(self)[0]\n        if front_vehicle:\n            follow_dist = self.lane_distance_to(front_vehicle)\n            if follow_dist < 1.5:\n                self.control(\"accelerate\", min(self.speed + 0.5, 10.0))\n            else:\n                self.control(\"idle\")",
    "import collections\n\n# Ego behavior\nego.behavior = FollowLane(\n    target_speed=15,\n    braking_threshold=5.0\n)\n\n# Adversarial behavior model\nAdversarialDriver = DynamicBehavior(\n    normal=IDM(),\n    triggers=[\n        (lambda v: v.lane_distance_to(ego) < 50, \n         BrakeAction(intensity=0.6, duration=2.16)),\n        (lambda v: v.lane_distance_to(ego) < 1.5, \n         TailgateAction(min_gap=1.2))\n    ]\n)\n\nfor v in scenario.vehicles.excluding(ego):\n    v.behavior = AdversarialDriver\n    v.controller = IDMController(\n        acc_max=3.0,\n        acc_min=-4.0\n    )",
    "import numpy as np\n\nbehavior EgoBehavior(ContinuousBehavior):\n    def step(self):\n        if self.vehicle.lane_index[2] == 2:  # Straight path\n            if any(obj.in_intersection for obj in self.vehicle.road.objects):\n                self.vehicle.control_brake(intensity=0.7)\n            else:\n                self.vehicle.control_keep_velocity(8)\n        self.take_exit(exit_index=2)\n\nbehavior AdversaryBehavior(ContinuousBehavior):\n    def __init__(self, reaction_time=1.13):\n        super().__init__()\n        self.reaction_delay = reaction_time\n        \n    def step(self):\n        if self.proximity_to_ego() < 15:\n            if self.time_in_behavior > self.reaction_delay:\n                self.vehicle.control_brake(intensity=np.clip(0.5 + random(), 0.6, 1.0))\n        else:\n            self.vehicle.control_throttle(0.8)\n\nego.behavior = EgoBehavior()\nfor v in other_vehicles:\n    v.behavior = AdversaryBehavior() if random() < 0.4 else IDMBehavior()",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior PriorityBehaviors:\n    def ego_behavior():\n        # Emergency braking profile\n        if ego.speed > 5:\n            ego.apply_emergency_brake()\n            \n    def npc_behavior(vehicle):\n        # Sustained speed violation\n        vehicle.act(LinearVehicle.ACCELERATE)\n        \n        # Stochastic dangerous lane changes\n        if self.probability(0.2):\n            vehicle.change_lane(\n                direction='right',\n                lateral_speed=2.17/3  # Achieve target offset in 3s\n            )",
    "from scenic.simulators.highway.actions import *\n\nego_behavior:\n    maintain_lane_centering()\n    with:\n        when(ego.speed > 10, persistently):\n            adjust_speed(relative_speed=-3)\n        monitor_surroundings(safety_margin=2.5)\n\nadversary_behavior:\n    probabilistic_choice:\n        0.6: accelerate_with(magnitude=13.15)\n        0.4: force_lane_change(\n            direction='left', \n            lateral_distance=2.56, \n            urgency=0.9\n        )\n    check_collision_avoidance(min_TTC=1.2)",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nbehavior AutonomousDriving:\n    ego.controlled_behavior = ContinuousLaneKeeping()\n    \n    adversarial_vehicles = filter(lambda v: isinstance(v, IDMVehicle), World.objects\n    first_adversary = next(adv for adv in adversarial_vehicles if adv.distance_to(ego) < 50)\n    second_adversary = next(adv for adv in adversarial_vehicles if adv.distance_to(ego) < 100)\n    \n    first_adversary.apply_action(\n        EmergencyBraking(reaction_time=1.17),\n        persistence=Forever\n    )\n    \n    second_adversary.apply_action(\n        EmergencyBraking(reaction_time=2.11), \n        persistence=Forever\n    )\n    \n    require:\n        maintain (ego.speed > 0) unless collision_imminent",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior(LinearVehicle):\n    def control(self):\n        if self.road.neighbors_in_front(threshold=15):\n            self.apply_brake(4.0)  # Defensive braking profile\n        else:\n            self.maintain_speed()\n\nbehavior AggressiveBehavior(LinearVehicle):\n    def control(self):\n        # Delayed reaction braking pattern\n        if self.sim_time > 1.03 and self.road.neighbors_in_front(threshold=10):\n            self.apply_emergency_brake(6.0)\n        # Sustained speed violation\n        self.target_speed = self.road.speed_limit + 8.14",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior(LinearVehicle):\n    def act(self):\n        self.controlled_brake(\n            deceleration_rate=0.3,\n            reaction_time=1.7656993925407178,\n            persistent_action=True\n        )\n\nbehavior AdversaryBehavior(IDMVehicle):\n    def __init__(self):\n        super().__init__(\n            speed_increase=5.278070469176919,\n            min_gap=3.0,\n            emergency_decel=6.0\n        )\n    \n    def sudden_brake(self):\n        require self.speed > 10\n        self.apply_brake(\n            intensity=Uniform(0.6, 0.9),\n            duration=2.0,\n            exponential_decay_rate=0.4\n        )",
    "from highway_env.vehicle.behavior import LinearVehicle\n\nbehavior EgoBehavior:\n    module = LinearVehicle(\n        target_speed=0,  # Emergency braking\n        lane_change_controller=ConstantLaneChangeController(direction='straight')\n    )\n\nbehavior AdversarialBehavior:\n    module = LinearVehicle(\n        lane_change_controller=AggressiveLaneChangeController(\n            direction='left',\n            min_proximity=3.9\n        ),\n        cruising_speed=TruncatedNormal(25, 5),\n        safety_distance=0.75\n    )\n\nrequire:\n    for v in Vehicle except ego:\n        if v.lane != ego.lane:\n            eventually(v.perform_lane_change(direction='left') when proximityBetween(v, ego) < 3.9\n        else:\n            maintain follow_distance(ego, min_gap=0.75)",
    "from highway_env.vehicle.behavior import IDMVehicle\n\nrequire:\n    ego.actions = [BrakeAction(intensity=0.7)] when ego.position[0] > 50\n\nfor v in Vehicle:\n    if v is not ego:\n        v.reaction_time = 1.8615982442310457 if probability(0.6) else 1.248482000920325\n        when FrontVehicleProgress(v) > 0.8:\n            v.apply_action(SuddenBrake(intensity=0.5, duration=2.0))",
    "behavior EgoBehavior:\n    requires:\n        monitor TrafficHazardMonitor\n    \n    while True:\n        # Obstacle response\n        if detect_obstacle(ego, within=100):\n            maintain_lane()\n            brake(deceleration=3.0)  # Moderate emergency braking\n        \n        # Tailgating mitigation\n        if front_vehicle.distance < parameters.safe_distance:\n            adaptive_cruise_control(front_vehicle, time_gap=1.8)\n        \n        # Behavioral constraints\n        comply_traffic_rules(speed_limit=lane1_speed)\n\nbehavior AdversarialDriving:\n    params:\n        reaction_time = 1.65\n        min_gap = 1.2\n    \n    def sudden_brake(vehicle):\n        when proximity_sensor(vehicle) < 10:\n            after delay(params.reaction_time):\n                brake(deceleration=6.0)\n    \n    def tailgate(vehicle):\n        maintain_gap(vehicle.lead, params.min_gap)"
  ]
}