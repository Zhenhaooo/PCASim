{
  "geometry": [
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [lane_change]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_002_trajectory_set_123.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': 0,  # Eastbound\n    'lane_index': (\"0\", \"1\", 0)  # Default lane\n}",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [vehicle_tracks_007_trajectory_set_35.json]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_007_trajectory_set_35.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': np.pi/2,  # Northbound\n    'lane_index': (\"0\", \"1\", 0)  # Rightmost lane\n}",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [vehicle_tracks_014_trajectory_set_112.json]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_014_trajectory_set_112.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': np.pi/2,  # Northbound\n    'lane_index': (\"0\", \"1\", 0)  # Rightmost lane (fast lane)\n}",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [vehicle_tracks_007_trajectory_set_76.json]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_007_trajectory_set_76.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': np.pi/2,  # Northbound\n    'lane_index': (\"0\", \"1\", 0)  # Starting in right lane\n}",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [vehicle_tracks_011_trajectory_set_58.json]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_011_trajectory_set_58.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': np.pi/2,  # Northbound\n    'lane_index': (\"0\", \"1\", 0)  # Fast lane\n}",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [vehicle_tracks_003_trajectory_set_131.json]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_003_trajectory_set_131.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': np.pi/2,  # Northbound\n    'lane_index': (\"0\", \"1\", 0)  # Slow lane\n}",
    "from NGSIM_env.road.road import Road, RoadNetwork\nfrom NGSIM_env.road.lane import LineType, StraightLane\nfrom lanelet2.io import Origin, load\nfrom lanelet2.projection import UtmProjector\n\n# Load real-world map data [vehicle_tracks_013_trajectory_set_61.json]\nprojector = UtmProjector(Origin(0, 0))\nlanelet_map = load(\"vehicle_tracks_013_trajectory_set_61.json\", projector)\n\n# Ego initial state (will be overridden by spawn.snippet)\nego_initial_pose = {\n    'position': [0, 0],  # Will be set by OSM loader\n    'heading': np.pi/2,  # Northbound\n    'lane_index': (\"0\", \"1\", 0)  # Special lane with traffic control\n}"
  ],
  "spawn": [
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle\n\n# Ego vehicle (lane-changing then turning)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[50.2, 1.8],  # Right lane position\n    heading=np.pi/2,  # Northbound\n    speed=8.3,  # ~30 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target left lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Left-side unsafe lane changer\n    InterActionVehicle(\n        road=road,\n        position=[48.7, 3.6],  # Left adjacent\n        heading=np.pi/2,\n        speed=9.1,\n        behavior=UnsafeLaneChange(direction='left')\n    ),\n    # Rear tailgater\n    IDMVehicle(\n        road=road,\n        position=[50.1, 0.4],  # 0.95m behind\n        heading=np.pi/2,\n        speed=8.8,\n        minimum_gap=0.5  # Aggressive following\n    )\n]",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle, InterActionVehicle\n\n# Ego vehicle (lane-changing then turning)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[35.2, 2.1],  # Initial right lane position\n    heading=np.pi/2,\n    speed=7.5,  # ~27 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target left lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Right-side unsafe lane changer\n    InterActionVehicle(\n        road=road,\n        position=[35.5, 4.6],  # Right adjacent\n        heading=np.pi/2,\n        speed=8.2,\n        behavior=UnsafeLaneChange(direction='left')\n    ),\n    # Front unsafe lane changer\n    InterActionVehicle(\n        road=road,\n        position=[35.1, 6.8],  # 2.74m ahead\n        heading=np.pi/2,\n        speed=7.8,\n        behavior=UnsafeLaneChange(direction='right')\n    )\n]",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle, InterActionVehicle\n\n# Ego vehicle (preparing left lane change)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[42.3, 1.7],  # Initial right lane position\n    heading=np.pi/2,\n    speed=8.9,  # ~32 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target left lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Right-side speeder\n    InterActionVehicle(\n        road=road,\n        position=[42.6, 3.9],  # Right adjacent\n        heading=np.pi/2,\n        speed=12.4,  # Initial speed + 6.74 m/s²\n        behavior=AggressiveAcceleration(rate=6.742)\n    ),\n    # Front speeder\n    InterActionVehicle(\n        road=road,\n        position=[42.2, 8.3],  # 5.6m ahead\n        heading=np.pi/2,\n        speed=15.7,  # Initial speed + 12.26 m/s²\n        behavior=AggressiveAcceleration(rate=12.263)\n    )\n]",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle, InterActionVehicle\n\n# Ego vehicle (initiating left lane change)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[28.5, 1.9],  # Right lane position\n    heading=np.pi/2,\n    speed=6.5,  # ~23.4 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target left lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Rear unsafe lane changer\n    InterActionVehicle(\n        road=road,\n        position=[28.3, -1.88],  # 3.78m behind (3.781346... rounded)\n        heading=np.pi/2,\n        speed=7.2,\n        behavior=UnsafeLaneChange(direction='left')\n    ),\n    # Left-side unsafe lane changer \n    InterActionVehicle(\n        road=road,\n        position=[25.44, 1.9],  # 3.86m left (3.860499... rounded)\n        heading=np.pi/2,\n        speed=6.8,\n        behavior=UnsafeLaneChange(direction='right')\n    )\n]",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle, InterActionVehicle\n\n# Ego vehicle (initiating left lane change)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[37.6, 2.3],  # Initial fast lane position\n    heading=np.pi/2,\n    speed=10.2,  # ~36.7 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target left lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Right-side speeder\n    InterActionVehicle(\n        road=road,\n        position=[37.9, 4.1],  # Right adjacent\n        heading=np.pi/2,\n        speed=22.05,  # 10.2 + 11.85 m/s²\n        behavior=AggressiveAcceleration(rate=11.85)\n    ),\n    # Rear speeder\n    InterActionVehicle(\n        road=road,\n        position=[37.4, -2.8],  # 5.1m behind\n        heading=np.pi/2,\n        speed=19.68,  # 10.2 + 9.48 m/s²\n        behavior=AggressiveAcceleration(rate=9.48)\n    )\n]",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle, InterActionVehicle\n\n# Ego vehicle (initiating right lane change)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[45.2, 2.4],  # Initial slow lane position\n    heading=np.pi/2,\n    speed=6.8,  # ~24.5 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target right lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Front unsafe lane changer\n    InterActionVehicle(\n        road=road,\n        position=[45.1, 7.1],  # 4.73m ahead\n        heading=np.pi/2,\n        speed=7.2,\n        behavior=UnsafeLaneChange(direction='left')\n    ),\n    # Rear sudden braker\n    InterActionVehicle(\n        road=road,\n        position=[45.3, -1.5],  # 3.9m behind\n        heading=np.pi/2,\n        speed=6.5,\n        behavior=SuddenBrake(reaction_time=2.63)\n    )\n]",
    "from NGSIM_env.vehicle.behavior import IDMVehicle\nfrom NGSIM_env.vehicle.humandriving import HumanLikeVehicle, InterActionVehicle\n\n# Ego vehicle (initiating right lane change)\nego_vehicle = HumanLikeVehicle(\n    road=road,\n    position=[52.3, 2.1],  # Special lane position\n    heading=np.pi/2,\n    speed=6.2,  # ~22.3 km/h\n    target_lane_index=(\"0\", \"1\", 1)  # Target right lane\n)\n\n# Adversarial vehicles\nadv_vehicles = [\n    # Right-side sudden braker\n    InterActionVehicle(\n        road=road,\n        position=[52.6, 3.8],  # Right adjacent\n        heading=np.pi/2,\n        speed=5.8,\n        behavior=SuddenBrake(reaction_time=2.404)\n    ),\n    # Rear speeder\n    InterActionVehicle(\n        road=road,\n        position=[52.1, -1.2],  # 3.3m behind\n        heading=np.pi/2,\n        speed=14.4,  # 6.2 + 8.195 m/s\n        behavior=AggressiveAcceleration(rate=8.195)\n    )\n]"
  ],
  "behavior": [
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_distance_to(adv_vehicles[0]) < 2.0:\n        vehicle.change_lane(direction='left')\n    elif vehicle.lane_index[2] == 1:  # After lane change\n        vehicle.turn(radius=15)  # Initiate turn\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Unsafe lane changer\n        vehicle.act(override_lane_change=True)\n    elif vehicle == adv_vehicles[1]:  # Tailgater\n        vehicle.controller.minimum_gap = 0.5\n        vehicle.follow_vehicle(ego_vehicle)",
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_index[2] == 0:  # Initial right lane\n        vehicle.change_lane(direction='left')\n    elif vehicle.lane_index[2] == 1:  # After lane change\n        vehicle.turn(radius=12)  # Initiate intersection turn\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Right-side lane changer\n        vehicle.act(override_lane_change=True)\n    elif vehicle == adv_vehicles[1]:  # Front lane changer\n        vehicle.act(override_lane_change=True)",
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_index[2] == 0:  # Initial right lane\n        vehicle.change_lane(direction='left')\n    # No turn action as per original description\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Right speeder\n        vehicle.act(override_acceleration=True)\n    elif vehicle == adv_vehicles[1]:  # Front speeder\n        vehicle.act(override_acceleration=True)",
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_index[2] == 0:  # Initial right lane\n        vehicle.change_lane(direction='left')\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Rear lane changer\n        vehicle.act(override_lane_change=True)\n    elif vehicle == adv_vehicles[1]:  # Left-side lane changer\n        vehicle.act(override_lane_change=True)",
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_index[2] == 0:  # Initial fast lane\n        vehicle.change_lane(direction='left')\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Right speeder\n        vehicle.act(override_acceleration=True)\n    elif vehicle == adv_vehicles[1]:  # Rear speeder\n        vehicle.act(override_acceleration=True)",
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_index[2] == 0:  # Initial slow lane\n        vehicle.change_lane(direction='right')\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Front lane changer\n        vehicle.act(override_lane_change=True)\n    elif vehicle == adv_vehicles[1]:  # Rear sudden braker\n        vehicle.act(override_braking=True)",
    "from NGSIM_env.vehicle.controller import MDPVehicle\nfrom NGSIM_env.vehicle.behavior import LinearVehicle\n\n# Ego behavior sequence\ndef ego_behavior(vehicle):\n    if vehicle.lane_index[2] == 0:  # Initial special lane\n        vehicle.change_lane(direction='right')\n\n# Adversarial behaviors\ndef adv_behavior(vehicle):\n    if vehicle == adv_vehicles[0]:  # Right sudden braker\n        vehicle.act(override_braking=True)\n    elif vehicle == adv_vehicles[1]:  # Rear speeder\n        vehicle.act(override_acceleration=True)"
  ]
}