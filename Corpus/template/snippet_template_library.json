{
  "geometry": [
    "IntersectionScenario: \n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_27.json',\n        lane_types=[StraightLane, StraightLane]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(30.0)  # Mid-intersection approach\n    heading = lane.heading_at(30.0)",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_28.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Approach position from NGSIM data\n    heading = lane.heading_at(45.0)\n    lane_type = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_48.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(50.0)  # Conflict point alignment\n    heading = lane.heading_at(50.0)\n    lane_type = 'special'  # Temporary traffic pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_67.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'slow': 30.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(55.0)  # Conflict zone alignment\n    heading = lane.heading_at(55.0)\n    lane_spec = 'slow'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_71.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-conflict position\n    heading = lane.heading_at(38.0)\n    lane_spec = 'special'  # Temporary closure lane",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_73.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure positioning\n    heading = lane.heading_at(38.0)\n    lane_type = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_80.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.0)  # Pre-closure position\n    heading = lane.heading_at(42.0)\n    lane_spec = 'special'  # Temporary closure designation",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_91.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure braking position\n    heading = lane.heading_at(38.0)\n    lane_spec = 'slow'  # Regulatory classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_92.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-braking position from dataset\n    heading = lane.heading_at(38.0)\n    lane_spec = 'slow'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_000_trajectory_set_95.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'fast': 50.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'fast'  # Permanent lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_107.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure alignment\n    heading = lane.heading_at(38.0)\n    lane_type = 'special'  # Temporary closure configuration",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_001_trajectory_set_114.json]',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'fast': 50.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_119.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'fast': 50.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(35.0)  # Pre-braking position\n    heading = lane.heading_at(35.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_123.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.LANE_SHIFT]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'special'  # Temporary traffic pattern",
    "IntersectionConflictScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_125.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'normal': 50.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'normal'  # Standard lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_13.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(22.5)  # Pre-braking position from dataset\n    heading = lane.heading_at(22.5)\n    lane_spec = 'slow'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_136.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-braking position from dataset\n    heading = lane.heading_at(38.0)\n    lane_spec = 'special'  # Temporary traffic pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_144.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Pre-closure approach position\n    heading = lane.heading_at(42.5)\n    lane_spec = 'special'  # Temporary traffic pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_145.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Pre-conflict position\n    heading = lane.heading_at(45.0)\n    lane_type = 'special'  # Designated lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_147.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'fast': 50.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.0)  # Conflict zone alignment\n    heading = lane.heading_at(42.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:  \n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_150.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_properties={'normal': {'speed_limit': 50.0}}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_151.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[StaticSignage.STANDARD]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'normal'  # Original classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_157.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_properties={'type': 'normal'}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'normal'  # Standard lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_001_trajectory_set_158.json]',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'special': 40.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Conflict zone alignment\n    heading = lane.heading_at(38.0)\n    lane_type = 'special'  # Dataset-specific classification",
    "IntersectionScenario:  \n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_162.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30],\n        lane_speed_limits={'slow': 25.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'slow'",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_001_trajectory_set_165.json]',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPECIAL_LANE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'special'  # Temporary traffic pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_166.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure position\n    heading = lane.heading_at(38.0)\n    lane_spec = 'special'",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_182.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.0)  # Pre-closure positioning\n    heading = lane.heading_at(42.0)\n    lane_spec = 'special'  # Closure-affected lane",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_186.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'fast': 50.0},\n        traffic_controls=[TemporarySignage.SPEED_LIMIT]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_34.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.0)  # Pre-closure positioning\n    heading = lane.heading_at(42.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_001_trajectory_set_37.json]',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30],\n        lane_specs={'primary': 'slow'}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(37.0)  # Conflict zone alignment\n    heading = lane.heading_at(37.0)\n    lane_spec = 'slow'",
    "IntersectionScenario:  \n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_52.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Pre-closure approach position\n    heading = lane.heading_at(45.0)",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_54.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.0)  # Conflict zone alignment\n    heading = lane.heading_at(42.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_57.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure positioning\n    heading = lane.heading_at(38.0)\n    lane_type = 'special'  # Temporary closure configuration",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_60.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(40.0)  # Conflict zone alignment\n    heading = lane.heading_at(40.0)\n    lane_spec = 'normal'  # Standard lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_001_trajectory_set_71.json]',\n        lane_types=[StraightLane, StraightLane],\n        lane_specials={'type': 'special'}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Pre-braking position from dataset\n    heading = lane.heading_at(42.5)\n    lane_attributes = {'temporary_changes': 'none'}",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_89.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'normal'  # Standard lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_9.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(32.5)  # Conflict zone alignment\n    heading = lane.heading_at(32.5)\n    lane_spec = 'normal'  # Standard lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_001_trajectory_set_93.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_100.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure positioning\n    heading = lane.heading_at(38.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:  \n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_101.json',\n        lane_types=[StraightLane, StraightLane],\n        conflict_zones=[(45.0, 55.0)]  # Braking conflict range\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(50.0)  # Conflict midpoint\n    heading = lane.heading_at(50.0)\n    lane_spec = 'normal'  # Standard lane configuration",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_102.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_type = 'fast'  # Original dataset classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_002_trajectory_set_103.json]',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE],\n        lane_speed_limits={'slow': 25.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Pre-closure alignment point\n    heading = lane.heading_at(42.5)\n    lane_spec = 'slow'  # Original classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_108.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.LANE_SHIFT]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Pre-conflict positioning\n    heading = lane.heading_at(42.5)\n    lane_spec = 'normal'  # Standard lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_113.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'slow'  | Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_114.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment from dataset\n    heading = lane.heading_at(42.5)\n    lane_spec = 'slow'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_116.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'slow'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_117.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-closure position from dataset\n    heading = lane.heading_at(38.0)\n    lane_type = 'normal'  # Original classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_129.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(35.0)  # Pre-braking position\n    heading = lane.heading_at(35.0)\n    lane_spec = 'slow'",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_13.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(38.0)  # Pre-braking position from dataset\n    heading = lane.heading_at(38.0)\n    lane_type = 'normal'",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_15.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment from dataset\n    heading = lane.heading_at(42.5)\n    lane_spec = 'special'  # Temporary closure pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_18.json',\n        lane_types=[StraightLane, StraightLane],\n        lane_speed_limits={'slow': 40.0}\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Pre-conflict position from dataset\n    heading = lane.heading_at(45.0)\n    lane_spec = 'slow'  # Original classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_2.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'fast'  # Original dataset classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_002_trajectory_set_24.json]',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone entry point\n    heading = lane.heading_at(45.0)\n    lane_spec = 'slow'  # Original dataset classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_26.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'special'  # Temporary traffic pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='[vehicle_tracks_002_trajectory_set_30.json]',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.CONSTRUCTION_ZONE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment from dataset\n    heading = lane.heading_at(42.5)\n    lane_spec = 'normal'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_49.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.0)  # Pre-closure position from dataset\n    heading = lane.heading_at(42.0)\n    lane_spec = 'fast'  # Original lane classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_57.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(45.0)  # Conflict zone alignment\n    heading = lane.heading_at(45.0)\n    lane_spec = 'special'  # Temporary closure pattern",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_69.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(35.0)  # Conflict zone alignment [vehicle_tracks_002_trajectory_set_69.json]\n    heading = lane.heading_at(35.0)\n    lane_spec = 'fast'",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_71.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(35.0)  # Pre-closure position\n    heading = lane.heading_at(35.0)\n    lane_spec = 'fast'  # Affected lane type",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_76.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.LANE_CLOSURE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(25.0)  # Pre-conflict position\n    heading = lane.heading_at(25.0)\n    lane_spec = 'special'  # Temporary control lane",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_83.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_40]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(40.0)  # Conflict zone alignment\n    heading = lane.heading_at(40.0)\n    lane_spec = 'fast'  # Original dataset classification",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_91.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.SPEED_LIMIT_30]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(35.0)  # Pre-braking position\n    heading = lane.heading_at(35.0)\n    lane_spec = 'slow'  # Verified from dataset annotations",
    "IntersectionScenario:  \n    road_network = RoadNetwork.from_real_dataset(  \n        dataset='[vehicle_tracks_002_trajectory_set_92.json]',  \n        lane_types=[StraightLane, StraightLane],  \n        traffic_controls=[TemporarySignage.ROAD_CLOSURE]  \n    )  \n    \nego = Car:  \n    lane = road_network.get_lane(lane_index=0)  \n    initial_position = lane.center_at(45.0)  # Pre-closure position  \n    heading = lane.heading_at(45.0)",
    "IntersectionScenario:\n    road_network = RoadNetwork.from_real_dataset(\n        dataset='vehicle_tracks_002_trajectory_set_99.json',\n        lane_types=[StraightLane, StraightLane],\n        traffic_controls=[TemporarySignage.CONTROL_ZONE]\n    )\n    \nego = Car:\n    lane = road_network.get_lane(lane_index=0)\n    initial_position = lane.center_at(42.5)  # Conflict zone alignment\n    heading = lane.heading_at(42.5)\n    lane_spec = 'normal'  # Standard lane classification"
  ],
  "spawn": [
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle: \n    lane = ego.lane\n    position = ego.initial_position + (-25.0, 0.0)  # 25m rear offset\n    speed = 12.0  # Approaching from behind\n    target_speed = 8.0\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego.initial_position + (0.0, 3.5)  # Left adjacent lane\n    speed = 10.5  # Lateral approach speed\n    lane_offset = 2.0",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # km/h conversion from dataset\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 3.614)  # Right offset with precise lateral distance\n    speed = 12.5  # m/s matching NGSIM patterns\n    lane_change_direction = 'left'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 3.614)  # Right-aligned longitudinal offset\n    speed = 14.0  # Higher initial speed for conflict potential\n    braking_capability = -7.5  # m/s²",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Speed limit compliance\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # 20m front offset\n    speed = 35.0  # km/h conversion\n    lane_change_direction = 'left'\n    lateral_offset = 3.59\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (15.0, 3.5)  # Left adjacent offset\n    speed = 38.0  # Higher approach speed\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Initial speed from braking pattern\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (8.0, 0.0)  # Front position\n    speed = 22.0  # Approaching speed\n    lateral_offset = 3.0  # Dataset-calculated 2.97m\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (15.0, 0.0)  # Leading position\n    speed = ego_vehicle.target_speed + 11.33  # Speed differential\n    acceleration_profile = [2.5, 3.0]",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial speed before braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 3.5)  # Left-rear offset\n    speed = 28.0  # Approaching speed (km/h converted)\n    lateral_offset = 4.67  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-5.0, -3.5)  # Right-rear proximity\n    speed = 32.0  # Higher approach speed\n    lateral_offset = 1.35  # Critical distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # Rear position\n    speed = 35.0  # Approaching speed (km/h converted)\n    lane_change_direction = 'right'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right adjacent lane\n    speed = 38.0  # Higher approach speed\n    lane_change_direction = 'left'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # 25m rear offset\n    speed = 38.0  # Approaching speed\n    lateral_offset = 4.63  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-35.0, 0.0)  # 35m rear offset \n    speed = ego_vehicle.target_speed + 9.49  # Speed differential\n    acceleration_profile = [3.0, 4.2]",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # 20m front offset\n    speed = 30.0  # Approaching speed (m/s)\n    braking_capability = -8.0\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = 28.0\n    lateral_offset = 1.18  # Tailgating distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Initial speed before braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # 20m front offset\n    speed = ego_vehicle.target_speed + 11.88  # Speed differential\n    acceleration_profile = [2.8, 3.2]\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = 35.0  # Lateral approach speed\n    lane_change_direction = 'left'\n    lateral_offset = 1.88  # Conflict distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (18.0, 0.0)  # Front position\n    speed = ego_vehicle.target_speed + 12.87  # Frontal speed challenge\n    acceleration_profile = [3.2, 4.0]  # Progressive acceleration\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-22.0, 0.0)  # Rear position\n    speed = ego_vehicle.target_speed + 11.78  # Rear speed challenge \n    acceleration_profile = [3.5, 4.2]  # Aggressive acceleration",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial approach speed (m/s)\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 3.5)  # Left-rear offset\n    speed = ego_vehicle.target_speed + 11.614  # Speed differential\n    lateral_offset = 3.5\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # Front position\n    speed = ego_vehicle.target_speed\n    lane_change_direction = 'left'\n    lateral_displacement = 2.141",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # Rear position\n    speed = 35.0  # Approaching speed\n    braking_capability = -7.2  # Emergency deceleration\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right adjacent lane\n    speed = ego_vehicle.target_speed + 10.34  # Speed differential\n    acceleration_profile = [2.8, 3.2]  # Progressive acceleration",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (25.0, 0.0)  # Front position\n    speed = 40.0  # Approaching speed\n    lateral_offset = 4.8187  # Conflict distance\n    lane_change_direction = 'left'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right lateral offset\n    speed = 38.0  # Matching speed\n    braking_capability = -8.0  # Emergency stop",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (8.0, 2.45)  # Right lateral offset\n    speed = 32.0  # Approaching speed\n    lateral_offset = 3.5  # Target lateral displacement\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-12.0, 2.06)  # Rear-left offset\n    speed = 36.0  # Closing speed\n    lateral_offset = 2.5  # Conflict distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right adjacent lane\n    speed = 43.2  # 1.17m gap equivalent\n    lateral_offset = 1.17  # Critical following distance\n    lane_change_direction = 'none'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-5.8, 1.84)  # Rear-left offset\n    speed = 47.5  # Approaching speed differential\n    lane_change_direction = 'left'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.98, 0.0)  # Critical front offset\n    speed = 28.5  # Tailgating speed\n    braking_capability = -7.2  # Emergency stop capacity\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-4.2, 2.846)  # Left lateral approach\n    speed = 26.0  # Conflict speed\n    lane_change_direction = 'left'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Initial speed before braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-0.8, 3.5)  # Left-side tailgating position\n    speed = 42.0  # Matching ego's speed + closing delta\n    lateral_offset = 3.5  # Left lane position\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (15.0, -3.5)  # Right-side approach\n    speed = ego_vehicle.target_speed + 9.93  # Speed differential\n    acceleration = 2.8  # Sustained acceleration",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial approach speed (m/s)\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-18.0, 1.52)  # Rear-left offset\n    speed = 32.0  # Approaching speed with closing delta\n    lane_change_direction = 'left'\n    lateral_offset = 3.04  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = 37.0  # Higher lateral approach speed\n    lane_change_direction = 'left'\n    lateral_offset = 1.81  # Final intrusion distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # km/h conversion\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-20.0, 3.9)  # Right-side offset\n    speed = 35.0  # Approaching speed (km/h converted)\n    lane_change_direction = 'right'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.67, 0.0)  # Front proximity\n    speed = 45.0  # Tailgating speed\n    target_speed = 50.0  # Closing speed differential",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-20.0, 3.5)  # Right adjacent offset\n    speed = 38.0  # Approaching speed\n    lane_change_direction = 'left'\n    lateral_offset = 2.42  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-3.0, -3.5)  # Left-rear proximity\n    speed = 42.0  # Higher approach speed\n    longitudinal_offset = 0.94  # Critical tailgating distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # km/h conversion\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-1.25, 0.0)  # Critical rear proximity\n    speed = ego_vehicle.target_speed * 1.15  # Aggressive following\n    lane_offset = 0.0\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (3.8, 2.25)  # Front-right offset\n    speed = ego_vehicle.target_speed * 0.85\n    target_lane_index = road_network.get_lane(lane_index=1)",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (2.88, 0.0)  # Front offset\n    speed = ego_vehicle.target_speed + 9.25  # Speed differential\n    acceleration = 2.8  # Progressive surge\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (2.88, 3.5)  # Right lateral offset\n    speed = 45.0  # Approaching speed\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (18.0, 0.0)  # 18m front offset\n    speed = ego_vehicle.target_speed + 12.77  # Longitudinal speed differential\n    acceleration_profile = [2.8, 3.2]\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right lateral offset\n    speed = ego_vehicle.target_speed + 14.48  # High relative speed\n    lateral_offset = 2.85  # Conflict distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left lateral offset\n    speed = 30.0  # Initial approach speed\n    lateral_offset = 3.5  # Lane boundary alignment\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # 25m rear offset\n    speed = 45.0  # Base speed + 14.46m/s surge\n    acceleration_profile = [3.0, 4.5]  # Progressive acceleration",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # km/h conversion\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-1.194, 0.0)  # Front proximity offset\n    speed = 32.0  # km/h (tailgating speed)\n    min_space = 1.194  # Dataset-calculated distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right lateral offset\n    speed = 28.0  # km/h initial speed\n    lateral_offset = 2.85  # Calculated conflict distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # Rear offset\n    speed = ego_vehicle.target_speed + 14.36  # Speed differential\n    acceleration_profile = [3.0, 3.5]  # Progressive acceleration\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (4.4, 3.5)  # Front-left offset\n    speed = 30.0  # Approaching speed\n    lane_change_direction = 'left'\n    lateral_offset = 4.4  # Conflict distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # Front position\n    speed = 40.0  # Higher approach speed\n    lane_change_direction = 'right'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = 38.0\n    distance_to_vehicle = 0.5  # Tight following distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Speed during closure approach\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 4.67)  # Left-rear conflict position\n    speed = 28.0  # Approaching speed (dataset-calibrated)\n    lane_change_direction = 'left'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 1.82)  # Close-proximity offset\n    speed = 32.0  # Aggressive approach speed\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # km/h conversion from dataset\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 3.5)  # Left-rear offset\n    speed = 15.0  # Approaching speed (m/s)\n    lateral_offset = 3.5  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, -3.5)  # Right adjacent lane\n    speed = 14.5  # Higher approach speed\n    lateral_offset = 2.8  # Critical distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # Initial approach speed (km/h conversion)\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # Rear longitudinal offset\n    speed = 50.0  # Higher approach speed (km/h converted)\n    braking_capability = -7.2\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = 40.0  # Matching lateral approach speed\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Speed compatible with slow lane\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-5.0, 3.5)  # Right-rear offset\n    speed = 28.0  # Approaching speed with closing gap\n    lateral_offset = 1.2  # Critical following distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-3.0, -3.5)  # Left-side proximity\n    speed = 26.5  # Matching speed with negative gap\n    lateral_offset = 0.7  # Extreme tailgating distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 3.5)  # Right-rear offset\n    speed = ego_vehicle.target_speed + 14.24  # Speed differential\n    lateral_offset = 3.5\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = ego_vehicle.target_speed\n    min_gap = 0.56  # Tailgating distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial approach speed (m/s)\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-1.3, 0.0)  # Rear tailgating position\n    speed = ego_vehicle.target_speed * 1.15  # Approaching speed differential\n    min_space = 1.2  # Critical following distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (1.18, 0.0)  # Front collision proximity\n    speed = ego_vehicle.target_speed * 0.85  # Speed mismatch\n    braking_capability = -8.0  # Emergency stop capacity",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed profile\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 3.5)  # Left-rear offset\n    speed = 28.0  # Approaching speed (m/s)\n    lateral_offset = 3.5  # Conflict lateral distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-5.0, 3.5)  # Close left-rear proximity\n    speed = 32.0  # Higher approach speed\n    min_gap = 0.8  # Tailgating distance parameter",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (1.42, 0.0)  # Front collision risk\n    speed = 28.0  # Higher speed for closing gap\n    lane_offset = 0.0\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.0, 1.29)  # Right-side proximity\n    speed = 26.5  # Matching lateral approach\n    lateral_offset = 1.29  # Dataset-calculated distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Initial velocity pre-braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-18.0, 0.0)  # Rear longitudinal offset\n    speed = ego_vehicle.target_speed + 9.02  # Speed differential\n    acceleration = 2.5  # Base acceleration\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-9.5, 0.0)  # Close rear proximity\n    speed = ego_vehicle.target_speed \n    deceleration_capability = -7.5",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Initial cruising speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # 20m front offset\n    speed = ego_vehicle.target_speed + 9.89  # Speed differential\n    acceleration_profile = [2.5, 4.0]\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (35.0, 0.0)  # Lead vehicle position\n    initial_speed = 40.0  # Higher approach speed\n    braking_capability = -8.5  # Emergency deceleration",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Speed limit compliance\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # Rear position\n    speed = ego_vehicle.target_speed + 7.645  # Speed differential\n    acceleration_profile = [2.8, 3.2]\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = ego_vehicle.target_speed\n    lane_offset = 1.035  # Tailgating distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # km/h conversion\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-28.0, 0.0)  # Rear longitudinal offset\n    speed = 35.0  # Approaching speed (km/h converted)\n    braking_capability = -8.5\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left lateral offset\n    speed = ego_vehicle.target_speed + 12.15  # Speed differential\n    acceleration_profile = [3.0, 4.2]",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Initial approach speed (m/s)\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 3.5)  # Left-rear offset\n    speed = 35.0  # Approaching speed (m/s)\n    lateral_offset = 3.5  # Lane boundary alignment\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 3.5)  # Closer left-rear position\n    speed = 38.0  # Higher approach speed (m/s)\n    lateral_offset = 3.5  # Maintain lane position",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right lateral offset\n    speed = 12.0  # Approaching speed\n    lateral_change = 4.77  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 0.0)  # Rear position\n    speed = 14.0  # Higher approach speed\n    lateral_offset = 2.31  # Minimum safe distance violation",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Speed limit compliance\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-5.0, 3.5)  # Left-rear proximity\n    speed = 38.5  # Matching ego speed for tailgating\n    lateral_offset = 3.5  # Lane boundary alignment\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-8.0, 3.5)  # Stacked tailgating position\n    speed = 39.0  # Slightly higher speed\n    lateral_offset = 3.5  # Maintain lane position",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Initial approach speed (km/h converted)\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-3.2, 3.5)  # Left lateral offset\n    speed = 28.0  # Approaching speed\n    lateral_offset = 1.146  # Conflict distance\n    lane_change_direction = 'right'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-18.0, 0.0)  # Rear position\n    speed = ego_vehicle.target_speed + 13.528  # Speed differential\n    acceleration_profile = [3.0, 4.2]  # Progressive escalation",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking velocity\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.0, 1.8775)  # Right lateral offset\n    speed = 28.0  # Approaching speed\n    lateral_offset = 3.2  # Conflict displacement\n    lane_change_direction = 'left'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (18.0, 0.0)  # Front longitudinal offset\n    speed = ego_vehicle.target_speed + 5.4428  # Speed differential\n    acceleration_profile = [2.8, 3.2]",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego.initial_position + (-25.0, 3.5)  # Rear-left offset\n    speed = 18.0  # Approaching speed\n    lane_change_direction = 'left'\n    lateral_offset = 4.916  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego.initial_position + (15.0, -3.5)  # Front-right offset\n    speed = 22.0  # Higher approach speed\n    lane_change_direction = 'right'\n    lateral_offset = 4.387  # Intrusion distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Initial speed before braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-1.37, 3.5)  # Left-rear critical proximity\n    speed = 28.0  # Aggressive following speed\n    braking_capability = -7.2  # Emergency stop capacity\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (5.0, -3.2)  # Right-front conflict position\n    speed = 22.0  # Pre-braking speed\n    lateral_offset = 2.85  # Lateral intrusion distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Initial speed from braking pattern\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-8.0, 0.0)  # Critical rear proximity\n    speed = 27.0  # 0.57m gap equivalent\n    collision_distance = 0.573\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = ego_vehicle.target_speed + 10.33  # Speed differential\n    lateral_offset = 2.85",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)  # Left adjacent lane\n    position = ego_vehicle.position + (-18.0, 3.5)  # Left-rear offset\n    speed = 22.5  # Approaching speed\n    lateral_offset = 2.34  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-8.0, 3.5)  # Left-side proximity\n    speed = 20.0  # Initial speed\n    braking_capability = -6.0",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # 35 km/h baseline\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # 25m rear offset\n    speed = 35.0 + 6.204  # Speed surplus implementation\n    acceleration = 2.0\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-15.0, 0.0)  # Secondary rear position\n    speed = 35.0\n    braking_capability = -8.0",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (15.0, 3.5)  # Right parallel offset\n    speed = ego_vehicle.target_speed + 7.88  # Speed differential\n    lateral_offset = 3.5\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-0.59, 0.0)  # Critical rear proximity\n    speed = ego_vehicle.target_speed + 2.5\n    lane_offset = 0.59",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)  # Left adjacent lane\n    position = ego_vehicle.position + (-18.0, 3.5)  # Left-rear offset\n    speed = ego_vehicle.target_speed + 10.7  # Speed differential\n    lateral_offset = 3.28  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-8.0, 3.5)  # Left proximity\n    speed = 38.0  # Higher approach speed\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial speed before braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 3.5)  # Right-rear offset\n    speed = 12.0  # Approaching speed\n    lateral_offset = 4.72  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (20.0, 0.0)  # Front position\n    speed = 15.0  # Higher approach speed\n    lane_change_direction = 'left'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Speed limit compliance\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-1.26, 0.0)  # Critical rear gap\n    speed = 38.5  # Approaching speed (tailgating pattern)\n    lane_offset = 0.0\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-2.28, -3.5)  # Right-lane intrusion\n    speed = 36.0  # Converging speed\n    lateral_offset = 2.28",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Speed limit compliance\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-20.0, 4.25)  # Front-right offset\n    speed = 28.0  # Approaching speed (dataset-calibrated)\n    lane_change_direction = 'right'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left adjacent lane\n    speed = 25.5  # Lateral approach speed\n    lateral_offset = 2.0",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-18.0, 3.5)  # Left-rear offset\n    speed = ego_vehicle.target_speed + 7.98  # Speed differential\n    lateral_offset = 3.25  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (22.0, 0.0)  # Front position\n    speed = 40.0  # Approaching speed\n    braking_capability = -6.5  # Emergency braking",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed from dataset\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-0.91, 0.0)  # Critical rear offset\n    speed = ego_vehicle.target_speed + 5.2  # Tailgating speed differential\n    min_space = 0.5  # Aggressive following\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 2.54)  # Left lateral conflict offset\n    speed = 33.5  # Matching approach speed\n    lateral_offset = 3.1  # Unsafe merge target",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # km/h conversion from original data\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right lateral offset\n    speed = 40.0  # Approaching speed (km/h converted)\n    lateral_offset = 2.8  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 0.0)  # Rear longitudinal offset\n    speed = 50.0  # Higher approach speed\n    acceleration_profile = [2.0, 3.5]",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (0.0, 3.5)  # Left lateral offset\n    speed = 30.0  # Approaching speed\n    lateral_offset = 2.34  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-18.0, 0.0)  # Rear position\n    speed = 33.0  # Higher approach speed\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (15.0, -3.5)  # Right lateral offset\n    speed = ego_vehicle.target_speed + 14.48  # Speed differential\n    acceleration_profile = [2.8, 3.2]\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-10.0, 3.5)  # Left adjacent lane\n    speed = 38.0  # Converging speed\n    lane_change_direction = 'left'",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 40.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)  # Right adjacent lane\n    position = ego_vehicle.position + (-8.0, 3.5)  # Right-rear offset\n    speed = ego_vehicle.target_speed + 6.28  # Speed differential\n    acceleration = 2.5\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-2.5, 3.5)  # Close right proximity\n    speed = ego_vehicle.target_speed + 3.0\n    min_gap = 1.3  # Tailgating parameter",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 30.0  # Initial approach speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (-8.0, 3.5)  # Left adjacent lane\n    speed = 28.0  # Converging speed\n    lateral_offset = 1.334  # Conflict distance\n    lane_change_direction = 'right'\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (1.052, 0.0)  # Front position\n    speed = ego_vehicle.target_speed - 5.0  # Speed differential\n    min_gap = 0.5  # Aggressive spacing",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 45.0  # km/h conversion from original data\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (5.0, 0.0)  # Front position with critical gap\n    speed = 42.0  # km/h converted speed\n    lane_offset = 0.0  # Same lane alignment\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)\n    position = ego_vehicle.position + (0.0, 3.5)  # Right adjacent lane\n    speed = 38.0  # Approaching speed\n    lateral_offset = 2.8  # Conflict distance",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 25.0  # Initial speed before braking\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (-25.0, 3.5)  # Left-rear offset\n    speed = 28.0  # Approaching speed (10.08 m/s)\n    lateral_offset = 3.5  # Conflict distance\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=0)\n    position = ego_vehicle.position + (15.0, 0.0)  # Front position\n    speed = 18.0  # Lower speed for conflict potential\n    lane_change_direction = 'right'",
    "ego_vehicle = HumanLikeVehicle:  \n    lane = ego.lane  \n    position = ego.initial_position  \n    heading = ego.heading  \n    target_speed = 40.0  # Initial approach speed  \n    behavior_type = IDMBehavior  \n    \nadv_vehicle1 = InterActionVehicle:  \n    lane = road_network.get_lane(lane_index=0)  \n    position = ego_vehicle.position + (-8.0, 3.514)  # Left lateral offset  \n    speed = 35.0  # Approaching speed  \n    lane_change_direction = 'right'  \n    \nadv_vehicle2 = InterActionVehicle:  \n    lane = road_network.get_lane(lane_index=0)  \n    position = ego_vehicle.position + (-1.456, 0.0)  # Close rear position  \n    speed = ego_vehicle.target_speed + 5.0  # Tailgating pattern",
    "ego_vehicle = HumanLikeVehicle:\n    lane = ego.lane\n    position = ego.initial_position\n    heading = ego.heading\n    target_speed = 35.0  # Pre-braking speed\n    behavior_type = IDMBehavior\n    \nadv_vehicle1 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=1)  # Right adjacent lane\n    position = ego_vehicle.position + (18.0, 3.5)  # Right-side offset\n    speed = ego_vehicle.target_speed + 10.93  # Speed differential\n    lateral_offset = 3.5  # Lane width alignment\n    \nadv_vehicle2 = InterActionVehicle:\n    lane = road_network.get_lane(lane_index=2)  # Left adjacent lane\n    position = ego_vehicle.position + (22.0, -3.5)  # Left-side offset\n    speed = ego_vehicle.target_speed + 8.27  # Lateral approach speed\n    lateral_offset = -3.5  # Opposite direction offset"
  ],
  "behavior": [
    "ego_behavior = IDMBehavior:\n    target_speed = 30.0\n    normal_acceleration = 2.0\n    emergency_deceleration = -4.5  # Braking magnitude\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 20.0  # Activation threshold\n    reaction_time = 1.224\n    deceleration_profile = [-3.0, -4.0, -5.0]  # Progressive braking\n    \nadv2_behavior = LateralBrakeBehavior:\n    lateral_offset = 3.5\n    reaction_delay = 1.928 \n    max_deceleration = -6.0\n    steering_effect = 0.15  # Lateral movement during brake",
    "ego_behavior = IDMBehavior:\n    min_gap = 2.5  # Aggressive driving pattern\n    max_acceleration = 2.8  # m/s²\n    emergency_brake = -6.0  # Hard braking capability\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = TimeToCollision(3.0)\n    lateral_acceleration = 0.8  # m/s²\n    max_lateral_offset = 3.614  # Dataset-specific value\n    completion_time = 4.2  # seconds\n    \nadv2_behavior = ProgressiveBrakeBehavior:\n    activation_delay = 2.753  # Precise reaction time\n    brake_phases = [\n        (0-1s: -2.5 m/s²),\n        (1-2s: -4.0 m/s²),\n        (2s+: -6.0 m/s²)\n    ]\n    steering_compensation = 0.1  # Lateral stability",
    "ego_behavior = IDMBehavior:\n    min_gap = 2.8  # Tight spacing\n    max_acceleration = 2.5\n    emergency_brake = -5.5  # Collision avoidance\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(3.6)\n    lateral_acceleration = 0.85  # m/s²\n    max_lateral_offset = 3.59  # Conflict distance\n    completion_time = 2.8  # Aggressive timing\n    \nadv2_behavior = IntrusiveMergeBehavior:\n    activation_delay = 1.2  # Immediate response\n    lateral_velocity = 1.2  # m/s\n    brake_profile = [-3.0, -4.5]\n    intrusion_distance = 1.90  # Final offset",
    "ego_behavior = IDMBehavior:\n    min_gap = 3.2  # Conservative spacing\n    emergency_deceleration = -5.2  # Observed braking magnitude\n    reaction_time = 1.35  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(8.0)\n    direction = 'right'\n    lateral_acceleration = 0.78  # m/s²\n    max_offset = 3.0  # Final lateral displacement\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 11.33\n    acceleration_phases = [\n        (0-2s: 2.5 m/s²),\n        (2s+: 3.0 m/s²)\n    ]\n    speed_maintain_duration = 5.0",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Hard braking observed\n    min_safe_gap = 4.0  # Reduced safety margin\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(15.0)\n    lateral_acceleration = 0.95  # Aggressive maneuver\n    direction = 'left'\n    max_lateral_offset = 4.67  # Dataset-specific conflict distance\n    \nadv2_behavior = IntrusiveMergeBehavior:\n    activation_delay = 0.8  # Immediate response\n    lateral_velocity = 1.8  # m/s (sharp turn)\n    intrusion_distance = 1.35  # Final collision risk offset\n    brake_profile = [-4.0, -6.0]  # Emergency stop pattern",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.8  # Hard braking observed\n    min_safe_gap = 3.5  # Reduced safety margin\n    reaction_time = 1.2  # Fast response\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(25.0)\n    lateral_acceleration = 0.9  # Aggressive maneuver\n    direction = 'right'\n    max_lateral_offset = 2.99  # Conflict distance\n    \nadv2_behavior = IntrusiveMergeBehavior:\n    activation_delay = 0.7  # Immediate response\n    lateral_velocity = 1.5  # m/s (sharp turn)\n    intrusion_distance = 3.25  # Final collision risk offset\n    brake_profile = [-4.5, -6.5]  # Emergency stop pattern",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(25.0)\n    lateral_acceleration = 0.85  # m/s²\n    direction = 'right'\n    max_lateral_offset = 4.63  # Dataset-specific conflict distance\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 9.49\n    acceleration_phases = [\n        (0-2s: 3.0 m/s²),\n        (2s+: 4.2 m/s²)\n    ]\n    speed_maintain_duration = 6.0",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Collision avoidance braking\n    min_safe_gap = 2.5  # Reduced safety margin\n    reaction_time = 1.2  # Fast response\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = DistanceThreshold(20.0)\n    reaction_delay = 1.658  # Dataset-specific latency\n    deceleration_profile = [-4.0, -6.0, -8.0]  # Progressive braking\n    \nadv2_behavior = TailgatingBehavior:\n    distance_maintain = 1.18  # Critical following distance\n    acceleration_range = [2.5, -5.0]\n    lateral_compensation = 0.15  # Offset maintenance",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(20.0)\n    lateral_acceleration = 0.82  # m/s²\n    direction = 'left'\n    max_lateral_offset = 1.88  # Dataset-specific conflict distance\n    \nadv2_behavior = IntrusiveMergeBehavior:\n    activation_delay = 0.9  # Response time\n    lateral_velocity = 1.4  # m/s \n    intrusion_distance = 1.35  # Final collision risk offset\n    brake_profile = [-3.5, -5.5]  # Emergency stop pattern",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 2.8  # Tight spacing configuration\n    reaction_time = 1.25  # Fast response pattern\n    \nadv1_behavior = ProgressiveAccelerationBehavior:\n    speed_increment = 12.87\n    acceleration_phases = [\n        (0-2s: 3.2 m/s²),\n        (2s+: 4.0 m/s²)\n    ]\n    maintain_duration = 6.0\n    \nadv2_behavior = AggressiveTailgatingBehavior:\n    speed_increment = 11.78\n    acceleration_phases = [\n        (0-1s: 3.5 m/s²),\n        (1-3s: 4.2 m/s²)\n    ]\n    safe_distance_ratio = 0.6  # Reduced following distance",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Hard braking profile\n    min_safe_gap = 3.8  # Reduced safety buffer\n    reaction_time = 1.25  # Response latency\n    \nadv1_behavior = SpeedSurgeBehavior:\n    acceleration_phase = [\n        (0-2s: +5.8 m/s²),\n        (2s+: +5.814 m/s²)\n    ]\n    max_speed_delta = 11.614\n    \nadv2_behavior = CriticalLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(2.141)\n    lateral_acceleration = 0.95  # Aggressive maneuver\n    direction = 'left'\n    max_lateral_shift = 2.141  # Conflict distance\n    brake_synchronization = -4.0  # Compensatory braking",
    "ego_behavior = IDMBehavior:\n    min_gap = 2.8  # Aggressive spacing\n    emergency_deceleration = -6.5  # Observed braking magnitude\n    reaction_time = 1.25  # Human-like response\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 18.0  # Activation threshold\n    reaction_time = 2.03  # Dataset-specific latency\n    deceleration_profile = [-3.5, -5.0, -7.2]  # Escalating braking\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 10.34  # Dataset-calculated value\n    acceleration_phases = [\n        (0-2s: 2.8 m/s²),\n        (2s+: 3.2 m/s²)\n    ]\n    speed_maintain_duration = 6.0  # Sustained acceleration",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Observed braking magnitude\n    min_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.2  # Human response pattern\n    \nadv1_behavior = UnsafeLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(4.8187)\n    lateral_acceleration = 0.95  # Aggressive maneuver\n    direction = 'left'\n    completion_time = 2.4  # Rapid lane change\n    \nadv2_behavior = SuddenBrakeBehavior:\n    activation_delay = 1.4816  # Dataset-specific reaction time\n    brake_phases = [\n        (0-1s: -4.0 m/s²),\n        (1s+: -8.0 m/s²)\n    ]\n    lateral_stability = 0.15  # Maintain lane position",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(8.0)\n    lateral_acceleration = 0.85  # m/s²\n    direction = 'left'\n    max_lateral_offset = 2.45  # Conflict distance\n    \nadv2_behavior = IntrusiveMergeBehavior:\n    activation_delay = 1.1  # Delayed response\n    lateral_velocity = 1.2  # m/s \n    intrusion_distance = 2.06  # Final conflict offset\n    brake_profile = [-3.5, -5.0]  # Progressive braking",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.05  # Fast response profile\n    \nadv1_behavior = TailgateBehavior:\n    trigger_condition = DistanceToEgo(1.2)\n    maintain_gap = 1.17  # Dataset-specific critical distance\n    acceleration_profile = [-3.0, -4.5]  # Progressive braking\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    trigger_condition = TimeToCollision(2.1)\n    lateral_acceleration = 0.92  # m/s²\n    direction = 'left'\n    intrusion_distance = 1.84  # Final conflict offset\n    brake_pattern = [-2.8, -5.2]  # Compound deceleration",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 1.2  # Compressed safety margin\n    reaction_time = 0.95  # Fast response to tailgating\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 1.5  # Late activation threshold\n    deceleration_profile = [-5.0, -6.5, -7.2]  # Progressive braking\n    reaction_delay = 0.65  # Delayed response\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    lateral_acceleration = 1.2  # Aggressive steering\n    trigger_condition = DistanceThreshold(3.0)\n    max_lateral_offset = 2.846  # Conflict distance\n    overlap_duration = 2.1  # Dangerous interaction period",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.25  # Fast response pattern\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 0.8  # Critical proximity activation\n    deceleration_profile = [-4.0, -6.0, -8.0]  # Escalating braking\n    steering_lock = 0.05  # Maintains lane position\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 9.93 \n    acceleration_phases = [\n        (0-2s: 2.8 m/s²),\n        (2-4s: 3.2 m/s²),\n        (4s+: 2.5 m/s²)\n    ]\n    speed_maintain_duration = 6.0",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.5  # Reduced safety buffer\n    reaction_time = 1.25  # Response latency\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(18.0)\n    lateral_acceleration = 0.88  # m/s² (aggressive)\n    direction = 'left'\n    max_lateral_offset = 3.04  # Dataset-specific conflict\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = TimeToCollision(2.8)\n    lateral_acceleration = 1.15  # m/s² (abrupt)\n    direction = 'left' \n    max_lateral_offset = 1.81  # Critical proximity",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.5  # Observed braking magnitude\n    min_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(20.0)\n    lateral_acceleration = 0.85  # Aggressive maneuver\n    max_lateral_offset = 3.9  # Conflict distance\n    completion_time = 3.0  # Rapid lane change\n    \nadv2_behavior = TailgatingBehavior:\n    min_distance = 0.67  # Critical gap\n    max_acceleration = 3.5  # Closing behavior\n    brake_profile = [-4.0, -6.0]  # Emergency stop pattern",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 2.5  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(2.4)\n    lateral_acceleration = 0.88  # Aggressive maneuver\n    direction = 'left'\n    max_lateral_offset = 2.42  # Dataset-specific conflict distance\n    \nadv2_behavior = TailgatingBehavior:\n    activation_distance = 1.0\n    deceleration_profile = [-3.5, -5.0]\n    safe_time_headway = 0.5  # Dangerous following\n    steering_compensation = 0.08  # Lateral stability",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Consecutive braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.05  # Fast response\n    \nadv1_behavior = TailgateBehavior:\n    trigger_distance = 1.25\n    deceleration_profile = [-3.5, -4.8] \n    following_gap_ratio = 0.3\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    trigger_condition = LateralDistance(2.25)\n    lateral_acceleration = 1.2  # m/s² \n    direction = 'right'\n    completion_time = 2.4  # Aggressive maneuver duration",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.8  # Observed braking magnitude\n    min_safe_gap = 3.2  # Reduced following distance\n    reaction_time = 1.15  # Fast response threshold\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 9.25\n    acceleration_phases = [\n        (0-1s: 2.8 m/s²),\n        (1s+: 3.2 m/s²)\n    ]\n    speed_maintain_duration = 4.0\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(2.88)\n    lateral_acceleration = 0.95  # Aggressive maneuver\n    direction = 'right'\n    max_lateral_offset = 3.5  # Final displacement\n    completion_time = 2.5  # Rapid execution",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_safe_gap = 3.0  # Reduced safety margin\n    reaction_time = 1.25  # Typical response delay\n    \nadv1_behavior = SuddenAccelerationBehavior:\n    speed_increment = 12.77\n    acceleration_phases = [\n        (0-2s: 2.8 m/s²),\n        (2s+: 3.2 m/s²)\n    ]\n    speed_maintain_duration = 6.0\n    \nadv2_behavior = LateralAccelerationBehavior:\n    lateral_speed = 1.4  # m/s\n    acceleration_profile = [\n        (0-1s: 2.5 m/s²),\n        (1-3s: 3.5 m/s²),\n        (3s+: 4.0 m/s²)\n    ]\n    max_lateral_offset = 3.5  # Lane boundary constraint",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.2  # Response delay\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 15.0  # Activation threshold\n    reaction_time = 1.853  # Dataset-recorded delay\n    deceleration_profile = [-3.5, -4.8, -6.0]  # Escalating braking\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 14.457  # Precise dataset value\n    acceleration_phases = [\n        (0-2s: 3.0 m/s²),\n        (2s+: 4.5 m/s²)\n    ]\n    speed_maintain_duration = 5.0  # Sustained acceleration",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 2.0  # Reduced safety margin\n    reaction_time = 1.35  # Response delay\n    \nadv1_behavior = TailgatingBehavior:\n    trigger_distance = 1.5  # Activation threshold\n    deceleration_profile = [-3.2, -4.5]  # Progressive braking\n    following_gap = 1.194  # Dataset-specific distance\n    \nadv2_behavior = SuddenBrakeBehavior:\n    reaction_delay = 1.971  # Precise reaction timing\n    brake_phases = [\n        (0-0.5s: -2.8 m/s²),\n        (0.5s+: -5.2 m/s²)\n    ]\n    lateral_influence = 0.15  # Rightward drift magnitude",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 14.36\n    acceleration_phases = [\n        (0-2s: 3.0 m/s²),\n        (2s+: 3.5 m/s²)\n    ]\n    speed_maintain_duration = 5.0\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(4.4)\n    lateral_acceleration = 0.85  # m/s²\n    direction = 'left'\n    max_lateral_offset = 4.4  # Conflict distance\n    completion_time = 2.5  # Aggressive maneuver timing",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 15.0  # Activation threshold\n    reaction_delay = 1.432  # Dataset-specific parameter\n    deceleration_profile = [-4.0, -6.0]  # Progressive braking\n    \nadv2_behavior = TailgatingBehavior:\n    following_distance = 0.5  # Critical proximity\n    acceleration_profile = [3.0, 4.5]  # Aggressive closing\n    lateral_offset = 3.5  # Lane position maintenance",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(25.0)\n    lateral_acceleration = 0.88  # Dataset-specific maneuver\n    direction = 'left'\n    max_lateral_offset = 4.67  # Conflict distance\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(15.0)\n    lateral_acceleration = 1.15  # Aggressive steering\n    direction = 'right' \n    max_lateral_offset = 1.82  # Critical proximity",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Observed braking magnitude\n    min_safe_gap = 3.2  # Reduced safety margin\n    reaction_time = 1.8  # Human response delay\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 18.0  # Activation threshold\n    reaction_delay = 2.296  # Dataset-specific reaction time\n    deceleration_profile = [-3.5, -4.5, -5.5]  # Progressive braking\n    \nadv2_behavior = EmergencyStopBehavior:\n    activation_condition = TimeToCollision(2.5)\n    reaction_delay = 2.102  # Quick response pattern\n    max_deceleration = -7.0  # Hard braking capability\n    lateral_stability = 0.12  # Steering compensation",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.15  # Fast response pattern\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = TimeToCollision(2.5)\n    reaction_time = 1.298  # Dataset-specific parameter\n    deceleration_profile = [-4.0, -6.0, -7.2]\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(2.088)\n    lateral_acceleration = 0.85  # m/s²\n    direction = 'right'\n    max_lateral_offset = 3.5  # Final displacement\n    completion_time = 2.4  # Aggressive maneuver duration",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Emergency braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.15  # Fast response to immediate threats\n    \nadv1_behavior = CloseFollowingBehavior:\n    trigger_distance = 1.2\n    deceleration_profile = [-3.5, -5.0]\n    follow_distance_variance = 0.3\n    \nadv2_behavior = AggressiveTailgatingBehavior:\n    activation_threshold = 0.7 \n    pressure_acceleration = 1.8  # Forward push effect\n    brake_test_frequency = 2.5  # Frequent deceleration challenges\n    lateral_sway = 0.15  # Indecisive lateral movement",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    reaction_time = 1.15  # Response delay from dataset\n    \nadv1_behavior = SuddenSpeedUpBehavior:\n    acceleration = 4.0  # m/s²\n    trigger_condition = DistanceThreshold(25.0)\n    max_speed = ego_vehicle.target_speed + 14.24\n    \nadv2_behavior = CloseFollowingBehavior:\n    min_distance = 0.56\n    deceleration_profile = [-3.5, -5.0] \n    steering_compensation = 0.12  # Lateral stability",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -7.2  # Hard braking profile\n    min_space_keeping = 1.5  # Reduced safety margin\n    reaction_time = 0.9  # Fast response requirement\n    \nadv1_behavior = TailgateBehavior:\n    trigger_condition = DistanceToEgo(1.5)\n    follow_distance = 1.3  # Dataset-specific value\n    acceleration_profile = [2.8, 3.2]  # Aggressive pursuit pattern\n    safety_override = False\n    \nadv2_behavior = EmergencyBrakeBehavior:\n    activation_threshold = 1.2  # Critical distance\n    deceleration_curve = [-4.0, -6.0, -8.0]  # Progressive braking\n    lateral_stability = 0.15  # Steering compensation",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Hard braking magnitude\n    min_safe_gap = 4.0  # Reduced safety margin\n    reaction_time = 1.15  # Fast response profile\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = DistanceToEgo(15.0)\n    reaction_delay = 2.747  # Dataset-specific reaction time\n    deceleration_profile = [-3.0, -5.5, -7.0]  # Progressive braking\n    \nadv2_behavior = TailgatingBehavior:\n    min_distance = 0.8  # Critical following gap\n    acceleration_profile = [3.5, 4.2]  # Aggressive closing behavior\n    steering_compensation = 0.15  # Lateral position maintenance",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.0  # Fast response\n    \nadv1_behavior = AggressiveTailgatingBehavior:\n    trigger_condition = DistanceThreshold(1.5)\n    deceleration_profile = [-3.5, -5.0]  # Progressive braking\n    safety_margin = 0.5  # Critical gap acceptance\n    \nadv2_behavior = LateralIntrusionBehavior:\n    activation_delay = 0.8  # Immediate reaction\n    lateral_acceleration = 1.2  # m/s²\n    max_offset = 1.29  # Maintain recorded distance\n    brake_compensation = -4.0  # Speed matching",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 3.0  # Reduced safety margin\n    reaction_time = 1.15  # Fast response pattern\n    \nadv1_behavior = ProgressiveAccelerationBehavior:\n    speed_increment = 9.02\n    acceleration_phases = [\n        (0-2s: 2.5 m/s²),\n        (2s+: 3.5 m/s²)\n    ]\n    duration = 5.0\n    \nadv2_behavior = DelayedBrakeBehavior:\n    activation_delay = 1.42  # Reaction time parameter\n    brake_profile = [\n        (0-1s: -3.0 m/s²),\n        (1s+: -5.5 m/s²)\n    ]\n    lateral_stability = 0.85  # Maintain lane during braking",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Conservative spacing\n    reaction_time = 1.45  # Response delay\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 9.89\n    acceleration_phases = [\n        (0-2s: 2.5 m/s²),\n        (2s+: 4.0 m/s²)\n    ]\n    speed_maintain_duration = 5.0\n    \nadv2_behavior = SuddenBrakeBehavior:\n    activation_delay = 2.12  # Reaction time parameter\n    deceleration_profile = [\n        (0-1s: -4.0 m/s²),\n        (1-2s: -6.5 m/s²),\n        (2s+: -8.5 m/s²)\n    ]\n    steering_compensation = 0.2  # Lateral stability",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.8  # Hard braking magnitude\n    min_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = SpeedIncreaseBehavior:\n    acceleration_phases = [\n        (0-2s: 2.8 m/s²),\n        (2s+: 3.2 m/s²)\n    ]\n    target_speed_differential = 7.645\n    \nadv2_behavior = TailgatingBehavior:\n    min_following_distance = 1.035\n    aggression_factor = 0.85\n    lane_keeping_probability = 0.95  # Persistent lateral pressure",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.8  # Observed braking magnitude\n    min_gap = 2.8  # Tight spacing configuration\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = DelayedBrakeBehavior:\n    trigger_condition = TimeToCollision(2.5)\n    reaction_delay = 2.558  # Dataset-specific latency\n    deceleration_sequence = [-3.5, -6.0, -8.5]\n    \nadv2_behavior = SpeedEscalationBehavior:\n    speed_increment = 12.15  # m/s differential\n    acceleration_phases = [\n        (0-2s: 3.0 m/s²),\n        (2s+: 4.2 m/s²)\n    ]\n    speed_maintain_duration = 5.8",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Hard braking capability\n    min_safe_gap = 3.2  # Reduced safety margin\n    reaction_time = 1.15  # Fast response threshold\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = DistanceToEgo(25.0)\n    reaction_time = 1.66  # Dataset-specific reaction delay\n    deceleration_profile = [-3.0, -4.5, -6.0]  # Progressive braking\n    \nadv2_behavior = SuddenBrakeBehavior:\n    trigger_condition = TimeToCollision(2.17)\n    reaction_time = 2.17  # Extended reaction latency\n    deceleration_profile = [-4.0, -5.5, -7.0]  # Aggressive braking pattern",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 3.2  # Reduced safety margin\n    reaction_time = 1.25  # Response latency\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(4.77)\n    direction = 'right'\n    lateral_acceleration = 0.85  # Aggressive maneuver\n    max_lateral_offset = 4.77  # Conflict distance\n    \nadv2_behavior = ConcurrentLaneChangeBehavior:\n    activation_delay = 0.8  # Simultaneous maneuver\n    lateral_velocity = 1.2  # m/s\n    longitudinal_offset = 2.31  # Dangerous proximity\n    brake_profile = [-3.5, -5.0]  # Compound risk",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.8  # Hard braking capability\n    min_safe_gap = 1.2  # Reduced safety margin\n    reaction_time = 0.8  # Fast response time\n    \nadv1_behavior = TailgatingBehavior:\n    trigger_distance = 0.52  # Dataset-specific distance\n    deceleration_profile = [-4.0, -5.5, -7.0]\n    follow_distance = 0.5  # Dangerous proximity\n    \nadv2_behavior = ProgressiveTailgatingBehavior:\n    activation_delay = 1.2  # Response time\n    phase_parameters = [\n        (0-2s: maintain 0.86m gap),\n        (2s+: close to 0.5m gap)\n    ]\n    max_deceleration = -8.0  # Aggressive braking",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(3.2)\n    lateral_acceleration = 0.85  # m/s²\n    direction = 'right'\n    max_lateral_offset = 1.146  # Dataset-specific conflict distance\n    completion_time = 2.4  # Aggressive maneuver duration\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 13.528  # Precise speed differential\n    acceleration_phases = [\n        (0-1.5s: 3.0 m/s²),\n        (1.5s+: 4.2 m/s²)\n    ]\n    speed_maintain_duration = 3.8  # Sustained risk period",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 2.75  # Reduced safety buffer\n    reaction_time = 1.42  # Response latency\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(1.8775)\n    lateral_acceleration = 0.92  # m/s²\n    direction = 'left'\n    max_lateral_offset = 3.2  # Final displacement\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 5.4428\n    acceleration_phases = [\n        (0-1.5s: 2.8 m/s²),\n        (1.5s+: 3.2 m/s²)\n    ]\n    speed_maintain_duration = 4.5",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 4.0  | Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(25.0)\n    lateral_acceleration = 0.85  # m/s²\n    direction = 'left'\n    max_lateral_offset = 4.916  # Dataset-specific conflict\n    \nadv2_behavior = IntrusiveMergeBehavior:\n    activation_delay = 0.9  # Aggressive timing\n    lateral_velocity = 1.4  # m/s \n    intrusion_distance = 4.387  # Final risk offset\n    brake_profile = [-3.5, -5.0]  # Progressive braking",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.8  # Observed braking magnitude\n    min_safe_gap = 1.5  # Compressed safety margin\n    reaction_time = 1.25  # Fast response pattern\n    \nadv1_behavior = AggressiveFollowingBehavior:\n    trigger_distance = 1.37  # Critical gap threshold\n    acceleration_profile = [3.0, 2.5]  # Pushy acceleration pattern\n    safety_override = False  # Risk-tolerant logic\n    \nadv2_behavior = DelayedBrakeBehavior:\n    reaction_delay = 1.594  # Dataset-specific latency\n    brake_phases = [\n        (0-0.5s: -2.0 m/s²),\n        (0.5-1.5s: -5.0 m/s²),\n        (1.5s+: -7.2 m/s²)\n    ]\n    lateral_compensation = 0.15  # Drift during braking",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 1.2  # Compressed safety margin\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = TailgateBehavior:\n    trigger_distance = 5.0\n    deceleration_profile = [-4.5, -6.0] \n    safe_distance_violation = 0.573\n    \nadv2_behavior = SpeedingBehavior:\n    speed_increment = 10.33\n    lateral_intrusion = 3.5\n    acceleration_profile = [3.0, 3.5]\n    conflict_angle = 25°",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 3.0  # Reduced safety margin\n    reaction_time = 1.42  # Response delay\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(18.0)\n    direction = 'right'\n    lateral_acceleration = 0.85\n    max_lateral_offset = 2.34  # Dataset-specific conflict\n    \nadv2_behavior = SuddenBrakeBehavior:\n    activation_delay = 2.844  # Recorded reaction time\n    deceleration_profile = [-3.5, -4.5]  # Progressive braking\n    steering_compensation = 0.12",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.204  # Matching speed differential\n    reaction_time = 1.2  # Standard human response\n    min_gap = 3.0  # Conservative spacing\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 6.204\n    acceleration_profile = [2.0, 2.5]\n    speed_maintain_duration = 5.0\n    \nadv2_behavior = SuddenBrakeBehavior:\n    activation_delay = 1.571  # Observed reaction time\n    deceleration_phases = [\n        (0-1s: -4.0 m/s²),\n        (1s+: -6.0 m/s²)\n    ]\n    steering_compensation = 0.08",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 2.0  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 7.88\n    acceleration_phases = [(0-3s: 2.8 m/s²)]\n    speed_maintain_duration = 5.0\n    \nadv2_behavior = TailgateBehavior:\n    min_gap = 0.59\n    follow_aggressiveness = 0.95\n    brake_reaction_time = 0.8  # Aggressive response\n    safety_margin = 0.3",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 3.5  # Reduced safety margin\n    reaction_time = 1.25  # Emergency response\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 10.7\n    acceleration_phases = [\n        (0-1s: 5.35 m/s²),\n        (1s+: 10.7 m/s²)\n    ]\n    speed_maintain_duration = 4.0\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(3.28)\n    direction = 'right'\n    lateral_acceleration = 0.95  # Aggressive maneuver\n    max_lateral_offset = 3.5  # Final displacement\n    collision_check = False  # Unsafe pattern",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.0  # Observed braking magnitude\n    min_gap = 3.2  # Tight spacing pattern\n    reaction_time = 1.8  # Human-like response\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = DistanceThreshold(4.72)\n    reaction_delay = 2.982 \n    deceleration_profile = [-3.0, -4.5, -6.0]\n    lateral_effect = 0.1  # Rightward drift\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    direction = 'left'\n    lateral_acceleration = 0.85  # m/s²\n    intrusion_distance = 4.72  # Critical offset\n    completion_time = 2.5  # Aggressive timing",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Emergency braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.18  # Fast response\n    \nadv1_behavior = TailgatingBehavior:\n    trigger_condition = DistanceToEgo(1.5)\n    acceleration_profile = [2.8, 3.2]  # Closing speed pattern\n    min_gap = 0.8  # Dangerous following\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    trigger_condition = LateralOffset(2.28)\n    direction = 'right'\n    lateral_acceleration = 0.92  # Aggressive maneuver\n    completion_time = 2.4  # Abrupt change\n    collision_risk = 0.35",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 3.0  # Reduced safety margin\n    reaction_time = 1.35  # Human-like response\n    \nadv1_behavior = UnsafeLaneChangeBehavior:\n    trigger_condition = DistanceToEgo(20.0)\n    lateral_acceleration = 0.95  # Aggressive maneuver\n    direction = 'right'\n    max_lateral_offset = 4.25  # Conflict displacement\n    \nadv2_behavior = SuddenBrakeBehavior:\n    activation_delay = 1.12  # Dataset-specific reaction time\n    deceleration_profile = [-3.5, -5.0, -6.5]  # Progressive braking\n    steering_compensation = 0.12  # Lateral stability",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 3.0  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 7.98\n    acceleration_phases = [\n        (0-2s: 2.8 m/s²),\n        (2s+: 3.2 m/s²)\n    ]\n    lateral_offset_maintenance = 3.25\n    \nadv2_behavior = DelayedBrakeBehavior:\n    activation_delay = 2.101  # Reaction time parameter\n    brake_profile = [-3.5, -5.0, -6.5]  # Progressive braking\n    steering_compensation = 0.12  # Path correction",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.05  # Fast response\n    \nadv1_behavior = TailgateBehavior:\n    trigger_distance = 1.2\n    acceleration_profile = [2.8, 3.2]  # Closing speed increase\n    max_proximity = 0.5  # Extreme following\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(3.0)\n    direction = 'right'\n    lateral_acceleration = 1.2  # Aggressive steering\n    merge_angle = 15.0  # Sharp trajectory\n    abort_threshold = 2.54  # Critical clearance",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = DistanceThreshold(15.0)\n    reaction_delay = 1.296  # Dataset-specific parameter\n    deceleration_profile = [-3.2, -4.8, -6.0]\n    lateral_stability = 0.12  # Rightward drift\n    \nadv2_behavior = ProgressiveBrakeBehavior:\n    activation_delay = 1.063  # Precise reaction timing\n    brake_phases = [\n        (0-1s: -2.8 m/s²),\n        (1-2s: -4.2 m/s²),\n        (2s+: -5.5 m/s²)\n    ]\n    longitudinal_offset = -25.0  # Rear position maintenance",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.42  # Response delay\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_distance = 15.0  # Activation threshold\n    reaction_time = 2.48  # Dataset-specific parameter\n    deceleration_profile = [-3.5, -4.8, -6.0]\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    direction = 'right'\n    lateral_displacement = 2.34  # Conflict distance\n    execution_time = 2.15  # Aggressive maneuver duration\n    steering_angle = 0.18  # Sharp turn parameter",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 2.8  # Tight spacing pattern\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 14.48\n    acceleration_phases = [\n        (0-1.5s: 2.8 m/s²),\n        (1.5s+: 3.2 m/s²)\n    ]\n    speed_maintain_duration = 4.5\n    \nadv2_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(1.457)\n    lateral_acceleration = 0.85  # Aggressive maneuver\n    direction = 'left'\n    max_lateral_offset = 3.5  # Critical displacement",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.5  # Observed braking magnitude\n    min_safe_gap = 3.2  # Reduced safety margin\n    reaction_time = 1.15  # Fast response\n    \nadv1_behavior = SuddenAccelerationBehavior:\n    speed_increment = 6.28\n    acceleration_phases = [\n        (0-2s: 2.5 m/s²),\n        (2s+: 3.1 m/s²)\n    ]\n    lane_keeping = True\n    \nadv2_behavior = TailgatingBehavior:\n    min_gap = 1.3\n    follow_distance = 1.3\n    brake_reaction = 0.8  # Aggressive response\n    deceleration_profile = [-4.0, -5.5]",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 1.5  # Reduced safety margin\n    reaction_time = 1.05  # Fast response\n    \nadv1_behavior = SuddenLaneChangeBehavior:\n    trigger_condition = DistanceThreshold(8.0)\n    lateral_acceleration = 0.92  # Aggressive maneuver\n    direction = 'right'\n    max_lateral_offset = 1.334  # Conflict distance\n    completion_time = 2.4  # Rapid lane change\n    \nadv2_behavior = TailgatingBehavior:\n    trigger_distance = 1.052  # Activation threshold\n    deceleration_profile = [-3.5, -5.0]\n    maintain_gap = 0.8  # Dangerous following\n    steering_compensation = 0.05  # Path alignment",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_safe_gap = 3.8  # Reduced safety margin\n    reaction_time = 1.18  # Fast response pattern\n    \nadv1_behavior = TailgatingBehavior:\n    trigger_condition = DistanceThreshold(1.5)\n    acceleration_profile = [2.5, 3.0]  # Aggressive closing\n    min_gap_maintain = 1.05  # Critical distance\n    \nadv2_behavior = SuddenBrakeBehavior:\n    activation_delay = 1.22  # Dataset-recorded reaction\n    brake_phases = [\n        (0-1s: -3.5 m/s²),\n        (1s+: -5.8 m/s²)\n    ]\n    steering_compensation = 0.12  # Lateral stability",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -5.8  # Observed braking magnitude\n    min_gap = 2.8  # Reduced safety margin\n    reaction_time = 1.45  # Response delay\n    \nadv1_behavior = SuddenBrakeBehavior:\n    trigger_condition = DistanceToEgo(25.0)\n    reaction_time = 2.32  # Dataset-specific parameter\n    deceleration_profile = [-3.2, -4.5, -5.8]  # Progressive braking\n    \nadv2_behavior = UnsafeLaneChangeBehavior:\n    direction = 'right'\n    trigger_distance = 2.236  # Precise conflict distance\n    lateral_acceleration = 0.85  # m/s² \n    completion_time = 2.15  # Aggressive maneuver timing",
    "ego_behavior = IDMBehavior:  \n    emergency_deceleration = -6.2  # Braking magnitude  \n    min_gap = 1.5  # Reduced safety margin  \n    reaction_time = 1.25  # Fast response  \n  \nadv1_behavior = SuddenLaneChangeBehavior:  \n    trigger_condition = DistanceToEgo(15.0)  \n    lateral_acceleration = 0.85  # Aggressive maneuver  \n    direction = 'right'  \n    max_lateral_offset = 3.514  # Conflict distance  \n  \nadv2_behavior = TailgatingBehavior:  \n    activation_gap = 1.456  \n    progressive_braking = [-2.0, -4.0, -6.0]  \n    time_headway = 0.5  # Dangerous following",
    "ego_behavior = IDMBehavior:\n    emergency_deceleration = -6.2  # Observed braking magnitude\n    min_gap = 3.0  # Reduced safety margin\n    reaction_time = 1.25  # Response delay\n    \nadv1_behavior = SpeedingBehavior:\n    speed_increment = 10.93\n    acceleration_profile = [3.0, 3.5]  # Progressive acceleration\n    speed_maintain_duration = 4.8  # Sustained speed phase\n    \nadv2_behavior = LateralSpeedingBehavior:\n    lateral_acceleration = 8.27 \n    direction = 'left'\n    max_lateral_offset = -3.5  # Crossing pattern\n    collision_avoidance = False  # Hostile intent"
  ]
}